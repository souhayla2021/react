{"ast":null,"code":"/*! DataTables 1.10.21\n * Â©2008-2020 SpryMedia Ltd - datatables.net/license\n */\n\n/**\n * @summary     DataTables\n * @description Paginate, search and order HTML tables\n * @version     1.10.21\n * @file        jquery.dataTables.js\n * @author      SpryMedia Ltd\n * @contact     www.datatables.net\n * @copyright   Copyright 2008-2020 SpryMedia Ltd.\n *\n * This source file is free software, available under the following license:\n *   MIT license - http://datatables.net/license\n *\n * This source file is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.\n *\n * For details please refer to: http://www.datatables.net\n */\n\n/*jslint evil: true, undef: true, browser: true */\n\n/*globals $,require,jQuery,define,_selector_run,_selector_opts,_selector_first,_selector_row_indexes,_ext,_Api,_api_register,_api_registerPlural,_re_new_lines,_re_html,_re_formatted_numeric,_re_escape_regex,_empty,_intVal,_numToDecimal,_isNumber,_isHtml,_htmlNumeric,_pluck,_pluck_order,_range,_stripHtml,_unique,_fnBuildAjax,_fnAjaxUpdate,_fnAjaxParameters,_fnAjaxUpdateDraw,_fnAjaxDataSrc,_fnAddColumn,_fnColumnOptions,_fnAdjustColumnSizing,_fnVisibleToColumnIndex,_fnColumnIndexToVisible,_fnVisbleColumns,_fnGetColumns,_fnColumnTypes,_fnApplyColumnDefs,_fnHungarianMap,_fnCamelToHungarian,_fnLanguageCompat,_fnBrowserDetect,_fnAddData,_fnAddTr,_fnNodeToDataIndex,_fnNodeToColumnIndex,_fnGetCellData,_fnSetCellData,_fnSplitObjNotation,_fnGetObjectDataFn,_fnSetObjectDataFn,_fnGetDataMaster,_fnClearTable,_fnDeleteIndex,_fnInvalidate,_fnGetRowElements,_fnCreateTr,_fnBuildHead,_fnDrawHead,_fnDraw,_fnReDraw,_fnAddOptionsHtml,_fnDetectHeader,_fnGetUniqueThs,_fnFeatureHtmlFilter,_fnFilterComplete,_fnFilterCustom,_fnFilterColumn,_fnFilter,_fnFilterCreateSearch,_fnEscapeRegex,_fnFilterData,_fnFeatureHtmlInfo,_fnUpdateInfo,_fnInfoMacros,_fnInitialise,_fnInitComplete,_fnLengthChange,_fnFeatureHtmlLength,_fnFeatureHtmlPaginate,_fnPageChange,_fnFeatureHtmlProcessing,_fnProcessingDisplay,_fnFeatureHtmlTable,_fnScrollDraw,_fnApplyToChildren,_fnCalculateColumnWidths,_fnThrottle,_fnConvertToWidth,_fnGetWidestNode,_fnGetMaxLenString,_fnStringToCss,_fnSortFlatten,_fnSort,_fnSortAria,_fnSortListener,_fnSortAttachListener,_fnSortingClasses,_fnSortData,_fnSaveState,_fnLoadState,_fnSettingsFromNode,_fnLog,_fnMap,_fnBindAction,_fnCallbackReg,_fnCallbackFire,_fnLengthOverflow,_fnRenderer,_fnDataSource,_fnRowAttributes*/\n(function (factory) {\n  \"use strict\";\n\n  if (typeof define === 'function' && define.amd) {\n    // AMD\n    define(['jquery'], function ($) {\n      return factory($, window, document);\n    });\n  } else if (typeof exports === 'object') {\n    // CommonJS\n    module.exports = function (root, $) {\n      if (!root) {\n        // CommonJS environments without a window global must pass a\n        // root. This will give an error otherwise\n        root = window;\n      }\n\n      if (!$) {\n        $ = typeof window !== 'undefined' ? // jQuery's factory checks for a global window\n        require('jquery') : require('jquery')(root);\n      }\n\n      return factory($, root, root.document);\n    };\n  } else {\n    // Browser\n    factory(jQuery, window, document);\n  }\n})(function ($, window, document, undefined) {\n  \"use strict\";\n  /**\n   * DataTables is a plug-in for the jQuery Javascript library. It is a highly\n   * flexible tool, based upon the foundations of progressive enhancement,\n   * which will add advanced interaction controls to any HTML table. For a\n   * full list of features please refer to\n   * [DataTables.net](href=\"http://datatables.net).\n   *\n   * Note that the `DataTable` object is not a global variable but is aliased\n   * to `jQuery.fn.DataTable` and `jQuery.fn.dataTable` through which it may\n   * be  accessed.\n   *\n   *  @class\n   *  @param {object} [init={}] Configuration object for DataTables. Options\n   *    are defined by {@link DataTable.defaults}\n   *  @requires jQuery 1.7+\n   *\n   *  @example\n   *    // Basic initialisation\n   *    $(document).ready( function {\n   *      $('#example').dataTable();\n   *    } );\n   *\n   *  @example\n   *    // Initialisation with configuration options - in this case, disable\n   *    // pagination and sorting.\n   *    $(document).ready( function {\n   *      $('#example').dataTable( {\n   *        \"paginate\": false,\n   *        \"sort\": false\n   *      } );\n   *    } );\n   */\n\n  var DataTable = function (options) {\n    /**\n     * Perform a jQuery selector action on the table's TR elements (from the tbody) and\n     * return the resulting jQuery object.\n     *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on\n     *  @param {object} [oOpts] Optional parameters for modifying the rows to be included\n     *  @param {string} [oOpts.filter=none] Select TR elements that meet the current filter\n     *    criterion (\"applied\") or all TR elements (i.e. no filter).\n     *  @param {string} [oOpts.order=current] Order of the TR elements in the processed array.\n     *    Can be either 'current', whereby the current sorting of the table is used, or\n     *    'original' whereby the original order the data was read into the table is used.\n     *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page\n     *    (\"current\") or not (\"all\"). If 'current' is given, then order is assumed to be\n     *    'current' and filter is 'applied', regardless of what they might be given as.\n     *  @returns {object} jQuery object, filtered by the given selector.\n     *  @dtopt API\n     *  @deprecated Since v1.10\n     *\n     *  @example\n     *    $(document).ready(function() {\n     *      var oTable = $('#example').dataTable();\n     *\n     *      // Highlight every second row\n     *      oTable.$('tr:odd').css('backgroundColor', 'blue');\n     *    } );\n     *\n     *  @example\n     *    $(document).ready(function() {\n     *      var oTable = $('#example').dataTable();\n     *\n     *      // Filter to rows with 'Webkit' in them, add a background colour and then\n     *      // remove the filter, thus highlighting the 'Webkit' rows only.\n     *      oTable.fnFilter('Webkit');\n     *      oTable.$('tr', {\"search\": \"applied\"}).css('backgroundColor', 'blue');\n     *      oTable.fnFilter('');\n     *    } );\n     */\n    this.$ = function (sSelector, oOpts) {\n      return this.api(true).$(sSelector, oOpts);\n    };\n    /**\n     * Almost identical to $ in operation, but in this case returns the data for the matched\n     * rows - as such, the jQuery selector used should match TR row nodes or TD/TH cell nodes\n     * rather than any descendants, so the data can be obtained for the row/cell. If matching\n     * rows are found, the data returned is the original data array/object that was used to\n     * create the row (or a generated array if from a DOM source).\n     *\n     * This method is often useful in-combination with $ where both functions are given the\n     * same parameters and the array indexes will match identically.\n     *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on\n     *  @param {object} [oOpts] Optional parameters for modifying the rows to be included\n     *  @param {string} [oOpts.filter=none] Select elements that meet the current filter\n     *    criterion (\"applied\") or all elements (i.e. no filter).\n     *  @param {string} [oOpts.order=current] Order of the data in the processed array.\n     *    Can be either 'current', whereby the current sorting of the table is used, or\n     *    'original' whereby the original order the data was read into the table is used.\n     *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page\n     *    (\"current\") or not (\"all\"). If 'current' is given, then order is assumed to be\n     *    'current' and filter is 'applied', regardless of what they might be given as.\n     *  @returns {array} Data for the matched elements. If any elements, as a result of the\n     *    selector, were not TR, TD or TH elements in the DataTable, they will have a null\n     *    entry in the array.\n     *  @dtopt API\n     *  @deprecated Since v1.10\n     *\n     *  @example\n     *    $(document).ready(function() {\n     *      var oTable = $('#example').dataTable();\n     *\n     *      // Get the data from the first row in the table\n     *      var data = oTable._('tr:first');\n     *\n     *      // Do something useful with the data\n     *      alert( \"First cell is: \"+data[0] );\n     *    } );\n     *\n     *  @example\n     *    $(document).ready(function() {\n     *      var oTable = $('#example').dataTable();\n     *\n     *      // Filter to 'Webkit' and get all data for\n     *      oTable.fnFilter('Webkit');\n     *      var data = oTable._('tr', {\"search\": \"applied\"});\n     *\n     *      // Do something with the data\n     *      alert( data.length+\" rows matched the search\" );\n     *    } );\n     */\n\n\n    this._ = function (sSelector, oOpts) {\n      return this.api(true).rows(sSelector, oOpts).data();\n    };\n    /**\n     * Create a DataTables Api instance, with the currently selected tables for\n     * the Api's context.\n     * @param {boolean} [traditional=false] Set the API instance's context to be\n     *   only the table referred to by the `DataTable.ext.iApiIndex` option, as was\n     *   used in the API presented by DataTables 1.9- (i.e. the traditional mode),\n     *   or if all tables captured in the jQuery object should be used.\n     * @return {DataTables.Api}\n     */\n\n\n    this.api = function (traditional) {\n      return traditional ? new _Api(_fnSettingsFromNode(this[_ext.iApiIndex])) : new _Api(this);\n    };\n    /**\n     * Add a single new row or multiple rows of data to the table. Please note\n     * that this is suitable for client-side processing only - if you are using\n     * server-side processing (i.e. \"bServerSide\": true), then to add data, you\n     * must add it to the data source, i.e. the server-side, through an Ajax call.\n     *  @param {array|object} data The data to be added to the table. This can be:\n     *    <ul>\n     *      <li>1D array of data - add a single row with the data provided</li>\n     *      <li>2D array of arrays - add multiple rows in a single call</li>\n     *      <li>object - data object when using <i>mData</i></li>\n     *      <li>array of objects - multiple data objects when using <i>mData</i></li>\n     *    </ul>\n     *  @param {bool} [redraw=true] redraw the table or not\n     *  @returns {array} An array of integers, representing the list of indexes in\n     *    <i>aoData</i> ({@link DataTable.models.oSettings}) that have been added to\n     *    the table.\n     *  @dtopt API\n     *  @deprecated Since v1.10\n     *\n     *  @example\n     *    // Global var for counter\n     *    var giCount = 2;\n     *\n     *    $(document).ready(function() {\n     *      $('#example').dataTable();\n     *    } );\n     *\n     *    function fnClickAddRow() {\n     *      $('#example').dataTable().fnAddData( [\n     *        giCount+\".1\",\n     *        giCount+\".2\",\n     *        giCount+\".3\",\n     *        giCount+\".4\" ]\n     *      );\n     *\n     *      giCount++;\n     *    }\n     */\n\n\n    this.fnAddData = function (data, redraw) {\n      var api = this.api(true);\n      /* Check if we want to add multiple rows or not */\n\n      var rows = $.isArray(data) && ($.isArray(data[0]) || $.isPlainObject(data[0])) ? api.rows.add(data) : api.row.add(data);\n\n      if (redraw === undefined || redraw) {\n        api.draw();\n      }\n\n      return rows.flatten().toArray();\n    };\n    /**\n     * This function will make DataTables recalculate the column sizes, based on the data\n     * contained in the table and the sizes applied to the columns (in the DOM, CSS or\n     * through the sWidth parameter). This can be useful when the width of the table's\n     * parent element changes (for example a window resize).\n     *  @param {boolean} [bRedraw=true] Redraw the table or not, you will typically want to\n     *  @dtopt API\n     *  @deprecated Since v1.10\n     *\n     *  @example\n     *    $(document).ready(function() {\n     *      var oTable = $('#example').dataTable( {\n     *        \"sScrollY\": \"200px\",\n     *        \"bPaginate\": false\n     *      } );\n     *\n     *      $(window).on('resize', function () {\n     *        oTable.fnAdjustColumnSizing();\n     *      } );\n     *    } );\n     */\n\n\n    this.fnAdjustColumnSizing = function (bRedraw) {\n      var api = this.api(true).columns.adjust();\n      var settings = api.settings()[0];\n      var scroll = settings.oScroll;\n\n      if (bRedraw === undefined || bRedraw) {\n        api.draw(false);\n      } else if (scroll.sX !== \"\" || scroll.sY !== \"\") {\n        /* If not redrawing, but scrolling, we want to apply the new column sizes anyway */\n        _fnScrollDraw(settings);\n      }\n    };\n    /**\n     * Quickly and simply clear a table\n     *  @param {bool} [bRedraw=true] redraw the table or not\n     *  @dtopt API\n     *  @deprecated Since v1.10\n     *\n     *  @example\n     *    $(document).ready(function() {\n     *      var oTable = $('#example').dataTable();\n     *\n     *      // Immediately 'nuke' the current rows (perhaps waiting for an Ajax callback...)\n     *      oTable.fnClearTable();\n     *    } );\n     */\n\n\n    this.fnClearTable = function (bRedraw) {\n      var api = this.api(true).clear();\n\n      if (bRedraw === undefined || bRedraw) {\n        api.draw();\n      }\n    };\n    /**\n     * The exact opposite of 'opening' a row, this function will close any rows which\n     * are currently 'open'.\n     *  @param {node} nTr the table row to 'close'\n     *  @returns {int} 0 on success, or 1 if failed (can't find the row)\n     *  @dtopt API\n     *  @deprecated Since v1.10\n     *\n     *  @example\n     *    $(document).ready(function() {\n     *      var oTable;\n     *\n     *      // 'open' an information row when a row is clicked on\n     *      $('#example tbody tr').click( function () {\n     *        if ( oTable.fnIsOpen(this) ) {\n     *          oTable.fnClose( this );\n     *        } else {\n     *          oTable.fnOpen( this, \"Temporary row opened\", \"info_row\" );\n     *        }\n     *      } );\n     *\n     *      oTable = $('#example').dataTable();\n     *    } );\n     */\n\n\n    this.fnClose = function (nTr) {\n      this.api(true).row(nTr).child.hide();\n    };\n    /**\n     * Remove a row for the table\n     *  @param {mixed} target The index of the row from aoData to be deleted, or\n     *    the TR element you want to delete\n     *  @param {function|null} [callBack] Callback function\n     *  @param {bool} [redraw=true] Redraw the table or not\n     *  @returns {array} The row that was deleted\n     *  @dtopt API\n     *  @deprecated Since v1.10\n     *\n     *  @example\n     *    $(document).ready(function() {\n     *      var oTable = $('#example').dataTable();\n     *\n     *      // Immediately remove the first row\n     *      oTable.fnDeleteRow( 0 );\n     *    } );\n     */\n\n\n    this.fnDeleteRow = function (target, callback, redraw) {\n      var api = this.api(true);\n      var rows = api.rows(target);\n      var settings = rows.settings()[0];\n      var data = settings.aoData[rows[0][0]];\n      rows.remove();\n\n      if (callback) {\n        callback.call(this, settings, data);\n      }\n\n      if (redraw === undefined || redraw) {\n        api.draw();\n      }\n\n      return data;\n    };\n    /**\n     * Restore the table to it's original state in the DOM by removing all of DataTables\n     * enhancements, alterations to the DOM structure of the table and event listeners.\n     *  @param {boolean} [remove=false] Completely remove the table from the DOM\n     *  @dtopt API\n     *  @deprecated Since v1.10\n     *\n     *  @example\n     *    $(document).ready(function() {\n     *      // This example is fairly pointless in reality, but shows how fnDestroy can be used\n     *      var oTable = $('#example').dataTable();\n     *      oTable.fnDestroy();\n     *    } );\n     */\n\n\n    this.fnDestroy = function (remove) {\n      this.api(true).destroy(remove);\n    };\n    /**\n     * Redraw the table\n     *  @param {bool} [complete=true] Re-filter and resort (if enabled) the table before the draw.\n     *  @dtopt API\n     *  @deprecated Since v1.10\n     *\n     *  @example\n     *    $(document).ready(function() {\n     *      var oTable = $('#example').dataTable();\n     *\n     *      // Re-draw the table - you wouldn't want to do it here, but it's an example :-)\n     *      oTable.fnDraw();\n     *    } );\n     */\n\n\n    this.fnDraw = function (complete) {\n      // Note that this isn't an exact match to the old call to _fnDraw - it takes\n      // into account the new data, but can hold position.\n      this.api(true).draw(complete);\n    };\n    /**\n     * Filter the input based on data\n     *  @param {string} sInput String to filter the table on\n     *  @param {int|null} [iColumn] Column to limit filtering to\n     *  @param {bool} [bRegex=false] Treat as regular expression or not\n     *  @param {bool} [bSmart=true] Perform smart filtering or not\n     *  @param {bool} [bShowGlobal=true] Show the input global filter in it's input box(es)\n     *  @param {bool} [bCaseInsensitive=true] Do case-insensitive matching (true) or not (false)\n     *  @dtopt API\n     *  @deprecated Since v1.10\n     *\n     *  @example\n     *    $(document).ready(function() {\n     *      var oTable = $('#example').dataTable();\n     *\n     *      // Sometime later - filter...\n     *      oTable.fnFilter( 'test string' );\n     *    } );\n     */\n\n\n    this.fnFilter = function (sInput, iColumn, bRegex, bSmart, bShowGlobal, bCaseInsensitive) {\n      var api = this.api(true);\n\n      if (iColumn === null || iColumn === undefined) {\n        api.search(sInput, bRegex, bSmart, bCaseInsensitive);\n      } else {\n        api.column(iColumn).search(sInput, bRegex, bSmart, bCaseInsensitive);\n      }\n\n      api.draw();\n    };\n    /**\n     * Get the data for the whole table, an individual row or an individual cell based on the\n     * provided parameters.\n     *  @param {int|node} [src] A TR row node, TD/TH cell node or an integer. If given as\n     *    a TR node then the data source for the whole row will be returned. If given as a\n     *    TD/TH cell node then iCol will be automatically calculated and the data for the\n     *    cell returned. If given as an integer, then this is treated as the aoData internal\n     *    data index for the row (see fnGetPosition) and the data for that row used.\n     *  @param {int} [col] Optional column index that you want the data of.\n     *  @returns {array|object|string} If mRow is undefined, then the data for all rows is\n     *    returned. If mRow is defined, just data for that row, and is iCol is\n     *    defined, only data for the designated cell is returned.\n     *  @dtopt API\n     *  @deprecated Since v1.10\n     *\n     *  @example\n     *    // Row data\n     *    $(document).ready(function() {\n     *      oTable = $('#example').dataTable();\n     *\n     *      oTable.$('tr').click( function () {\n     *        var data = oTable.fnGetData( this );\n     *        // ... do something with the array / object of data for the row\n     *      } );\n     *    } );\n     *\n     *  @example\n     *    // Individual cell data\n     *    $(document).ready(function() {\n     *      oTable = $('#example').dataTable();\n     *\n     *      oTable.$('td').click( function () {\n     *        var sData = oTable.fnGetData( this );\n     *        alert( 'The cell clicked on had the value of '+sData );\n     *      } );\n     *    } );\n     */\n\n\n    this.fnGetData = function (src, col) {\n      var api = this.api(true);\n\n      if (src !== undefined) {\n        var type = src.nodeName ? src.nodeName.toLowerCase() : '';\n        return col !== undefined || type == 'td' || type == 'th' ? api.cell(src, col).data() : api.row(src).data() || null;\n      }\n\n      return api.data().toArray();\n    };\n    /**\n     * Get an array of the TR nodes that are used in the table's body. Note that you will\n     * typically want to use the '$' API method in preference to this as it is more\n     * flexible.\n     *  @param {int} [iRow] Optional row index for the TR element you want\n     *  @returns {array|node} If iRow is undefined, returns an array of all TR elements\n     *    in the table's body, or iRow is defined, just the TR element requested.\n     *  @dtopt API\n     *  @deprecated Since v1.10\n     *\n     *  @example\n     *    $(document).ready(function() {\n     *      var oTable = $('#example').dataTable();\n     *\n     *      // Get the nodes from the table\n     *      var nNodes = oTable.fnGetNodes( );\n     *    } );\n     */\n\n\n    this.fnGetNodes = function (iRow) {\n      var api = this.api(true);\n      return iRow !== undefined ? api.row(iRow).node() : api.rows().nodes().flatten().toArray();\n    };\n    /**\n     * Get the array indexes of a particular cell from it's DOM element\n     * and column index including hidden columns\n     *  @param {node} node this can either be a TR, TD or TH in the table's body\n     *  @returns {int} If nNode is given as a TR, then a single index is returned, or\n     *    if given as a cell, an array of [row index, column index (visible),\n     *    column index (all)] is given.\n     *  @dtopt API\n     *  @deprecated Since v1.10\n     *\n     *  @example\n     *    $(document).ready(function() {\n     *      $('#example tbody td').click( function () {\n     *        // Get the position of the current data from the node\n     *        var aPos = oTable.fnGetPosition( this );\n     *\n     *        // Get the data array for this row\n     *        var aData = oTable.fnGetData( aPos[0] );\n     *\n     *        // Update the data array and return the value\n     *        aData[ aPos[1] ] = 'clicked';\n     *        this.innerHTML = 'clicked';\n     *      } );\n     *\n     *      // Init DataTables\n     *      oTable = $('#example').dataTable();\n     *    } );\n     */\n\n\n    this.fnGetPosition = function (node) {\n      var api = this.api(true);\n      var nodeName = node.nodeName.toUpperCase();\n\n      if (nodeName == 'TR') {\n        return api.row(node).index();\n      } else if (nodeName == 'TD' || nodeName == 'TH') {\n        var cell = api.cell(node).index();\n        return [cell.row, cell.columnVisible, cell.column];\n      }\n\n      return null;\n    };\n    /**\n     * Check to see if a row is 'open' or not.\n     *  @param {node} nTr the table row to check\n     *  @returns {boolean} true if the row is currently open, false otherwise\n     *  @dtopt API\n     *  @deprecated Since v1.10\n     *\n     *  @example\n     *    $(document).ready(function() {\n     *      var oTable;\n     *\n     *      // 'open' an information row when a row is clicked on\n     *      $('#example tbody tr').click( function () {\n     *        if ( oTable.fnIsOpen(this) ) {\n     *          oTable.fnClose( this );\n     *        } else {\n     *          oTable.fnOpen( this, \"Temporary row opened\", \"info_row\" );\n     *        }\n     *      } );\n     *\n     *      oTable = $('#example').dataTable();\n     *    } );\n     */\n\n\n    this.fnIsOpen = function (nTr) {\n      return this.api(true).row(nTr).child.isShown();\n    };\n    /**\n     * This function will place a new row directly after a row which is currently\n     * on display on the page, with the HTML contents that is passed into the\n     * function. This can be used, for example, to ask for confirmation that a\n     * particular record should be deleted.\n     *  @param {node} nTr The table row to 'open'\n     *  @param {string|node|jQuery} mHtml The HTML to put into the row\n     *  @param {string} sClass Class to give the new TD cell\n     *  @returns {node} The row opened. Note that if the table row passed in as the\n     *    first parameter, is not found in the table, this method will silently\n     *    return.\n     *  @dtopt API\n     *  @deprecated Since v1.10\n     *\n     *  @example\n     *    $(document).ready(function() {\n     *      var oTable;\n     *\n     *      // 'open' an information row when a row is clicked on\n     *      $('#example tbody tr').click( function () {\n     *        if ( oTable.fnIsOpen(this) ) {\n     *          oTable.fnClose( this );\n     *        } else {\n     *          oTable.fnOpen( this, \"Temporary row opened\", \"info_row\" );\n     *        }\n     *      } );\n     *\n     *      oTable = $('#example').dataTable();\n     *    } );\n     */\n\n\n    this.fnOpen = function (nTr, mHtml, sClass) {\n      return this.api(true).row(nTr).child(mHtml, sClass).show().child()[0];\n    };\n    /**\n     * Change the pagination - provides the internal logic for pagination in a simple API\n     * function. With this function you can have a DataTables table go to the next,\n     * previous, first or last pages.\n     *  @param {string|int} mAction Paging action to take: \"first\", \"previous\", \"next\" or \"last\"\n     *    or page number to jump to (integer), note that page 0 is the first page.\n     *  @param {bool} [bRedraw=true] Redraw the table or not\n     *  @dtopt API\n     *  @deprecated Since v1.10\n     *\n     *  @example\n     *    $(document).ready(function() {\n     *      var oTable = $('#example').dataTable();\n     *      oTable.fnPageChange( 'next' );\n     *    } );\n     */\n\n\n    this.fnPageChange = function (mAction, bRedraw) {\n      var api = this.api(true).page(mAction);\n\n      if (bRedraw === undefined || bRedraw) {\n        api.draw(false);\n      }\n    };\n    /**\n     * Show a particular column\n     *  @param {int} iCol The column whose display should be changed\n     *  @param {bool} bShow Show (true) or hide (false) the column\n     *  @param {bool} [bRedraw=true] Redraw the table or not\n     *  @dtopt API\n     *  @deprecated Since v1.10\n     *\n     *  @example\n     *    $(document).ready(function() {\n     *      var oTable = $('#example').dataTable();\n     *\n     *      // Hide the second column after initialisation\n     *      oTable.fnSetColumnVis( 1, false );\n     *    } );\n     */\n\n\n    this.fnSetColumnVis = function (iCol, bShow, bRedraw) {\n      var api = this.api(true).column(iCol).visible(bShow);\n\n      if (bRedraw === undefined || bRedraw) {\n        api.columns.adjust().draw();\n      }\n    };\n    /**\n     * Get the settings for a particular table for external manipulation\n     *  @returns {object} DataTables settings object. See\n     *    {@link DataTable.models.oSettings}\n     *  @dtopt API\n     *  @deprecated Since v1.10\n     *\n     *  @example\n     *    $(document).ready(function() {\n     *      var oTable = $('#example').dataTable();\n     *      var oSettings = oTable.fnSettings();\n     *\n     *      // Show an example parameter from the settings\n     *      alert( oSettings._iDisplayStart );\n     *    } );\n     */\n\n\n    this.fnSettings = function () {\n      return _fnSettingsFromNode(this[_ext.iApiIndex]);\n    };\n    /**\n     * Sort the table by a particular column\n     *  @param {int} iCol the data index to sort on. Note that this will not match the\n     *    'display index' if you have hidden data entries\n     *  @dtopt API\n     *  @deprecated Since v1.10\n     *\n     *  @example\n     *    $(document).ready(function() {\n     *      var oTable = $('#example').dataTable();\n     *\n     *      // Sort immediately with columns 0 and 1\n     *      oTable.fnSort( [ [0,'asc'], [1,'asc'] ] );\n     *    } );\n     */\n\n\n    this.fnSort = function (aaSort) {\n      this.api(true).order(aaSort).draw();\n    };\n    /**\n     * Attach a sort listener to an element for a given column\n     *  @param {node} nNode the element to attach the sort listener to\n     *  @param {int} iColumn the column that a click on this node will sort on\n     *  @param {function} [fnCallback] callback function when sort is run\n     *  @dtopt API\n     *  @deprecated Since v1.10\n     *\n     *  @example\n     *    $(document).ready(function() {\n     *      var oTable = $('#example').dataTable();\n     *\n     *      // Sort on column 1, when 'sorter' is clicked on\n     *      oTable.fnSortListener( document.getElementById('sorter'), 1 );\n     *    } );\n     */\n\n\n    this.fnSortListener = function (nNode, iColumn, fnCallback) {\n      this.api(true).order.listener(nNode, iColumn, fnCallback);\n    };\n    /**\n     * Update a table cell or row - this method will accept either a single value to\n     * update the cell with, an array of values with one element for each column or\n     * an object in the same format as the original data source. The function is\n     * self-referencing in order to make the multi column updates easier.\n     *  @param {object|array|string} mData Data to update the cell/row with\n     *  @param {node|int} mRow TR element you want to update or the aoData index\n     *  @param {int} [iColumn] The column to update, give as null or undefined to\n     *    update a whole row.\n     *  @param {bool} [bRedraw=true] Redraw the table or not\n     *  @param {bool} [bAction=true] Perform pre-draw actions or not\n     *  @returns {int} 0 on success, 1 on error\n     *  @dtopt API\n     *  @deprecated Since v1.10\n     *\n     *  @example\n     *    $(document).ready(function() {\n     *      var oTable = $('#example').dataTable();\n     *      oTable.fnUpdate( 'Example update', 0, 0 ); // Single cell\n     *      oTable.fnUpdate( ['a', 'b', 'c', 'd', 'e'], $('tbody tr')[0] ); // Row\n     *    } );\n     */\n\n\n    this.fnUpdate = function (mData, mRow, iColumn, bRedraw, bAction) {\n      var api = this.api(true);\n\n      if (iColumn === undefined || iColumn === null) {\n        api.row(mRow).data(mData);\n      } else {\n        api.cell(mRow, iColumn).data(mData);\n      }\n\n      if (bAction === undefined || bAction) {\n        api.columns.adjust();\n      }\n\n      if (bRedraw === undefined || bRedraw) {\n        api.draw();\n      }\n\n      return 0;\n    };\n    /**\n     * Provide a common method for plug-ins to check the version of DataTables being used, in order\n     * to ensure compatibility.\n     *  @param {string} sVersion Version string to check for, in the format \"X.Y.Z\". Note that the\n     *    formats \"X\" and \"X.Y\" are also acceptable.\n     *  @returns {boolean} true if this version of DataTables is greater or equal to the required\n     *    version, or false if this version of DataTales is not suitable\n     *  @method\n     *  @dtopt API\n     *  @deprecated Since v1.10\n     *\n     *  @example\n     *    $(document).ready(function() {\n     *      var oTable = $('#example').dataTable();\n     *      alert( oTable.fnVersionCheck( '1.9.0' ) );\n     *    } );\n     */\n\n\n    this.fnVersionCheck = _ext.fnVersionCheck;\n\n    var _that = this;\n\n    var emptyInit = options === undefined;\n    var len = this.length;\n\n    if (emptyInit) {\n      options = {};\n    }\n\n    this.oApi = this.internal = _ext.internal; // Extend with old style plug-in API methods\n\n    for (var fn in DataTable.ext.internal) {\n      if (fn) {\n        this[fn] = _fnExternApiFunc(fn);\n      }\n    }\n\n    this.each(function () {\n      // For each initialisation we want to give it a clean initialisation\n      // object that can be bashed around\n      var o = {};\n      var oInit = len > 1 ? // optimisation for single table case\n      _fnExtend(o, options, true) : options;\n      /*global oInit,_that,emptyInit*/\n\n      var i = 0,\n          iLen,\n          j,\n          jLen,\n          k,\n          kLen;\n      var sId = this.getAttribute('id');\n      var bInitHandedOff = false;\n      var defaults = DataTable.defaults;\n      var $this = $(this);\n      /* Sanity check */\n\n      if (this.nodeName.toLowerCase() != 'table') {\n        _fnLog(null, 0, 'Non-table node initialisation (' + this.nodeName + ')', 2);\n\n        return;\n      }\n      /* Backwards compatibility for the defaults */\n\n\n      _fnCompatOpts(defaults);\n\n      _fnCompatCols(defaults.column);\n      /* Convert the camel-case defaults to Hungarian */\n\n\n      _fnCamelToHungarian(defaults, defaults, true);\n\n      _fnCamelToHungarian(defaults.column, defaults.column, true);\n      /* Setting up the initialisation object */\n\n\n      _fnCamelToHungarian(defaults, $.extend(oInit, $this.data()), true);\n      /* Check to see if we are re-initialising a table */\n\n\n      var allSettings = DataTable.settings;\n\n      for (i = 0, iLen = allSettings.length; i < iLen; i++) {\n        var s = allSettings[i];\n        /* Base check on table node */\n\n        if (s.nTable == this || s.nTHead && s.nTHead.parentNode == this || s.nTFoot && s.nTFoot.parentNode == this) {\n          var bRetrieve = oInit.bRetrieve !== undefined ? oInit.bRetrieve : defaults.bRetrieve;\n          var bDestroy = oInit.bDestroy !== undefined ? oInit.bDestroy : defaults.bDestroy;\n\n          if (emptyInit || bRetrieve) {\n            return s.oInstance;\n          } else if (bDestroy) {\n            s.oInstance.fnDestroy();\n            break;\n          } else {\n            _fnLog(s, 0, 'Cannot reinitialise DataTable', 3);\n\n            return;\n          }\n        }\n        /* If the element we are initialising has the same ID as a table which was previously\n         * initialised, but the table nodes don't match (from before) then we destroy the old\n         * instance by simply deleting it. This is under the assumption that the table has been\n         * destroyed by other methods. Anyone using non-id selectors will need to do this manually\n         */\n\n\n        if (s.sTableId == this.id) {\n          allSettings.splice(i, 1);\n          break;\n        }\n      }\n      /* Ensure the table has an ID - required for accessibility */\n\n\n      if (sId === null || sId === \"\") {\n        sId = \"DataTables_Table_\" + DataTable.ext._unique++;\n        this.id = sId;\n      }\n      /* Create the settings object for this table and set some of the default parameters */\n\n\n      var oSettings = $.extend(true, {}, DataTable.models.oSettings, {\n        \"sDestroyWidth\": $this[0].style.width,\n        \"sInstance\": sId,\n        \"sTableId\": sId\n      });\n      oSettings.nTable = this;\n      oSettings.oApi = _that.internal;\n      oSettings.oInit = oInit;\n      allSettings.push(oSettings); // Need to add the instance after the instance after the settings object has been added\n      // to the settings array, so we can self reference the table instance if more than one\n\n      oSettings.oInstance = _that.length === 1 ? _that : $this.dataTable(); // Backwards compatibility, before we apply all the defaults\n\n      _fnCompatOpts(oInit);\n\n      _fnLanguageCompat(oInit.oLanguage); // If the length menu is given, but the init display length is not, use the length menu\n\n\n      if (oInit.aLengthMenu && !oInit.iDisplayLength) {\n        oInit.iDisplayLength = $.isArray(oInit.aLengthMenu[0]) ? oInit.aLengthMenu[0][0] : oInit.aLengthMenu[0];\n      } // Apply the defaults and init options to make a single init object will all\n      // options defined from defaults and instance options.\n\n\n      oInit = _fnExtend($.extend(true, {}, defaults), oInit); // Map the initialisation options onto the settings object\n\n      _fnMap(oSettings.oFeatures, oInit, [\"bPaginate\", \"bLengthChange\", \"bFilter\", \"bSort\", \"bSortMulti\", \"bInfo\", \"bProcessing\", \"bAutoWidth\", \"bSortClasses\", \"bServerSide\", \"bDeferRender\"]);\n\n      _fnMap(oSettings, oInit, [\"asStripeClasses\", \"ajax\", \"fnServerData\", \"fnFormatNumber\", \"sServerMethod\", \"aaSorting\", \"aaSortingFixed\", \"aLengthMenu\", \"sPaginationType\", \"sAjaxSource\", \"sAjaxDataProp\", \"iStateDuration\", \"sDom\", \"bSortCellsTop\", \"iTabIndex\", \"fnStateLoadCallback\", \"fnStateSaveCallback\", \"renderer\", \"searchDelay\", \"rowId\", [\"iCookieDuration\", \"iStateDuration\"], // backwards compat\n      [\"oSearch\", \"oPreviousSearch\"], [\"aoSearchCols\", \"aoPreSearchCols\"], [\"iDisplayLength\", \"_iDisplayLength\"]]);\n\n      _fnMap(oSettings.oScroll, oInit, [[\"sScrollX\", \"sX\"], [\"sScrollXInner\", \"sXInner\"], [\"sScrollY\", \"sY\"], [\"bScrollCollapse\", \"bCollapse\"]]);\n\n      _fnMap(oSettings.oLanguage, oInit, \"fnInfoCallback\");\n      /* Callback functions which are array driven */\n\n\n      _fnCallbackReg(oSettings, 'aoDrawCallback', oInit.fnDrawCallback, 'user');\n\n      _fnCallbackReg(oSettings, 'aoServerParams', oInit.fnServerParams, 'user');\n\n      _fnCallbackReg(oSettings, 'aoStateSaveParams', oInit.fnStateSaveParams, 'user');\n\n      _fnCallbackReg(oSettings, 'aoStateLoadParams', oInit.fnStateLoadParams, 'user');\n\n      _fnCallbackReg(oSettings, 'aoStateLoaded', oInit.fnStateLoaded, 'user');\n\n      _fnCallbackReg(oSettings, 'aoRowCallback', oInit.fnRowCallback, 'user');\n\n      _fnCallbackReg(oSettings, 'aoRowCreatedCallback', oInit.fnCreatedRow, 'user');\n\n      _fnCallbackReg(oSettings, 'aoHeaderCallback', oInit.fnHeaderCallback, 'user');\n\n      _fnCallbackReg(oSettings, 'aoFooterCallback', oInit.fnFooterCallback, 'user');\n\n      _fnCallbackReg(oSettings, 'aoInitComplete', oInit.fnInitComplete, 'user');\n\n      _fnCallbackReg(oSettings, 'aoPreDrawCallback', oInit.fnPreDrawCallback, 'user');\n\n      oSettings.rowIdFn = _fnGetObjectDataFn(oInit.rowId);\n      /* Browser support detection */\n\n      _fnBrowserDetect(oSettings);\n\n      var oClasses = oSettings.oClasses;\n      $.extend(oClasses, DataTable.ext.classes, oInit.oClasses);\n      $this.addClass(oClasses.sTable);\n\n      if (oSettings.iInitDisplayStart === undefined) {\n        /* Display start point, taking into account the save saving */\n        oSettings.iInitDisplayStart = oInit.iDisplayStart;\n        oSettings._iDisplayStart = oInit.iDisplayStart;\n      }\n\n      if (oInit.iDeferLoading !== null) {\n        oSettings.bDeferLoading = true;\n        var tmp = $.isArray(oInit.iDeferLoading);\n        oSettings._iRecordsDisplay = tmp ? oInit.iDeferLoading[0] : oInit.iDeferLoading;\n        oSettings._iRecordsTotal = tmp ? oInit.iDeferLoading[1] : oInit.iDeferLoading;\n      }\n      /* Language definitions */\n\n\n      var oLanguage = oSettings.oLanguage;\n      $.extend(true, oLanguage, oInit.oLanguage);\n\n      if (oLanguage.sUrl) {\n        /* Get the language definitions from a file - because this Ajax call makes the language\n         * get async to the remainder of this function we use bInitHandedOff to indicate that\n         * _fnInitialise will be fired by the returned Ajax handler, rather than the constructor\n         */\n        $.ajax({\n          dataType: 'json',\n          url: oLanguage.sUrl,\n          success: function (json) {\n            _fnLanguageCompat(json);\n\n            _fnCamelToHungarian(defaults.oLanguage, json);\n\n            $.extend(true, oLanguage, json);\n\n            _fnInitialise(oSettings);\n          },\n          error: function () {\n            // Error occurred loading language file, continue on as best we can\n            _fnInitialise(oSettings);\n          }\n        });\n        bInitHandedOff = true;\n      }\n      /*\n       * Stripes\n       */\n\n\n      if (oInit.asStripeClasses === null) {\n        oSettings.asStripeClasses = [oClasses.sStripeOdd, oClasses.sStripeEven];\n      }\n      /* Remove row stripe classes if they are already on the table row */\n\n\n      var stripeClasses = oSettings.asStripeClasses;\n      var rowOne = $this.children('tbody').find('tr').eq(0);\n\n      if ($.inArray(true, $.map(stripeClasses, function (el, i) {\n        return rowOne.hasClass(el);\n      })) !== -1) {\n        $('tbody tr', this).removeClass(stripeClasses.join(' '));\n        oSettings.asDestroyStripes = stripeClasses.slice();\n      }\n      /*\n       * Columns\n       * See if we should load columns automatically or use defined ones\n       */\n\n\n      var anThs = [];\n      var aoColumnsInit;\n      var nThead = this.getElementsByTagName('thead');\n\n      if (nThead.length !== 0) {\n        _fnDetectHeader(oSettings.aoHeader, nThead[0]);\n\n        anThs = _fnGetUniqueThs(oSettings);\n      }\n      /* If not given a column array, generate one with nulls */\n\n\n      if (oInit.aoColumns === null) {\n        aoColumnsInit = [];\n\n        for (i = 0, iLen = anThs.length; i < iLen; i++) {\n          aoColumnsInit.push(null);\n        }\n      } else {\n        aoColumnsInit = oInit.aoColumns;\n      }\n      /* Add the columns */\n\n\n      for (i = 0, iLen = aoColumnsInit.length; i < iLen; i++) {\n        _fnAddColumn(oSettings, anThs ? anThs[i] : null);\n      }\n      /* Apply the column definitions */\n\n\n      _fnApplyColumnDefs(oSettings, oInit.aoColumnDefs, aoColumnsInit, function (iCol, oDef) {\n        _fnColumnOptions(oSettings, iCol, oDef);\n      });\n      /* HTML5 attribute detection - build an mData object automatically if the\n       * attributes are found\n       */\n\n\n      if (rowOne.length) {\n        var a = function (cell, name) {\n          return cell.getAttribute('data-' + name) !== null ? name : null;\n        };\n\n        $(rowOne[0]).children('th, td').each(function (i, cell) {\n          var col = oSettings.aoColumns[i];\n\n          if (col.mData === i) {\n            var sort = a(cell, 'sort') || a(cell, 'order');\n            var filter = a(cell, 'filter') || a(cell, 'search');\n\n            if (sort !== null || filter !== null) {\n              col.mData = {\n                _: i + '.display',\n                sort: sort !== null ? i + '.@data-' + sort : undefined,\n                type: sort !== null ? i + '.@data-' + sort : undefined,\n                filter: filter !== null ? i + '.@data-' + filter : undefined\n              };\n\n              _fnColumnOptions(oSettings, i);\n            }\n          }\n        });\n      }\n\n      var features = oSettings.oFeatures;\n\n      var loadedInit = function () {\n        /*\n         * Sorting\n         * @todo For modularisation (1.11) this needs to do into a sort start up handler\n         */\n        // If aaSorting is not defined, then we use the first indicator in asSorting\n        // in case that has been altered, so the default sort reflects that option\n        if (oInit.aaSorting === undefined) {\n          var sorting = oSettings.aaSorting;\n\n          for (i = 0, iLen = sorting.length; i < iLen; i++) {\n            sorting[i][1] = oSettings.aoColumns[i].asSorting[0];\n          }\n        }\n        /* Do a first pass on the sorting classes (allows any size changes to be taken into\n         * account, and also will apply sorting disabled classes if disabled\n         */\n\n\n        _fnSortingClasses(oSettings);\n\n        if (features.bSort) {\n          _fnCallbackReg(oSettings, 'aoDrawCallback', function () {\n            if (oSettings.bSorted) {\n              var aSort = _fnSortFlatten(oSettings);\n\n              var sortedColumns = {};\n              $.each(aSort, function (i, val) {\n                sortedColumns[val.src] = val.dir;\n              });\n\n              _fnCallbackFire(oSettings, null, 'order', [oSettings, aSort, sortedColumns]);\n\n              _fnSortAria(oSettings);\n            }\n          });\n        }\n\n        _fnCallbackReg(oSettings, 'aoDrawCallback', function () {\n          if (oSettings.bSorted || _fnDataSource(oSettings) === 'ssp' || features.bDeferRender) {\n            _fnSortingClasses(oSettings);\n          }\n        }, 'sc');\n        /*\n         * Final init\n         * Cache the header, body and footer as required, creating them if needed\n         */\n        // Work around for Webkit bug 83867 - store the caption-side before removing from doc\n\n\n        var captions = $this.children('caption').each(function () {\n          this._captionSide = $(this).css('caption-side');\n        });\n        var thead = $this.children('thead');\n\n        if (thead.length === 0) {\n          thead = $('<thead/>').appendTo($this);\n        }\n\n        oSettings.nTHead = thead[0];\n        var tbody = $this.children('tbody');\n\n        if (tbody.length === 0) {\n          tbody = $('<tbody/>').appendTo($this);\n        }\n\n        oSettings.nTBody = tbody[0];\n        var tfoot = $this.children('tfoot');\n\n        if (tfoot.length === 0 && captions.length > 0 && (oSettings.oScroll.sX !== \"\" || oSettings.oScroll.sY !== \"\")) {\n          // If we are a scrolling table, and no footer has been given, then we need to create\n          // a tfoot element for the caption element to be appended to\n          tfoot = $('<tfoot/>').appendTo($this);\n        }\n\n        if (tfoot.length === 0 || tfoot.children().length === 0) {\n          $this.addClass(oClasses.sNoFooter);\n        } else if (tfoot.length > 0) {\n          oSettings.nTFoot = tfoot[0];\n\n          _fnDetectHeader(oSettings.aoFooter, oSettings.nTFoot);\n        }\n        /* Check if there is data passing into the constructor */\n\n\n        if (oInit.aaData) {\n          for (i = 0; i < oInit.aaData.length; i++) {\n            _fnAddData(oSettings, oInit.aaData[i]);\n          }\n        } else if (oSettings.bDeferLoading || _fnDataSource(oSettings) == 'dom') {\n          /* Grab the data from the page - only do this when deferred loading or no Ajax\n           * source since there is no point in reading the DOM data if we are then going\n           * to replace it with Ajax data\n           */\n          _fnAddTr(oSettings, $(oSettings.nTBody).children('tr'));\n        }\n        /* Copy the data index array */\n\n\n        oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();\n        /* Initialisation complete - table can be drawn */\n\n        oSettings.bInitialised = true;\n        /* Check if we need to initialise the table (it might not have been handed off to the\n         * language processor)\n         */\n\n        if (bInitHandedOff === false) {\n          _fnInitialise(oSettings);\n        }\n      };\n      /* Must be done after everything which can be overridden by the state saving! */\n\n\n      if (oInit.bStateSave) {\n        features.bStateSave = true;\n\n        _fnCallbackReg(oSettings, 'aoDrawCallback', _fnSaveState, 'state_save');\n\n        _fnLoadState(oSettings, oInit, loadedInit);\n      } else {\n        loadedInit();\n      }\n    });\n    _that = null;\n    return this;\n  };\n  /*\n   * It is useful to have variables which are scoped locally so only the\n   * DataTables functions can access them and they don't leak into global space.\n   * At the same time these functions are often useful over multiple files in the\n   * core and API, so we list, or at least document, all variables which are used\n   * by DataTables as private variables here. This also ensures that there is no\n   * clashing of variable names and that they can easily referenced for reuse.\n   */\n  // Defined else where\n  //  _selector_run\n  //  _selector_opts\n  //  _selector_first\n  //  _selector_row_indexes\n\n\n  var _ext; // DataTable.ext\n\n\n  var _Api; // DataTable.Api\n\n\n  var _api_register; // DataTable.Api.register\n\n\n  var _api_registerPlural; // DataTable.Api.registerPlural\n\n\n  var _re_dic = {};\n  var _re_new_lines = /[\\r\\n\\u2028]/g;\n  var _re_html = /<.*?>/g; // This is not strict ISO8601 - Date.parse() is quite lax, although\n  // implementations differ between browsers.\n\n  var _re_date = /^\\d{2,4}[\\.\\/\\-]\\d{1,2}[\\.\\/\\-]\\d{1,2}([T ]{1}\\d{1,2}[:\\.]\\d{2}([\\.:]\\d{2})?)?$/; // Escape regular expression special characters\n\n  var _re_escape_regex = new RegExp('(\\\\' + ['/', '.', '*', '+', '?', '|', '(', ')', '[', ']', '{', '}', '\\\\', '$', '^', '-'].join('|\\\\') + ')', 'g'); // http://en.wikipedia.org/wiki/Foreign_exchange_market\n  // - \\u20BD - Russian ruble.\n  // - \\u20a9 - South Korean Won\n  // - \\u20BA - Turkish Lira\n  // - \\u20B9 - Indian Rupee\n  // - R - Brazil (R$) and South Africa\n  // - fr - Swiss Franc\n  // - kr - Swedish krona, Norwegian krone and Danish krone\n  // - \\u2009 is thin space and \\u202F is narrow no-break space, both used in many\n  // - É - Bitcoin\n  // - Î - Ethereum\n  //   standards as thousands separators.\n\n\n  var _re_formatted_numeric = /[',$Â£â¬Â¥%\\u2009\\u202F\\u20BD\\u20a9\\u20BArfkÉÎ]/gi;\n\n  var _empty = function (d) {\n    return !d || d === true || d === '-' ? true : false;\n  };\n\n  var _intVal = function (s) {\n    var integer = parseInt(s, 10);\n    return !isNaN(integer) && isFinite(s) ? integer : null;\n  }; // Convert from a formatted number with characters other than `.` as the\n  // decimal place, to a Javascript number\n\n\n  var _numToDecimal = function (num, decimalPoint) {\n    // Cache created regular expressions for speed as this function is called often\n    if (!_re_dic[decimalPoint]) {\n      _re_dic[decimalPoint] = new RegExp(_fnEscapeRegex(decimalPoint), 'g');\n    }\n\n    return typeof num === 'string' && decimalPoint !== '.' ? num.replace(/\\./g, '').replace(_re_dic[decimalPoint], '.') : num;\n  };\n\n  var _isNumber = function (d, decimalPoint, formatted) {\n    var strType = typeof d === 'string'; // If empty return immediately so there must be a number if it is a\n    // formatted string (this stops the string \"k\", or \"kr\", etc being detected\n    // as a formatted number for currency\n\n    if (_empty(d)) {\n      return true;\n    }\n\n    if (decimalPoint && strType) {\n      d = _numToDecimal(d, decimalPoint);\n    }\n\n    if (formatted && strType) {\n      d = d.replace(_re_formatted_numeric, '');\n    }\n\n    return !isNaN(parseFloat(d)) && isFinite(d);\n  }; // A string without HTML in it can be considered to be HTML still\n\n\n  var _isHtml = function (d) {\n    return _empty(d) || typeof d === 'string';\n  };\n\n  var _htmlNumeric = function (d, decimalPoint, formatted) {\n    if (_empty(d)) {\n      return true;\n    }\n\n    var html = _isHtml(d);\n\n    return !html ? null : _isNumber(_stripHtml(d), decimalPoint, formatted) ? true : null;\n  };\n\n  var _pluck = function (a, prop, prop2) {\n    var out = [];\n    var i = 0,\n        ien = a.length; // Could have the test in the loop for slightly smaller code, but speed\n    // is essential here\n\n    if (prop2 !== undefined) {\n      for (; i < ien; i++) {\n        if (a[i] && a[i][prop]) {\n          out.push(a[i][prop][prop2]);\n        }\n      }\n    } else {\n      for (; i < ien; i++) {\n        if (a[i]) {\n          out.push(a[i][prop]);\n        }\n      }\n    }\n\n    return out;\n  }; // Basically the same as _pluck, but rather than looping over `a` we use `order`\n  // as the indexes to pick from `a`\n\n\n  var _pluck_order = function (a, order, prop, prop2) {\n    var out = [];\n    var i = 0,\n        ien = order.length; // Could have the test in the loop for slightly smaller code, but speed\n    // is essential here\n\n    if (prop2 !== undefined) {\n      for (; i < ien; i++) {\n        if (a[order[i]][prop]) {\n          out.push(a[order[i]][prop][prop2]);\n        }\n      }\n    } else {\n      for (; i < ien; i++) {\n        out.push(a[order[i]][prop]);\n      }\n    }\n\n    return out;\n  };\n\n  var _range = function (len, start) {\n    var out = [];\n    var end;\n\n    if (start === undefined) {\n      start = 0;\n      end = len;\n    } else {\n      end = start;\n      start = len;\n    }\n\n    for (var i = start; i < end; i++) {\n      out.push(i);\n    }\n\n    return out;\n  };\n\n  var _removeEmpty = function (a) {\n    var out = [];\n\n    for (var i = 0, ien = a.length; i < ien; i++) {\n      if (a[i]) {\n        // careful - will remove all falsy values!\n        out.push(a[i]);\n      }\n    }\n\n    return out;\n  };\n\n  var _stripHtml = function (d) {\n    return d.replace(_re_html, '');\n  };\n  /**\n   * Determine if all values in the array are unique. This means we can short\n   * cut the _unique method at the cost of a single loop. A sorted array is used\n   * to easily check the values.\n   *\n   * @param  {array} src Source array\n   * @return {boolean} true if all unique, false otherwise\n   * @ignore\n   */\n\n\n  var _areAllUnique = function (src) {\n    if (src.length < 2) {\n      return true;\n    }\n\n    var sorted = src.slice().sort();\n    var last = sorted[0];\n\n    for (var i = 1, ien = sorted.length; i < ien; i++) {\n      if (sorted[i] === last) {\n        return false;\n      }\n\n      last = sorted[i];\n    }\n\n    return true;\n  };\n  /**\n   * Find the unique elements in a source array.\n   *\n   * @param  {array} src Source array\n   * @return {array} Array of unique items\n   * @ignore\n   */\n\n\n  var _unique = function (src) {\n    if (_areAllUnique(src)) {\n      return src.slice();\n    } // A faster unique method is to use object keys to identify used values,\n    // but this doesn't work with arrays or objects, which we must also\n    // consider. See jsperf.com/compare-array-unique-versions/4 for more\n    // information.\n\n\n    var out = [],\n        val,\n        i,\n        ien = src.length,\n        j,\n        k = 0;\n\n    again: for (i = 0; i < ien; i++) {\n      val = src[i];\n\n      for (j = 0; j < k; j++) {\n        if (out[j] === val) {\n          continue again;\n        }\n      }\n\n      out.push(val);\n      k++;\n    }\n\n    return out;\n  };\n  /**\n   * DataTables utility methods\n   * \n   * This namespace provides helper methods that DataTables uses internally to\n   * create a DataTable, but which are not exclusively used only for DataTables.\n   * These methods can be used by extension authors to save the duplication of\n   * code.\n   *\n   *  @namespace\n   */\n\n\n  DataTable.util = {\n    /**\n     * Throttle the calls to a function. Arguments and context are maintained\n     * for the throttled function.\n     *\n     * @param {function} fn Function to be called\n     * @param {integer} freq Call frequency in mS\n     * @return {function} Wrapped function\n     */\n    throttle: function (fn, freq) {\n      var frequency = freq !== undefined ? freq : 200,\n          last,\n          timer;\n      return function () {\n        var that = this,\n            now = +new Date(),\n            args = arguments;\n\n        if (last && now < last + frequency) {\n          clearTimeout(timer);\n          timer = setTimeout(function () {\n            last = undefined;\n            fn.apply(that, args);\n          }, frequency);\n        } else {\n          last = now;\n          fn.apply(that, args);\n        }\n      };\n    },\n\n    /**\n     * Escape a string such that it can be used in a regular expression\n     *\n     *  @param {string} val string to escape\n     *  @returns {string} escaped string\n     */\n    escapeRegex: function (val) {\n      return val.replace(_re_escape_regex, '\\\\$1');\n    }\n  };\n  /**\n   * Create a mapping object that allows camel case parameters to be looked up\n   * for their Hungarian counterparts. The mapping is stored in a private\n   * parameter called `_hungarianMap` which can be accessed on the source object.\n   *  @param {object} o\n   *  @memberof DataTable#oApi\n   */\n\n  function _fnHungarianMap(o) {\n    var hungarian = 'a aa ai ao as b fn i m o s ',\n        match,\n        newKey,\n        map = {};\n    $.each(o, function (key, val) {\n      match = key.match(/^([^A-Z]+?)([A-Z])/);\n\n      if (match && hungarian.indexOf(match[1] + ' ') !== -1) {\n        newKey = key.replace(match[0], match[2].toLowerCase());\n        map[newKey] = key;\n\n        if (match[1] === 'o') {\n          _fnHungarianMap(o[key]);\n        }\n      }\n    });\n    o._hungarianMap = map;\n  }\n  /**\n   * Convert from camel case parameters to Hungarian, based on a Hungarian map\n   * created by _fnHungarianMap.\n   *  @param {object} src The model object which holds all parameters that can be\n   *    mapped.\n   *  @param {object} user The object to convert from camel case to Hungarian.\n   *  @param {boolean} force When set to `true`, properties which already have a\n   *    Hungarian value in the `user` object will be overwritten. Otherwise they\n   *    won't be.\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnCamelToHungarian(src, user, force) {\n    if (!src._hungarianMap) {\n      _fnHungarianMap(src);\n    }\n\n    var hungarianKey;\n    $.each(user, function (key, val) {\n      hungarianKey = src._hungarianMap[key];\n\n      if (hungarianKey !== undefined && (force || user[hungarianKey] === undefined)) {\n        // For objects, we need to buzz down into the object to copy parameters\n        if (hungarianKey.charAt(0) === 'o') {\n          // Copy the camelCase options over to the hungarian\n          if (!user[hungarianKey]) {\n            user[hungarianKey] = {};\n          }\n\n          $.extend(true, user[hungarianKey], user[key]);\n\n          _fnCamelToHungarian(src[hungarianKey], user[hungarianKey], force);\n        } else {\n          user[hungarianKey] = user[key];\n        }\n      }\n    });\n  }\n  /**\n   * Language compatibility - when certain options are given, and others aren't, we\n   * need to duplicate the values over, in order to provide backwards compatibility\n   * with older language files.\n   *  @param {object} oSettings dataTables settings object\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnLanguageCompat(lang) {\n    // Note the use of the Hungarian notation for the parameters in this method as\n    // this is called after the mapping of camelCase to Hungarian\n    var defaults = DataTable.defaults.oLanguage; // Default mapping\n\n    var defaultDecimal = defaults.sDecimal;\n\n    if (defaultDecimal) {\n      _addNumericSort(defaultDecimal);\n    }\n\n    if (lang) {\n      var zeroRecords = lang.sZeroRecords; // Backwards compatibility - if there is no sEmptyTable given, then use the same as\n      // sZeroRecords - assuming that is given.\n\n      if (!lang.sEmptyTable && zeroRecords && defaults.sEmptyTable === \"No data available in table\") {\n        _fnMap(lang, lang, 'sZeroRecords', 'sEmptyTable');\n      } // Likewise with loading records\n\n\n      if (!lang.sLoadingRecords && zeroRecords && defaults.sLoadingRecords === \"Loading...\") {\n        _fnMap(lang, lang, 'sZeroRecords', 'sLoadingRecords');\n      } // Old parameter name of the thousands separator mapped onto the new\n\n\n      if (lang.sInfoThousands) {\n        lang.sThousands = lang.sInfoThousands;\n      }\n\n      var decimal = lang.sDecimal;\n\n      if (decimal && defaultDecimal !== decimal) {\n        _addNumericSort(decimal);\n      }\n    }\n  }\n  /**\n   * Map one parameter onto another\n   *  @param {object} o Object to map\n   *  @param {*} knew The new parameter name\n   *  @param {*} old The old parameter name\n   */\n\n\n  var _fnCompatMap = function (o, knew, old) {\n    if (o[knew] !== undefined) {\n      o[old] = o[knew];\n    }\n  };\n  /**\n   * Provide backwards compatibility for the main DT options. Note that the new\n   * options are mapped onto the old parameters, so this is an external interface\n   * change only.\n   *  @param {object} init Object to map\n   */\n\n\n  function _fnCompatOpts(init) {\n    _fnCompatMap(init, 'ordering', 'bSort');\n\n    _fnCompatMap(init, 'orderMulti', 'bSortMulti');\n\n    _fnCompatMap(init, 'orderClasses', 'bSortClasses');\n\n    _fnCompatMap(init, 'orderCellsTop', 'bSortCellsTop');\n\n    _fnCompatMap(init, 'order', 'aaSorting');\n\n    _fnCompatMap(init, 'orderFixed', 'aaSortingFixed');\n\n    _fnCompatMap(init, 'paging', 'bPaginate');\n\n    _fnCompatMap(init, 'pagingType', 'sPaginationType');\n\n    _fnCompatMap(init, 'pageLength', 'iDisplayLength');\n\n    _fnCompatMap(init, 'searching', 'bFilter'); // Boolean initialisation of x-scrolling\n\n\n    if (typeof init.sScrollX === 'boolean') {\n      init.sScrollX = init.sScrollX ? '100%' : '';\n    }\n\n    if (typeof init.scrollX === 'boolean') {\n      init.scrollX = init.scrollX ? '100%' : '';\n    } // Column search objects are in an array, so it needs to be converted\n    // element by element\n\n\n    var searchCols = init.aoSearchCols;\n\n    if (searchCols) {\n      for (var i = 0, ien = searchCols.length; i < ien; i++) {\n        if (searchCols[i]) {\n          _fnCamelToHungarian(DataTable.models.oSearch, searchCols[i]);\n        }\n      }\n    }\n  }\n  /**\n   * Provide backwards compatibility for column options. Note that the new options\n   * are mapped onto the old parameters, so this is an external interface change\n   * only.\n   *  @param {object} init Object to map\n   */\n\n\n  function _fnCompatCols(init) {\n    _fnCompatMap(init, 'orderable', 'bSortable');\n\n    _fnCompatMap(init, 'orderData', 'aDataSort');\n\n    _fnCompatMap(init, 'orderSequence', 'asSorting');\n\n    _fnCompatMap(init, 'orderDataType', 'sortDataType'); // orderData can be given as an integer\n\n\n    var dataSort = init.aDataSort;\n\n    if (typeof dataSort === 'number' && !$.isArray(dataSort)) {\n      init.aDataSort = [dataSort];\n    }\n  }\n  /**\n   * Browser feature detection for capabilities, quirks\n   *  @param {object} settings dataTables settings object\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnBrowserDetect(settings) {\n    // We don't need to do this every time DataTables is constructed, the values\n    // calculated are specific to the browser and OS configuration which we\n    // don't expect to change between initialisations\n    if (!DataTable.__browser) {\n      var browser = {};\n      DataTable.__browser = browser; // Scrolling feature / quirks detection\n\n      var n = $('<div/>').css({\n        position: 'fixed',\n        top: 0,\n        left: $(window).scrollLeft() * -1,\n        // allow for scrolling\n        height: 1,\n        width: 1,\n        overflow: 'hidden'\n      }).append($('<div/>').css({\n        position: 'absolute',\n        top: 1,\n        left: 1,\n        width: 100,\n        overflow: 'scroll'\n      }).append($('<div/>').css({\n        width: '100%',\n        height: 10\n      }))).appendTo('body');\n      var outer = n.children();\n      var inner = outer.children(); // Numbers below, in order, are:\n      // inner.offsetWidth, inner.clientWidth, outer.offsetWidth, outer.clientWidth\n      //\n      // IE6 XP:                           100 100 100  83\n      // IE7 Vista:                        100 100 100  83\n      // IE 8+ Windows:                     83  83 100  83\n      // Evergreen Windows:                 83  83 100  83\n      // Evergreen Mac with scrollbars:     85  85 100  85\n      // Evergreen Mac without scrollbars: 100 100 100 100\n      // Get scrollbar width\n\n      browser.barWidth = outer[0].offsetWidth - outer[0].clientWidth; // IE6/7 will oversize a width 100% element inside a scrolling element, to\n      // include the width of the scrollbar, while other browsers ensure the inner\n      // element is contained without forcing scrolling\n\n      browser.bScrollOversize = inner[0].offsetWidth === 100 && outer[0].clientWidth !== 100; // In rtl text layout, some browsers (most, but not all) will place the\n      // scrollbar on the left, rather than the right.\n\n      browser.bScrollbarLeft = Math.round(inner.offset().left) !== 1; // IE8- don't provide height and width for getBoundingClientRect\n\n      browser.bBounding = n[0].getBoundingClientRect().width ? true : false;\n      n.remove();\n    }\n\n    $.extend(settings.oBrowser, DataTable.__browser);\n    settings.oScroll.iBarWidth = DataTable.__browser.barWidth;\n  }\n  /**\n   * Array.prototype reduce[Right] method, used for browsers which don't support\n   * JS 1.6. Done this way to reduce code size, since we iterate either way\n   *  @param {object} settings dataTables settings object\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnReduce(that, fn, init, start, end, inc) {\n    var i = start,\n        value,\n        isSet = false;\n\n    if (init !== undefined) {\n      value = init;\n      isSet = true;\n    }\n\n    while (i !== end) {\n      if (!that.hasOwnProperty(i)) {\n        continue;\n      }\n\n      value = isSet ? fn(value, that[i], i, that) : that[i];\n      isSet = true;\n      i += inc;\n    }\n\n    return value;\n  }\n  /**\n   * Add a column to the list used for the table with default values\n   *  @param {object} oSettings dataTables settings object\n   *  @param {node} nTh The th element for this column\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnAddColumn(oSettings, nTh) {\n    // Add column to aoColumns array\n    var oDefaults = DataTable.defaults.column;\n    var iCol = oSettings.aoColumns.length;\n    var oCol = $.extend({}, DataTable.models.oColumn, oDefaults, {\n      \"nTh\": nTh ? nTh : document.createElement('th'),\n      \"sTitle\": oDefaults.sTitle ? oDefaults.sTitle : nTh ? nTh.innerHTML : '',\n      \"aDataSort\": oDefaults.aDataSort ? oDefaults.aDataSort : [iCol],\n      \"mData\": oDefaults.mData ? oDefaults.mData : iCol,\n      idx: iCol\n    });\n    oSettings.aoColumns.push(oCol); // Add search object for column specific search. Note that the `searchCols[ iCol ]`\n    // passed into extend can be undefined. This allows the user to give a default\n    // with only some of the parameters defined, and also not give a default\n\n    var searchCols = oSettings.aoPreSearchCols;\n    searchCols[iCol] = $.extend({}, DataTable.models.oSearch, searchCols[iCol]); // Use the default column options function to initialise classes etc\n\n    _fnColumnOptions(oSettings, iCol, $(nTh).data());\n  }\n  /**\n   * Apply options for a column\n   *  @param {object} oSettings dataTables settings object\n   *  @param {int} iCol column index to consider\n   *  @param {object} oOptions object with sType, bVisible and bSearchable etc\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnColumnOptions(oSettings, iCol, oOptions) {\n    var oCol = oSettings.aoColumns[iCol];\n    var oClasses = oSettings.oClasses;\n    var th = $(oCol.nTh); // Try to get width information from the DOM. We can't get it from CSS\n    // as we'd need to parse the CSS stylesheet. `width` option can override\n\n    if (!oCol.sWidthOrig) {\n      // Width attribute\n      oCol.sWidthOrig = th.attr('width') || null; // Style attribute\n\n      var t = (th.attr('style') || '').match(/width:\\s*(\\d+[pxem%]+)/);\n\n      if (t) {\n        oCol.sWidthOrig = t[1];\n      }\n    }\n    /* User specified column options */\n\n\n    if (oOptions !== undefined && oOptions !== null) {\n      // Backwards compatibility\n      _fnCompatCols(oOptions); // Map camel case parameters to their Hungarian counterparts\n\n\n      _fnCamelToHungarian(DataTable.defaults.column, oOptions, true);\n      /* Backwards compatibility for mDataProp */\n\n\n      if (oOptions.mDataProp !== undefined && !oOptions.mData) {\n        oOptions.mData = oOptions.mDataProp;\n      }\n\n      if (oOptions.sType) {\n        oCol._sManualType = oOptions.sType;\n      } // `class` is a reserved word in Javascript, so we need to provide\n      // the ability to use a valid name for the camel case input\n\n\n      if (oOptions.className && !oOptions.sClass) {\n        oOptions.sClass = oOptions.className;\n      }\n\n      if (oOptions.sClass) {\n        th.addClass(oOptions.sClass);\n      }\n\n      $.extend(oCol, oOptions);\n\n      _fnMap(oCol, oOptions, \"sWidth\", \"sWidthOrig\");\n      /* iDataSort to be applied (backwards compatibility), but aDataSort will take\n       * priority if defined\n       */\n\n\n      if (oOptions.iDataSort !== undefined) {\n        oCol.aDataSort = [oOptions.iDataSort];\n      }\n\n      _fnMap(oCol, oOptions, \"aDataSort\");\n    }\n    /* Cache the data get and set functions for speed */\n\n\n    var mDataSrc = oCol.mData;\n\n    var mData = _fnGetObjectDataFn(mDataSrc);\n\n    var mRender = oCol.mRender ? _fnGetObjectDataFn(oCol.mRender) : null;\n\n    var attrTest = function (src) {\n      return typeof src === 'string' && src.indexOf('@') !== -1;\n    };\n\n    oCol._bAttrSrc = $.isPlainObject(mDataSrc) && (attrTest(mDataSrc.sort) || attrTest(mDataSrc.type) || attrTest(mDataSrc.filter));\n    oCol._setter = null;\n\n    oCol.fnGetData = function (rowData, type, meta) {\n      var innerData = mData(rowData, type, undefined, meta);\n      return mRender && type ? mRender(innerData, type, rowData, meta) : innerData;\n    };\n\n    oCol.fnSetData = function (rowData, val, meta) {\n      return _fnSetObjectDataFn(mDataSrc)(rowData, val, meta);\n    }; // Indicate if DataTables should read DOM data as an object or array\n    // Used in _fnGetRowElements\n\n\n    if (typeof mDataSrc !== 'number') {\n      oSettings._rowReadObject = true;\n    }\n    /* Feature sorting overrides column specific when off */\n\n\n    if (!oSettings.oFeatures.bSort) {\n      oCol.bSortable = false;\n      th.addClass(oClasses.sSortableNone); // Have to add class here as order event isn't called\n    }\n    /* Check that the class assignment is correct for sorting */\n\n\n    var bAsc = $.inArray('asc', oCol.asSorting) !== -1;\n    var bDesc = $.inArray('desc', oCol.asSorting) !== -1;\n\n    if (!oCol.bSortable || !bAsc && !bDesc) {\n      oCol.sSortingClass = oClasses.sSortableNone;\n      oCol.sSortingClassJUI = \"\";\n    } else if (bAsc && !bDesc) {\n      oCol.sSortingClass = oClasses.sSortableAsc;\n      oCol.sSortingClassJUI = oClasses.sSortJUIAscAllowed;\n    } else if (!bAsc && bDesc) {\n      oCol.sSortingClass = oClasses.sSortableDesc;\n      oCol.sSortingClassJUI = oClasses.sSortJUIDescAllowed;\n    } else {\n      oCol.sSortingClass = oClasses.sSortable;\n      oCol.sSortingClassJUI = oClasses.sSortJUI;\n    }\n  }\n  /**\n   * Adjust the table column widths for new data. Note: you would probably want to\n   * do a redraw after calling this function!\n   *  @param {object} settings dataTables settings object\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnAdjustColumnSizing(settings) {\n    /* Not interested in doing column width calculation if auto-width is disabled */\n    if (settings.oFeatures.bAutoWidth !== false) {\n      var columns = settings.aoColumns;\n\n      _fnCalculateColumnWidths(settings);\n\n      for (var i = 0, iLen = columns.length; i < iLen; i++) {\n        columns[i].nTh.style.width = columns[i].sWidth;\n      }\n    }\n\n    var scroll = settings.oScroll;\n\n    if (scroll.sY !== '' || scroll.sX !== '') {\n      _fnScrollDraw(settings);\n    }\n\n    _fnCallbackFire(settings, null, 'column-sizing', [settings]);\n  }\n  /**\n   * Covert the index of a visible column to the index in the data array (take account\n   * of hidden columns)\n   *  @param {object} oSettings dataTables settings object\n   *  @param {int} iMatch Visible column index to lookup\n   *  @returns {int} i the data index\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnVisibleToColumnIndex(oSettings, iMatch) {\n    var aiVis = _fnGetColumns(oSettings, 'bVisible');\n\n    return typeof aiVis[iMatch] === 'number' ? aiVis[iMatch] : null;\n  }\n  /**\n   * Covert the index of an index in the data array and convert it to the visible\n   *   column index (take account of hidden columns)\n   *  @param {int} iMatch Column index to lookup\n   *  @param {object} oSettings dataTables settings object\n   *  @returns {int} i the data index\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnColumnIndexToVisible(oSettings, iMatch) {\n    var aiVis = _fnGetColumns(oSettings, 'bVisible');\n\n    var iPos = $.inArray(iMatch, aiVis);\n    return iPos !== -1 ? iPos : null;\n  }\n  /**\n   * Get the number of visible columns\n   *  @param {object} oSettings dataTables settings object\n   *  @returns {int} i the number of visible columns\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnVisbleColumns(oSettings) {\n    var vis = 0; // No reduce in IE8, use a loop for now\n\n    $.each(oSettings.aoColumns, function (i, col) {\n      if (col.bVisible && $(col.nTh).css('display') !== 'none') {\n        vis++;\n      }\n    });\n    return vis;\n  }\n  /**\n   * Get an array of column indexes that match a given property\n   *  @param {object} oSettings dataTables settings object\n   *  @param {string} sParam Parameter in aoColumns to look for - typically\n   *    bVisible or bSearchable\n   *  @returns {array} Array of indexes with matched properties\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnGetColumns(oSettings, sParam) {\n    var a = [];\n    $.map(oSettings.aoColumns, function (val, i) {\n      if (val[sParam]) {\n        a.push(i);\n      }\n    });\n    return a;\n  }\n  /**\n   * Calculate the 'type' of a column\n   *  @param {object} settings dataTables settings object\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnColumnTypes(settings) {\n    var columns = settings.aoColumns;\n    var data = settings.aoData;\n    var types = DataTable.ext.type.detect;\n    var i, ien, j, jen, k, ken;\n    var col, cell, detectedType, cache; // For each column, spin over the \n\n    for (i = 0, ien = columns.length; i < ien; i++) {\n      col = columns[i];\n      cache = [];\n\n      if (!col.sType && col._sManualType) {\n        col.sType = col._sManualType;\n      } else if (!col.sType) {\n        for (j = 0, jen = types.length; j < jen; j++) {\n          for (k = 0, ken = data.length; k < ken; k++) {\n            // Use a cache array so we only need to get the type data\n            // from the formatter once (when using multiple detectors)\n            if (cache[k] === undefined) {\n              cache[k] = _fnGetCellData(settings, k, i, 'type');\n            }\n\n            detectedType = types[j](cache[k], settings); // If null, then this type can't apply to this column, so\n            // rather than testing all cells, break out. There is an\n            // exception for the last type which is `html`. We need to\n            // scan all rows since it is possible to mix string and HTML\n            // types\n\n            if (!detectedType && j !== types.length - 1) {\n              break;\n            } // Only a single match is needed for html type since it is\n            // bottom of the pile and very similar to string\n\n\n            if (detectedType === 'html') {\n              break;\n            }\n          } // Type is valid for all data points in the column - use this\n          // type\n\n\n          if (detectedType) {\n            col.sType = detectedType;\n            break;\n          }\n        } // Fall back - if no type was detected, always use string\n\n\n        if (!col.sType) {\n          col.sType = 'string';\n        }\n      }\n    }\n  }\n  /**\n   * Take the column definitions and static columns arrays and calculate how\n   * they relate to column indexes. The callback function will then apply the\n   * definition found for a column to a suitable configuration object.\n   *  @param {object} oSettings dataTables settings object\n   *  @param {array} aoColDefs The aoColumnDefs array that is to be applied\n   *  @param {array} aoCols The aoColumns array that defines columns individually\n   *  @param {function} fn Callback function - takes two parameters, the calculated\n   *    column index and the definition for that column.\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnApplyColumnDefs(oSettings, aoColDefs, aoCols, fn) {\n    var i, iLen, j, jLen, k, kLen, def;\n    var columns = oSettings.aoColumns; // Column definitions with aTargets\n\n    if (aoColDefs) {\n      /* Loop over the definitions array - loop in reverse so first instance has priority */\n      for (i = aoColDefs.length - 1; i >= 0; i--) {\n        def = aoColDefs[i];\n        /* Each definition can target multiple columns, as it is an array */\n\n        var aTargets = def.targets !== undefined ? def.targets : def.aTargets;\n\n        if (!$.isArray(aTargets)) {\n          aTargets = [aTargets];\n        }\n\n        for (j = 0, jLen = aTargets.length; j < jLen; j++) {\n          if (typeof aTargets[j] === 'number' && aTargets[j] >= 0) {\n            /* Add columns that we don't yet know about */\n            while (columns.length <= aTargets[j]) {\n              _fnAddColumn(oSettings);\n            }\n            /* Integer, basic index */\n\n\n            fn(aTargets[j], def);\n          } else if (typeof aTargets[j] === 'number' && aTargets[j] < 0) {\n            /* Negative integer, right to left column counting */\n            fn(columns.length + aTargets[j], def);\n          } else if (typeof aTargets[j] === 'string') {\n            /* Class name matching on TH element */\n            for (k = 0, kLen = columns.length; k < kLen; k++) {\n              if (aTargets[j] == \"_all\" || $(columns[k].nTh).hasClass(aTargets[j])) {\n                fn(k, def);\n              }\n            }\n          }\n        }\n      }\n    } // Statically defined columns array\n\n\n    if (aoCols) {\n      for (i = 0, iLen = aoCols.length; i < iLen; i++) {\n        fn(i, aoCols[i]);\n      }\n    }\n  }\n  /**\n   * Add a data array to the table, creating DOM node etc. This is the parallel to\n   * _fnGatherData, but for adding rows from a Javascript source, rather than a\n   * DOM source.\n   *  @param {object} oSettings dataTables settings object\n   *  @param {array} aData data array to be added\n   *  @param {node} [nTr] TR element to add to the table - optional. If not given,\n   *    DataTables will create a row automatically\n   *  @param {array} [anTds] Array of TD|TH elements for the row - must be given\n   *    if nTr is.\n   *  @returns {int} >=0 if successful (index of new aoData entry), -1 if failed\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnAddData(oSettings, aDataIn, nTr, anTds) {\n    /* Create the object for storing information about this new row */\n    var iRow = oSettings.aoData.length;\n    var oData = $.extend(true, {}, DataTable.models.oRow, {\n      src: nTr ? 'dom' : 'data',\n      idx: iRow\n    });\n    oData._aData = aDataIn;\n    oSettings.aoData.push(oData);\n    /* Create the cells */\n\n    var nTd, sThisType;\n    var columns = oSettings.aoColumns; // Invalidate the column types as the new data needs to be revalidated\n\n    for (var i = 0, iLen = columns.length; i < iLen; i++) {\n      columns[i].sType = null;\n    }\n    /* Add to the display array */\n\n\n    oSettings.aiDisplayMaster.push(iRow);\n    var id = oSettings.rowIdFn(aDataIn);\n\n    if (id !== undefined) {\n      oSettings.aIds[id] = oData;\n    }\n    /* Create the DOM information, or register it if already present */\n\n\n    if (nTr || !oSettings.oFeatures.bDeferRender) {\n      _fnCreateTr(oSettings, iRow, nTr, anTds);\n    }\n\n    return iRow;\n  }\n  /**\n   * Add one or more TR elements to the table. Generally we'd expect to\n   * use this for reading data from a DOM sourced table, but it could be\n   * used for an TR element. Note that if a TR is given, it is used (i.e.\n   * it is not cloned).\n   *  @param {object} settings dataTables settings object\n   *  @param {array|node|jQuery} trs The TR element(s) to add to the table\n   *  @returns {array} Array of indexes for the added rows\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnAddTr(settings, trs) {\n    var row; // Allow an individual node to be passed in\n\n    if (!(trs instanceof $)) {\n      trs = $(trs);\n    }\n\n    return trs.map(function (i, el) {\n      row = _fnGetRowElements(settings, el);\n      return _fnAddData(settings, row.data, el, row.cells);\n    });\n  }\n  /**\n   * Take a TR element and convert it to an index in aoData\n   *  @param {object} oSettings dataTables settings object\n   *  @param {node} n the TR element to find\n   *  @returns {int} index if the node is found, null if not\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnNodeToDataIndex(oSettings, n) {\n    return n._DT_RowIndex !== undefined ? n._DT_RowIndex : null;\n  }\n  /**\n   * Take a TD element and convert it into a column data index (not the visible index)\n   *  @param {object} oSettings dataTables settings object\n   *  @param {int} iRow The row number the TD/TH can be found in\n   *  @param {node} n The TD/TH element to find\n   *  @returns {int} index if the node is found, -1 if not\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnNodeToColumnIndex(oSettings, iRow, n) {\n    return $.inArray(n, oSettings.aoData[iRow].anCells);\n  }\n  /**\n   * Get the data for a given cell from the internal cache, taking into account data mapping\n   *  @param {object} settings dataTables settings object\n   *  @param {int} rowIdx aoData row id\n   *  @param {int} colIdx Column index\n   *  @param {string} type data get type ('display', 'type' 'filter' 'sort')\n   *  @returns {*} Cell data\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnGetCellData(settings, rowIdx, colIdx, type) {\n    var draw = settings.iDraw;\n    var col = settings.aoColumns[colIdx];\n    var rowData = settings.aoData[rowIdx]._aData;\n    var defaultContent = col.sDefaultContent;\n    var cellData = col.fnGetData(rowData, type, {\n      settings: settings,\n      row: rowIdx,\n      col: colIdx\n    });\n\n    if (cellData === undefined) {\n      if (settings.iDrawError != draw && defaultContent === null) {\n        _fnLog(settings, 0, \"Requested unknown parameter \" + (typeof col.mData == 'function' ? '{function}' : \"'\" + col.mData + \"'\") + \" for row \" + rowIdx + \", column \" + colIdx, 4);\n\n        settings.iDrawError = draw;\n      }\n\n      return defaultContent;\n    } // When the data source is null and a specific data type is requested (i.e.\n    // not the original data), we can use default column data\n\n\n    if ((cellData === rowData || cellData === null) && defaultContent !== null && type !== undefined) {\n      cellData = defaultContent;\n    } else if (typeof cellData === 'function') {\n      // If the data source is a function, then we run it and use the return,\n      // executing in the scope of the data object (for instances)\n      return cellData.call(rowData);\n    }\n\n    if (cellData === null && type == 'display') {\n      return '';\n    }\n\n    return cellData;\n  }\n  /**\n   * Set the value for a specific cell, into the internal data cache\n   *  @param {object} settings dataTables settings object\n   *  @param {int} rowIdx aoData row id\n   *  @param {int} colIdx Column index\n   *  @param {*} val Value to set\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnSetCellData(settings, rowIdx, colIdx, val) {\n    var col = settings.aoColumns[colIdx];\n    var rowData = settings.aoData[rowIdx]._aData;\n    col.fnSetData(rowData, val, {\n      settings: settings,\n      row: rowIdx,\n      col: colIdx\n    });\n  } // Private variable that is used to match action syntax in the data property object\n\n\n  var __reArray = /\\[.*?\\]$/;\n  var __reFn = /\\(\\)$/;\n  /**\n   * Split string on periods, taking into account escaped periods\n   * @param  {string} str String to split\n   * @return {array} Split string\n   */\n\n  function _fnSplitObjNotation(str) {\n    return $.map(str.match(/(\\\\.|[^\\.])+/g) || [''], function (s) {\n      return s.replace(/\\\\\\./g, '.');\n    });\n  }\n  /**\n   * Return a function that can be used to get data from a source object, taking\n   * into account the ability to use nested objects as a source\n   *  @param {string|int|function} mSource The data source for the object\n   *  @returns {function} Data get function\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnGetObjectDataFn(mSource) {\n    if ($.isPlainObject(mSource)) {\n      /* Build an object of get functions, and wrap them in a single call */\n      var o = {};\n      $.each(mSource, function (key, val) {\n        if (val) {\n          o[key] = _fnGetObjectDataFn(val);\n        }\n      });\n      return function (data, type, row, meta) {\n        var t = o[type] || o._;\n        return t !== undefined ? t(data, type, row, meta) : data;\n      };\n    } else if (mSource === null) {\n      /* Give an empty string for rendering / sorting etc */\n      return function (data) {\n        // type, row and meta also passed, but not used\n        return data;\n      };\n    } else if (typeof mSource === 'function') {\n      return function (data, type, row, meta) {\n        return mSource(data, type, row, meta);\n      };\n    } else if (typeof mSource === 'string' && (mSource.indexOf('.') !== -1 || mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1)) {\n      /* If there is a . in the source string then the data source is in a\n       * nested object so we loop over the data for each level to get the next\n       * level down. On each loop we test for undefined, and if found immediately\n       * return. This allows entire objects to be missing and sDefaultContent to\n       * be used if defined, rather than throwing an error\n       */\n      var fetchData = function (data, type, src) {\n        var arrayNotation, funcNotation, out, innerSrc;\n\n        if (src !== \"\") {\n          var a = _fnSplitObjNotation(src);\n\n          for (var i = 0, iLen = a.length; i < iLen; i++) {\n            // Check if we are dealing with special notation\n            arrayNotation = a[i].match(__reArray);\n            funcNotation = a[i].match(__reFn);\n\n            if (arrayNotation) {\n              // Array notation\n              a[i] = a[i].replace(__reArray, ''); // Condition allows simply [] to be passed in\n\n              if (a[i] !== \"\") {\n                data = data[a[i]];\n              }\n\n              out = []; // Get the remainder of the nested object to get\n\n              a.splice(0, i + 1);\n              innerSrc = a.join('.'); // Traverse each entry in the array getting the properties requested\n\n              if ($.isArray(data)) {\n                for (var j = 0, jLen = data.length; j < jLen; j++) {\n                  out.push(fetchData(data[j], type, innerSrc));\n                }\n              } // If a string is given in between the array notation indicators, that\n              // is used to join the strings together, otherwise an array is returned\n\n\n              var join = arrayNotation[0].substring(1, arrayNotation[0].length - 1);\n              data = join === \"\" ? out : out.join(join); // The inner call to fetchData has already traversed through the remainder\n              // of the source requested, so we exit from the loop\n\n              break;\n            } else if (funcNotation) {\n              // Function call\n              a[i] = a[i].replace(__reFn, '');\n              data = data[a[i]]();\n              continue;\n            }\n\n            if (data === null || data[a[i]] === undefined) {\n              return undefined;\n            }\n\n            data = data[a[i]];\n          }\n        }\n\n        return data;\n      };\n\n      return function (data, type) {\n        // row and meta also passed, but not used\n        return fetchData(data, type, mSource);\n      };\n    } else {\n      /* Array or flat object mapping */\n      return function (data, type) {\n        // row and meta also passed, but not used\n        return data[mSource];\n      };\n    }\n  }\n  /**\n   * Return a function that can be used to set data from a source object, taking\n   * into account the ability to use nested objects as a source\n   *  @param {string|int|function} mSource The data source for the object\n   *  @returns {function} Data set function\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnSetObjectDataFn(mSource) {\n    if ($.isPlainObject(mSource)) {\n      /* Unlike get, only the underscore (global) option is used for for\n       * setting data since we don't know the type here. This is why an object\n       * option is not documented for `mData` (which is read/write), but it is\n       * for `mRender` which is read only.\n       */\n      return _fnSetObjectDataFn(mSource._);\n    } else if (mSource === null) {\n      /* Nothing to do when the data source is null */\n      return function () {};\n    } else if (typeof mSource === 'function') {\n      return function (data, val, meta) {\n        mSource(data, 'set', val, meta);\n      };\n    } else if (typeof mSource === 'string' && (mSource.indexOf('.') !== -1 || mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1)) {\n      /* Like the get, we need to get data from a nested object */\n      var setData = function (data, val, src) {\n        var a = _fnSplitObjNotation(src),\n            b;\n\n        var aLast = a[a.length - 1];\n        var arrayNotation, funcNotation, o, innerSrc;\n\n        for (var i = 0, iLen = a.length - 1; i < iLen; i++) {\n          // Check if we are dealing with an array notation request\n          arrayNotation = a[i].match(__reArray);\n          funcNotation = a[i].match(__reFn);\n\n          if (arrayNotation) {\n            a[i] = a[i].replace(__reArray, '');\n            data[a[i]] = []; // Get the remainder of the nested object to set so we can recurse\n\n            b = a.slice();\n            b.splice(0, i + 1);\n            innerSrc = b.join('.'); // Traverse each entry in the array setting the properties requested\n\n            if ($.isArray(val)) {\n              for (var j = 0, jLen = val.length; j < jLen; j++) {\n                o = {};\n                setData(o, val[j], innerSrc);\n                data[a[i]].push(o);\n              }\n            } else {\n              // We've been asked to save data to an array, but it\n              // isn't array data to be saved. Best that can be done\n              // is to just save the value.\n              data[a[i]] = val;\n            } // The inner call to setData has already traversed through the remainder\n            // of the source and has set the data, thus we can exit here\n\n\n            return;\n          } else if (funcNotation) {\n            // Function call\n            a[i] = a[i].replace(__reFn, '');\n            data = data[a[i]](val);\n          } // If the nested object doesn't currently exist - since we are\n          // trying to set the value - create it\n\n\n          if (data[a[i]] === null || data[a[i]] === undefined) {\n            data[a[i]] = {};\n          }\n\n          data = data[a[i]];\n        } // Last item in the input - i.e, the actual set\n\n\n        if (aLast.match(__reFn)) {\n          // Function call\n          data = data[aLast.replace(__reFn, '')](val);\n        } else {\n          // If array notation is used, we just want to strip it and use the property name\n          // and assign the value. If it isn't used, then we get the result we want anyway\n          data[aLast.replace(__reArray, '')] = val;\n        }\n      };\n\n      return function (data, val) {\n        // meta is also passed in, but not used\n        return setData(data, val, mSource);\n      };\n    } else {\n      /* Array or flat object mapping */\n      return function (data, val) {\n        // meta is also passed in, but not used\n        data[mSource] = val;\n      };\n    }\n  }\n  /**\n   * Return an array with the full table data\n   *  @param {object} oSettings dataTables settings object\n   *  @returns array {array} aData Master data array\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnGetDataMaster(settings) {\n    return _pluck(settings.aoData, '_aData');\n  }\n  /**\n   * Nuke the table\n   *  @param {object} oSettings dataTables settings object\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnClearTable(settings) {\n    settings.aoData.length = 0;\n    settings.aiDisplayMaster.length = 0;\n    settings.aiDisplay.length = 0;\n    settings.aIds = {};\n  }\n  /**\n  * Take an array of integers (index array) and remove a target integer (value - not\n  * the key!)\n  *  @param {array} a Index array to target\n  *  @param {int} iTarget value to find\n  *  @memberof DataTable#oApi\n  */\n\n\n  function _fnDeleteIndex(a, iTarget, splice) {\n    var iTargetIndex = -1;\n\n    for (var i = 0, iLen = a.length; i < iLen; i++) {\n      if (a[i] == iTarget) {\n        iTargetIndex = i;\n      } else if (a[i] > iTarget) {\n        a[i]--;\n      }\n    }\n\n    if (iTargetIndex != -1 && splice === undefined) {\n      a.splice(iTargetIndex, 1);\n    }\n  }\n  /**\n   * Mark cached data as invalid such that a re-read of the data will occur when\n   * the cached data is next requested. Also update from the data source object.\n   *\n   * @param {object} settings DataTables settings object\n   * @param {int}    rowIdx   Row index to invalidate\n   * @param {string} [src]    Source to invalidate from: undefined, 'auto', 'dom'\n   *     or 'data'\n   * @param {int}    [colIdx] Column index to invalidate. If undefined the whole\n   *     row will be invalidated\n   * @memberof DataTable#oApi\n   *\n   * @todo For the modularisation of v1.11 this will need to become a callback, so\n   *   the sort and filter methods can subscribe to it. That will required\n   *   initialisation options for sorting, which is why it is not already baked in\n   */\n\n\n  function _fnInvalidate(settings, rowIdx, src, colIdx) {\n    var row = settings.aoData[rowIdx];\n    var i, ien;\n\n    var cellWrite = function (cell, col) {\n      // This is very frustrating, but in IE if you just write directly\n      // to innerHTML, and elements that are overwritten are GC'ed,\n      // even if there is a reference to them elsewhere\n      while (cell.childNodes.length) {\n        cell.removeChild(cell.firstChild);\n      }\n\n      cell.innerHTML = _fnGetCellData(settings, rowIdx, col, 'display');\n    }; // Are we reading last data from DOM or the data object?\n\n\n    if (src === 'dom' || (!src || src === 'auto') && row.src === 'dom') {\n      // Read the data from the DOM\n      row._aData = _fnGetRowElements(settings, row, colIdx, colIdx === undefined ? undefined : row._aData).data;\n    } else {\n      // Reading from data object, update the DOM\n      var cells = row.anCells;\n\n      if (cells) {\n        if (colIdx !== undefined) {\n          cellWrite(cells[colIdx], colIdx);\n        } else {\n          for (i = 0, ien = cells.length; i < ien; i++) {\n            cellWrite(cells[i], i);\n          }\n        }\n      }\n    } // For both row and cell invalidation, the cached data for sorting and\n    // filtering is nulled out\n\n\n    row._aSortData = null;\n    row._aFilterData = null; // Invalidate the type for a specific column (if given) or all columns since\n    // the data might have changed\n\n    var cols = settings.aoColumns;\n\n    if (colIdx !== undefined) {\n      cols[colIdx].sType = null;\n    } else {\n      for (i = 0, ien = cols.length; i < ien; i++) {\n        cols[i].sType = null;\n      } // Update DataTables special `DT_*` attributes for the row\n\n\n      _fnRowAttributes(settings, row);\n    }\n  }\n  /**\n   * Build a data source object from an HTML row, reading the contents of the\n   * cells that are in the row.\n   *\n   * @param {object} settings DataTables settings object\n   * @param {node|object} TR element from which to read data or existing row\n   *   object from which to re-read the data from the cells\n   * @param {int} [colIdx] Optional column index\n   * @param {array|object} [d] Data source object. If `colIdx` is given then this\n   *   parameter should also be given and will be used to write the data into.\n   *   Only the column in question will be written\n   * @returns {object} Object with two parameters: `data` the data read, in\n   *   document order, and `cells` and array of nodes (they can be useful to the\n   *   caller, so rather than needing a second traversal to get them, just return\n   *   them from here).\n   * @memberof DataTable#oApi\n   */\n\n\n  function _fnGetRowElements(settings, row, colIdx, d) {\n    var tds = [],\n        td = row.firstChild,\n        name,\n        col,\n        o,\n        i = 0,\n        contents,\n        columns = settings.aoColumns,\n        objectRead = settings._rowReadObject; // Allow the data object to be passed in, or construct\n\n    d = d !== undefined ? d : objectRead ? {} : [];\n\n    var attr = function (str, td) {\n      if (typeof str === 'string') {\n        var idx = str.indexOf('@');\n\n        if (idx !== -1) {\n          var attr = str.substring(idx + 1);\n\n          var setter = _fnSetObjectDataFn(str);\n\n          setter(d, td.getAttribute(attr));\n        }\n      }\n    }; // Read data from a cell and store into the data object\n\n\n    var cellProcess = function (cell) {\n      if (colIdx === undefined || colIdx === i) {\n        col = columns[i];\n        contents = $.trim(cell.innerHTML);\n\n        if (col && col._bAttrSrc) {\n          var setter = _fnSetObjectDataFn(col.mData._);\n\n          setter(d, contents);\n          attr(col.mData.sort, cell);\n          attr(col.mData.type, cell);\n          attr(col.mData.filter, cell);\n        } else {\n          // Depending on the `data` option for the columns the data can\n          // be read to either an object or an array.\n          if (objectRead) {\n            if (!col._setter) {\n              // Cache the setter function\n              col._setter = _fnSetObjectDataFn(col.mData);\n            }\n\n            col._setter(d, contents);\n          } else {\n            d[i] = contents;\n          }\n        }\n      }\n\n      i++;\n    };\n\n    if (td) {\n      // `tr` element was passed in\n      while (td) {\n        name = td.nodeName.toUpperCase();\n\n        if (name == \"TD\" || name == \"TH\") {\n          cellProcess(td);\n          tds.push(td);\n        }\n\n        td = td.nextSibling;\n      }\n    } else {\n      // Existing row object passed in\n      tds = row.anCells;\n\n      for (var j = 0, jen = tds.length; j < jen; j++) {\n        cellProcess(tds[j]);\n      }\n    } // Read the ID from the DOM if present\n\n\n    var rowNode = row.firstChild ? row : row.nTr;\n\n    if (rowNode) {\n      var id = rowNode.getAttribute('id');\n\n      if (id) {\n        _fnSetObjectDataFn(settings.rowId)(d, id);\n      }\n    }\n\n    return {\n      data: d,\n      cells: tds\n    };\n  }\n  /**\n   * Create a new TR element (and it's TD children) for a row\n   *  @param {object} oSettings dataTables settings object\n   *  @param {int} iRow Row to consider\n   *  @param {node} [nTrIn] TR element to add to the table - optional. If not given,\n   *    DataTables will create a row automatically\n   *  @param {array} [anTds] Array of TD|TH elements for the row - must be given\n   *    if nTr is.\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnCreateTr(oSettings, iRow, nTrIn, anTds) {\n    var row = oSettings.aoData[iRow],\n        rowData = row._aData,\n        cells = [],\n        nTr,\n        nTd,\n        oCol,\n        i,\n        iLen,\n        create;\n\n    if (row.nTr === null) {\n      nTr = nTrIn || document.createElement('tr');\n      row.nTr = nTr;\n      row.anCells = cells;\n      /* Use a private property on the node to allow reserve mapping from the node\n       * to the aoData array for fast look up\n       */\n\n      nTr._DT_RowIndex = iRow;\n      /* Special parameters can be given by the data source to be used on the row */\n\n      _fnRowAttributes(oSettings, row);\n      /* Process each column */\n\n\n      for (i = 0, iLen = oSettings.aoColumns.length; i < iLen; i++) {\n        oCol = oSettings.aoColumns[i];\n        create = nTrIn ? false : true;\n        nTd = create ? document.createElement(oCol.sCellType) : anTds[i];\n        nTd._DT_CellIndex = {\n          row: iRow,\n          column: i\n        };\n        cells.push(nTd); // Need to create the HTML if new, or if a rendering function is defined\n\n        if (create || (!nTrIn || oCol.mRender || oCol.mData !== i) && (!$.isPlainObject(oCol.mData) || oCol.mData._ !== i + '.display')) {\n          nTd.innerHTML = _fnGetCellData(oSettings, iRow, i, 'display');\n        }\n        /* Add user defined class */\n\n\n        if (oCol.sClass) {\n          nTd.className += ' ' + oCol.sClass;\n        } // Visibility - add or remove as required\n\n\n        if (oCol.bVisible && !nTrIn) {\n          nTr.appendChild(nTd);\n        } else if (!oCol.bVisible && nTrIn) {\n          nTd.parentNode.removeChild(nTd);\n        }\n\n        if (oCol.fnCreatedCell) {\n          oCol.fnCreatedCell.call(oSettings.oInstance, nTd, _fnGetCellData(oSettings, iRow, i), rowData, iRow, i);\n        }\n      }\n\n      _fnCallbackFire(oSettings, 'aoRowCreatedCallback', null, [nTr, rowData, iRow, cells]);\n    } // Remove once webkit bug 131819 and Chromium bug 365619 have been resolved\n    // and deployed\n\n\n    row.nTr.setAttribute('role', 'row');\n  }\n  /**\n   * Add attributes to a row based on the special `DT_*` parameters in a data\n   * source object.\n   *  @param {object} settings DataTables settings object\n   *  @param {object} DataTables row object for the row to be modified\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnRowAttributes(settings, row) {\n    var tr = row.nTr;\n    var data = row._aData;\n\n    if (tr) {\n      var id = settings.rowIdFn(data);\n\n      if (id) {\n        tr.id = id;\n      }\n\n      if (data.DT_RowClass) {\n        // Remove any classes added by DT_RowClass before\n        var a = data.DT_RowClass.split(' ');\n        row.__rowc = row.__rowc ? _unique(row.__rowc.concat(a)) : a;\n        $(tr).removeClass(row.__rowc.join(' ')).addClass(data.DT_RowClass);\n      }\n\n      if (data.DT_RowAttr) {\n        $(tr).attr(data.DT_RowAttr);\n      }\n\n      if (data.DT_RowData) {\n        $(tr).data(data.DT_RowData);\n      }\n    }\n  }\n  /**\n   * Create the HTML header for the table\n   *  @param {object} oSettings dataTables settings object\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnBuildHead(oSettings) {\n    var i, ien, cell, row, column;\n    var thead = oSettings.nTHead;\n    var tfoot = oSettings.nTFoot;\n    var createHeader = $('th, td', thead).length === 0;\n    var classes = oSettings.oClasses;\n    var columns = oSettings.aoColumns;\n\n    if (createHeader) {\n      row = $('<tr/>').appendTo(thead);\n    }\n\n    for (i = 0, ien = columns.length; i < ien; i++) {\n      column = columns[i];\n      cell = $(column.nTh).addClass(column.sClass);\n\n      if (createHeader) {\n        cell.appendTo(row);\n      } // 1.11 move into sorting\n\n\n      if (oSettings.oFeatures.bSort) {\n        cell.addClass(column.sSortingClass);\n\n        if (column.bSortable !== false) {\n          cell.attr('tabindex', oSettings.iTabIndex).attr('aria-controls', oSettings.sTableId);\n\n          _fnSortAttachListener(oSettings, column.nTh, i);\n        }\n      }\n\n      if (column.sTitle != cell[0].innerHTML) {\n        cell.html(column.sTitle);\n      }\n\n      _fnRenderer(oSettings, 'header')(oSettings, cell, column, classes);\n    }\n\n    if (createHeader) {\n      _fnDetectHeader(oSettings.aoHeader, thead);\n    }\n    /* ARIA role for the rows */\n\n\n    $(thead).find('>tr').attr('role', 'row');\n    /* Deal with the footer - add classes if required */\n\n    $(thead).find('>tr>th, >tr>td').addClass(classes.sHeaderTH);\n    $(tfoot).find('>tr>th, >tr>td').addClass(classes.sFooterTH); // Cache the footer cells. Note that we only take the cells from the first\n    // row in the footer. If there is more than one row the user wants to\n    // interact with, they need to use the table().foot() method. Note also this\n    // allows cells to be used for multiple columns using colspan\n\n    if (tfoot !== null) {\n      var cells = oSettings.aoFooter[0];\n\n      for (i = 0, ien = cells.length; i < ien; i++) {\n        column = columns[i];\n        column.nTf = cells[i].cell;\n\n        if (column.sClass) {\n          $(column.nTf).addClass(column.sClass);\n        }\n      }\n    }\n  }\n  /**\n   * Draw the header (or footer) element based on the column visibility states. The\n   * methodology here is to use the layout array from _fnDetectHeader, modified for\n   * the instantaneous column visibility, to construct the new layout. The grid is\n   * traversed over cell at a time in a rows x columns grid fashion, although each\n   * cell insert can cover multiple elements in the grid - which is tracks using the\n   * aApplied array. Cell inserts in the grid will only occur where there isn't\n   * already a cell in that position.\n   *  @param {object} oSettings dataTables settings object\n   *  @param array {objects} aoSource Layout array from _fnDetectHeader\n   *  @param {boolean} [bIncludeHidden=false] If true then include the hidden columns in the calc,\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnDrawHead(oSettings, aoSource, bIncludeHidden) {\n    var i, iLen, j, jLen, k, kLen, n, nLocalTr;\n    var aoLocal = [];\n    var aApplied = [];\n    var iColumns = oSettings.aoColumns.length;\n    var iRowspan, iColspan;\n\n    if (!aoSource) {\n      return;\n    }\n\n    if (bIncludeHidden === undefined) {\n      bIncludeHidden = false;\n    }\n    /* Make a copy of the master layout array, but without the visible columns in it */\n\n\n    for (i = 0, iLen = aoSource.length; i < iLen; i++) {\n      aoLocal[i] = aoSource[i].slice();\n      aoLocal[i].nTr = aoSource[i].nTr;\n      /* Remove any columns which are currently hidden */\n\n      for (j = iColumns - 1; j >= 0; j--) {\n        if (!oSettings.aoColumns[j].bVisible && !bIncludeHidden) {\n          aoLocal[i].splice(j, 1);\n        }\n      }\n      /* Prep the applied array - it needs an element for each row */\n\n\n      aApplied.push([]);\n    }\n\n    for (i = 0, iLen = aoLocal.length; i < iLen; i++) {\n      nLocalTr = aoLocal[i].nTr;\n      /* All cells are going to be replaced, so empty out the row */\n\n      if (nLocalTr) {\n        while (n = nLocalTr.firstChild) {\n          nLocalTr.removeChild(n);\n        }\n      }\n\n      for (j = 0, jLen = aoLocal[i].length; j < jLen; j++) {\n        iRowspan = 1;\n        iColspan = 1;\n        /* Check to see if there is already a cell (row/colspan) covering our target\n         * insert point. If there is, then there is nothing to do.\n         */\n\n        if (aApplied[i][j] === undefined) {\n          nLocalTr.appendChild(aoLocal[i][j].cell);\n          aApplied[i][j] = 1;\n          /* Expand the cell to cover as many rows as needed */\n\n          while (aoLocal[i + iRowspan] !== undefined && aoLocal[i][j].cell == aoLocal[i + iRowspan][j].cell) {\n            aApplied[i + iRowspan][j] = 1;\n            iRowspan++;\n          }\n          /* Expand the cell to cover as many columns as needed */\n\n\n          while (aoLocal[i][j + iColspan] !== undefined && aoLocal[i][j].cell == aoLocal[i][j + iColspan].cell) {\n            /* Must update the applied array over the rows for the columns */\n            for (k = 0; k < iRowspan; k++) {\n              aApplied[i + k][j + iColspan] = 1;\n            }\n\n            iColspan++;\n          }\n          /* Do the actual expansion in the DOM */\n\n\n          $(aoLocal[i][j].cell).attr('rowspan', iRowspan).attr('colspan', iColspan);\n        }\n      }\n    }\n  }\n  /**\n   * Insert the required TR nodes into the table for display\n   *  @param {object} oSettings dataTables settings object\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnDraw(oSettings) {\n    /* Provide a pre-callback function which can be used to cancel the draw is false is returned */\n    var aPreDraw = _fnCallbackFire(oSettings, 'aoPreDrawCallback', 'preDraw', [oSettings]);\n\n    if ($.inArray(false, aPreDraw) !== -1) {\n      _fnProcessingDisplay(oSettings, false);\n\n      return;\n    }\n\n    var i, iLen, n;\n    var anRows = [];\n    var iRowCount = 0;\n    var asStripeClasses = oSettings.asStripeClasses;\n    var iStripes = asStripeClasses.length;\n    var iOpenRows = oSettings.aoOpenRows.length;\n    var oLang = oSettings.oLanguage;\n    var iInitDisplayStart = oSettings.iInitDisplayStart;\n    var bServerSide = _fnDataSource(oSettings) == 'ssp';\n    var aiDisplay = oSettings.aiDisplay;\n    oSettings.bDrawing = true;\n    /* Check and see if we have an initial draw position from state saving */\n\n    if (iInitDisplayStart !== undefined && iInitDisplayStart !== -1) {\n      oSettings._iDisplayStart = bServerSide ? iInitDisplayStart : iInitDisplayStart >= oSettings.fnRecordsDisplay() ? 0 : iInitDisplayStart;\n      oSettings.iInitDisplayStart = -1;\n    }\n\n    var iDisplayStart = oSettings._iDisplayStart;\n    var iDisplayEnd = oSettings.fnDisplayEnd();\n    /* Server-side processing draw intercept */\n\n    if (oSettings.bDeferLoading) {\n      oSettings.bDeferLoading = false;\n      oSettings.iDraw++;\n\n      _fnProcessingDisplay(oSettings, false);\n    } else if (!bServerSide) {\n      oSettings.iDraw++;\n    } else if (!oSettings.bDestroying && !_fnAjaxUpdate(oSettings)) {\n      return;\n    }\n\n    if (aiDisplay.length !== 0) {\n      var iStart = bServerSide ? 0 : iDisplayStart;\n      var iEnd = bServerSide ? oSettings.aoData.length : iDisplayEnd;\n\n      for (var j = iStart; j < iEnd; j++) {\n        var iDataIndex = aiDisplay[j];\n        var aoData = oSettings.aoData[iDataIndex];\n\n        if (aoData.nTr === null) {\n          _fnCreateTr(oSettings, iDataIndex);\n        }\n\n        var nRow = aoData.nTr;\n        /* Remove the old striping classes and then add the new one */\n\n        if (iStripes !== 0) {\n          var sStripe = asStripeClasses[iRowCount % iStripes];\n\n          if (aoData._sRowStripe != sStripe) {\n            $(nRow).removeClass(aoData._sRowStripe).addClass(sStripe);\n            aoData._sRowStripe = sStripe;\n          }\n        } // Row callback functions - might want to manipulate the row\n        // iRowCount and j are not currently documented. Are they at all\n        // useful?\n\n\n        _fnCallbackFire(oSettings, 'aoRowCallback', null, [nRow, aoData._aData, iRowCount, j, iDataIndex]);\n\n        anRows.push(nRow);\n        iRowCount++;\n      }\n    } else {\n      /* Table is empty - create a row with an empty message in it */\n      var sZero = oLang.sZeroRecords;\n\n      if (oSettings.iDraw == 1 && _fnDataSource(oSettings) == 'ajax') {\n        sZero = oLang.sLoadingRecords;\n      } else if (oLang.sEmptyTable && oSettings.fnRecordsTotal() === 0) {\n        sZero = oLang.sEmptyTable;\n      }\n\n      anRows[0] = $('<tr/>', {\n        'class': iStripes ? asStripeClasses[0] : ''\n      }).append($('<td />', {\n        'valign': 'top',\n        'colSpan': _fnVisbleColumns(oSettings),\n        'class': oSettings.oClasses.sRowEmpty\n      }).html(sZero))[0];\n    }\n    /* Header and footer callbacks */\n\n\n    _fnCallbackFire(oSettings, 'aoHeaderCallback', 'header', [$(oSettings.nTHead).children('tr')[0], _fnGetDataMaster(oSettings), iDisplayStart, iDisplayEnd, aiDisplay]);\n\n    _fnCallbackFire(oSettings, 'aoFooterCallback', 'footer', [$(oSettings.nTFoot).children('tr')[0], _fnGetDataMaster(oSettings), iDisplayStart, iDisplayEnd, aiDisplay]);\n\n    var body = $(oSettings.nTBody);\n    body.children().detach();\n    body.append($(anRows));\n    /* Call all required callback functions for the end of a draw */\n\n    _fnCallbackFire(oSettings, 'aoDrawCallback', 'draw', [oSettings]);\n    /* Draw is complete, sorting and filtering must be as well */\n\n\n    oSettings.bSorted = false;\n    oSettings.bFiltered = false;\n    oSettings.bDrawing = false;\n  }\n  /**\n   * Redraw the table - taking account of the various features which are enabled\n   *  @param {object} oSettings dataTables settings object\n   *  @param {boolean} [holdPosition] Keep the current paging position. By default\n   *    the paging is reset to the first page\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnReDraw(settings, holdPosition) {\n    var features = settings.oFeatures,\n        sort = features.bSort,\n        filter = features.bFilter;\n\n    if (sort) {\n      _fnSort(settings);\n    }\n\n    if (filter) {\n      _fnFilterComplete(settings, settings.oPreviousSearch);\n    } else {\n      // No filtering, so we want to just use the display master\n      settings.aiDisplay = settings.aiDisplayMaster.slice();\n    }\n\n    if (holdPosition !== true) {\n      settings._iDisplayStart = 0;\n    } // Let any modules know about the draw hold position state (used by\n    // scrolling internally)\n\n\n    settings._drawHold = holdPosition;\n\n    _fnDraw(settings);\n\n    settings._drawHold = false;\n  }\n  /**\n   * Add the options to the page HTML for the table\n   *  @param {object} oSettings dataTables settings object\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnAddOptionsHtml(oSettings) {\n    var classes = oSettings.oClasses;\n    var table = $(oSettings.nTable);\n    var holding = $('<div/>').insertBefore(table); // Holding element for speed\n\n    var features = oSettings.oFeatures; // All DataTables are wrapped in a div\n\n    var insert = $('<div/>', {\n      id: oSettings.sTableId + '_wrapper',\n      'class': classes.sWrapper + (oSettings.nTFoot ? '' : ' ' + classes.sNoFooter)\n    });\n    oSettings.nHolding = holding[0];\n    oSettings.nTableWrapper = insert[0];\n    oSettings.nTableReinsertBefore = oSettings.nTable.nextSibling;\n    /* Loop over the user set positioning and place the elements as needed */\n\n    var aDom = oSettings.sDom.split('');\n    var featureNode, cOption, nNewNode, cNext, sAttr, j;\n\n    for (var i = 0; i < aDom.length; i++) {\n      featureNode = null;\n      cOption = aDom[i];\n\n      if (cOption == '<') {\n        /* New container div */\n        nNewNode = $('<div/>')[0];\n        /* Check to see if we should append an id and/or a class name to the container */\n\n        cNext = aDom[i + 1];\n\n        if (cNext == \"'\" || cNext == '\"') {\n          sAttr = \"\";\n          j = 2;\n\n          while (aDom[i + j] != cNext) {\n            sAttr += aDom[i + j];\n            j++;\n          }\n          /* Replace jQuery UI constants @todo depreciated */\n\n\n          if (sAttr == \"H\") {\n            sAttr = classes.sJUIHeader;\n          } else if (sAttr == \"F\") {\n            sAttr = classes.sJUIFooter;\n          }\n          /* The attribute can be in the format of \"#id.class\", \"#id\" or \"class\" This logic\n           * breaks the string into parts and applies them as needed\n           */\n\n\n          if (sAttr.indexOf('.') != -1) {\n            var aSplit = sAttr.split('.');\n            nNewNode.id = aSplit[0].substr(1, aSplit[0].length - 1);\n            nNewNode.className = aSplit[1];\n          } else if (sAttr.charAt(0) == \"#\") {\n            nNewNode.id = sAttr.substr(1, sAttr.length - 1);\n          } else {\n            nNewNode.className = sAttr;\n          }\n\n          i += j;\n          /* Move along the position array */\n        }\n\n        insert.append(nNewNode);\n        insert = $(nNewNode);\n      } else if (cOption == '>') {\n        /* End container div */\n        insert = insert.parent();\n      } // @todo Move options into their own plugins?\n      else if (cOption == 'l' && features.bPaginate && features.bLengthChange) {\n          /* Length */\n          featureNode = _fnFeatureHtmlLength(oSettings);\n        } else if (cOption == 'f' && features.bFilter) {\n          /* Filter */\n          featureNode = _fnFeatureHtmlFilter(oSettings);\n        } else if (cOption == 'r' && features.bProcessing) {\n          /* pRocessing */\n          featureNode = _fnFeatureHtmlProcessing(oSettings);\n        } else if (cOption == 't') {\n          /* Table */\n          featureNode = _fnFeatureHtmlTable(oSettings);\n        } else if (cOption == 'i' && features.bInfo) {\n          /* Info */\n          featureNode = _fnFeatureHtmlInfo(oSettings);\n        } else if (cOption == 'p' && features.bPaginate) {\n          /* Pagination */\n          featureNode = _fnFeatureHtmlPaginate(oSettings);\n        } else if (DataTable.ext.feature.length !== 0) {\n          /* Plug-in features */\n          var aoFeatures = DataTable.ext.feature;\n\n          for (var k = 0, kLen = aoFeatures.length; k < kLen; k++) {\n            if (cOption == aoFeatures[k].cFeature) {\n              featureNode = aoFeatures[k].fnInit(oSettings);\n              break;\n            }\n          }\n        }\n      /* Add to the 2D features array */\n\n\n      if (featureNode) {\n        var aanFeatures = oSettings.aanFeatures;\n\n        if (!aanFeatures[cOption]) {\n          aanFeatures[cOption] = [];\n        }\n\n        aanFeatures[cOption].push(featureNode);\n        insert.append(featureNode);\n      }\n    }\n    /* Built our DOM structure - replace the holding div with what we want */\n\n\n    holding.replaceWith(insert);\n    oSettings.nHolding = null;\n  }\n  /**\n   * Use the DOM source to create up an array of header cells. The idea here is to\n   * create a layout grid (array) of rows x columns, which contains a reference\n   * to the cell that that point in the grid (regardless of col/rowspan), such that\n   * any column / row could be removed and the new grid constructed\n   *  @param array {object} aLayout Array to store the calculated layout in\n   *  @param {node} nThead The header/footer element for the table\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnDetectHeader(aLayout, nThead) {\n    var nTrs = $(nThead).children('tr');\n    var nTr, nCell;\n    var i, k, l, iLen, jLen, iColShifted, iColumn, iColspan, iRowspan;\n    var bUnique;\n\n    var fnShiftCol = function (a, i, j) {\n      var k = a[i];\n\n      while (k[j]) {\n        j++;\n      }\n\n      return j;\n    };\n\n    aLayout.splice(0, aLayout.length);\n    /* We know how many rows there are in the layout - so prep it */\n\n    for (i = 0, iLen = nTrs.length; i < iLen; i++) {\n      aLayout.push([]);\n    }\n    /* Calculate a layout array */\n\n\n    for (i = 0, iLen = nTrs.length; i < iLen; i++) {\n      nTr = nTrs[i];\n      iColumn = 0;\n      /* For every cell in the row... */\n\n      nCell = nTr.firstChild;\n\n      while (nCell) {\n        if (nCell.nodeName.toUpperCase() == \"TD\" || nCell.nodeName.toUpperCase() == \"TH\") {\n          /* Get the col and rowspan attributes from the DOM and sanitise them */\n          iColspan = nCell.getAttribute('colspan') * 1;\n          iRowspan = nCell.getAttribute('rowspan') * 1;\n          iColspan = !iColspan || iColspan === 0 || iColspan === 1 ? 1 : iColspan;\n          iRowspan = !iRowspan || iRowspan === 0 || iRowspan === 1 ? 1 : iRowspan;\n          /* There might be colspan cells already in this row, so shift our target\n           * accordingly\n           */\n\n          iColShifted = fnShiftCol(aLayout, i, iColumn);\n          /* Cache calculation for unique columns */\n\n          bUnique = iColspan === 1 ? true : false;\n          /* If there is col / rowspan, copy the information into the layout grid */\n\n          for (l = 0; l < iColspan; l++) {\n            for (k = 0; k < iRowspan; k++) {\n              aLayout[i + k][iColShifted + l] = {\n                \"cell\": nCell,\n                \"unique\": bUnique\n              };\n              aLayout[i + k].nTr = nTr;\n            }\n          }\n        }\n\n        nCell = nCell.nextSibling;\n      }\n    }\n  }\n  /**\n   * Get an array of unique th elements, one for each column\n   *  @param {object} oSettings dataTables settings object\n   *  @param {node} nHeader automatically detect the layout from this node - optional\n   *  @param {array} aLayout thead/tfoot layout from _fnDetectHeader - optional\n   *  @returns array {node} aReturn list of unique th's\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnGetUniqueThs(oSettings, nHeader, aLayout) {\n    var aReturn = [];\n\n    if (!aLayout) {\n      aLayout = oSettings.aoHeader;\n\n      if (nHeader) {\n        aLayout = [];\n\n        _fnDetectHeader(aLayout, nHeader);\n      }\n    }\n\n    for (var i = 0, iLen = aLayout.length; i < iLen; i++) {\n      for (var j = 0, jLen = aLayout[i].length; j < jLen; j++) {\n        if (aLayout[i][j].unique && (!aReturn[j] || !oSettings.bSortCellsTop)) {\n          aReturn[j] = aLayout[i][j].cell;\n        }\n      }\n    }\n\n    return aReturn;\n  }\n  /**\n   * Create an Ajax call based on the table's settings, taking into account that\n   * parameters can have multiple forms, and backwards compatibility.\n   *\n   * @param {object} oSettings dataTables settings object\n   * @param {array} data Data to send to the server, required by\n   *     DataTables - may be augmented by developer callbacks\n   * @param {function} fn Callback function to run when data is obtained\n   */\n\n\n  function _fnBuildAjax(oSettings, data, fn) {\n    // Compatibility with 1.9-, allow fnServerData and event to manipulate\n    _fnCallbackFire(oSettings, 'aoServerParams', 'serverParams', [data]); // Convert to object based for 1.10+ if using the old array scheme which can\n    // come from server-side processing or serverParams\n\n\n    if (data && $.isArray(data)) {\n      var tmp = {};\n      var rbracket = /(.*?)\\[\\]$/;\n      $.each(data, function (key, val) {\n        var match = val.name.match(rbracket);\n\n        if (match) {\n          // Support for arrays\n          var name = match[0];\n\n          if (!tmp[name]) {\n            tmp[name] = [];\n          }\n\n          tmp[name].push(val.value);\n        } else {\n          tmp[val.name] = val.value;\n        }\n      });\n      data = tmp;\n    }\n\n    var ajaxData;\n    var ajax = oSettings.ajax;\n    var instance = oSettings.oInstance;\n\n    var callback = function (json) {\n      _fnCallbackFire(oSettings, null, 'xhr', [oSettings, json, oSettings.jqXHR]);\n\n      fn(json);\n    };\n\n    if ($.isPlainObject(ajax) && ajax.data) {\n      ajaxData = ajax.data;\n      var newData = typeof ajaxData === 'function' ? ajaxData(data, oSettings) : // fn can manipulate data or return\n      ajaxData; // an object object or array to merge\n      // If the function returned something, use that alone\n\n      data = typeof ajaxData === 'function' && newData ? newData : $.extend(true, data, newData); // Remove the data property as we've resolved it already and don't want\n      // jQuery to do it again (it is restored at the end of the function)\n\n      delete ajax.data;\n    }\n\n    var baseAjax = {\n      \"data\": data,\n      \"success\": function (json) {\n        var error = json.error || json.sError;\n\n        if (error) {\n          _fnLog(oSettings, 0, error);\n        }\n\n        oSettings.json = json;\n        callback(json);\n      },\n      \"dataType\": \"json\",\n      \"cache\": false,\n      \"type\": oSettings.sServerMethod,\n      \"error\": function (xhr, error, thrown) {\n        var ret = _fnCallbackFire(oSettings, null, 'xhr', [oSettings, null, oSettings.jqXHR]);\n\n        if ($.inArray(true, ret) === -1) {\n          if (error == \"parsererror\") {\n            _fnLog(oSettings, 0, 'Invalid JSON response', 1);\n          } else if (xhr.readyState === 4) {\n            _fnLog(oSettings, 0, 'Ajax error', 7);\n          }\n        }\n\n        _fnProcessingDisplay(oSettings, false);\n      }\n    }; // Store the data submitted for the API\n\n    oSettings.oAjaxData = data; // Allow plug-ins and external processes to modify the data\n\n    _fnCallbackFire(oSettings, null, 'preXhr', [oSettings, data]);\n\n    if (oSettings.fnServerData) {\n      // DataTables 1.9- compatibility\n      oSettings.fnServerData.call(instance, oSettings.sAjaxSource, $.map(data, function (val, key) {\n        // Need to convert back to 1.9 trad format\n        return {\n          name: key,\n          value: val\n        };\n      }), callback, oSettings);\n    } else if (oSettings.sAjaxSource || typeof ajax === 'string') {\n      // DataTables 1.9- compatibility\n      oSettings.jqXHR = $.ajax($.extend(baseAjax, {\n        url: ajax || oSettings.sAjaxSource\n      }));\n    } else if (typeof ajax === 'function') {\n      // Is a function - let the caller define what needs to be done\n      oSettings.jqXHR = ajax.call(instance, data, callback, oSettings);\n    } else {\n      // Object to extend the base settings\n      oSettings.jqXHR = $.ajax($.extend(baseAjax, ajax)); // Restore for next time around\n\n      ajax.data = ajaxData;\n    }\n  }\n  /**\n   * Update the table using an Ajax call\n   *  @param {object} settings dataTables settings object\n   *  @returns {boolean} Block the table drawing or not\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnAjaxUpdate(settings) {\n    if (settings.bAjaxDataGet) {\n      settings.iDraw++;\n\n      _fnProcessingDisplay(settings, true);\n\n      _fnBuildAjax(settings, _fnAjaxParameters(settings), function (json) {\n        _fnAjaxUpdateDraw(settings, json);\n      });\n\n      return false;\n    }\n\n    return true;\n  }\n  /**\n   * Build up the parameters in an object needed for a server-side processing\n   * request. Note that this is basically done twice, is different ways - a modern\n   * method which is used by default in DataTables 1.10 which uses objects and\n   * arrays, or the 1.9- method with is name / value pairs. 1.9 method is used if\n   * the sAjaxSource option is used in the initialisation, or the legacyAjax\n   * option is set.\n   *  @param {object} oSettings dataTables settings object\n   *  @returns {bool} block the table drawing or not\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnAjaxParameters(settings) {\n    var columns = settings.aoColumns,\n        columnCount = columns.length,\n        features = settings.oFeatures,\n        preSearch = settings.oPreviousSearch,\n        preColSearch = settings.aoPreSearchCols,\n        i,\n        data = [],\n        dataProp,\n        column,\n        columnSearch,\n        sort = _fnSortFlatten(settings),\n        displayStart = settings._iDisplayStart,\n        displayLength = features.bPaginate !== false ? settings._iDisplayLength : -1;\n\n    var param = function (name, value) {\n      data.push({\n        'name': name,\n        'value': value\n      });\n    }; // DataTables 1.9- compatible method\n\n\n    param('sEcho', settings.iDraw);\n    param('iColumns', columnCount);\n    param('sColumns', _pluck(columns, 'sName').join(','));\n    param('iDisplayStart', displayStart);\n    param('iDisplayLength', displayLength); // DataTables 1.10+ method\n\n    var d = {\n      draw: settings.iDraw,\n      columns: [],\n      order: [],\n      start: displayStart,\n      length: displayLength,\n      search: {\n        value: preSearch.sSearch,\n        regex: preSearch.bRegex\n      }\n    };\n\n    for (i = 0; i < columnCount; i++) {\n      column = columns[i];\n      columnSearch = preColSearch[i];\n      dataProp = typeof column.mData == \"function\" ? 'function' : column.mData;\n      d.columns.push({\n        data: dataProp,\n        name: column.sName,\n        searchable: column.bSearchable,\n        orderable: column.bSortable,\n        search: {\n          value: columnSearch.sSearch,\n          regex: columnSearch.bRegex\n        }\n      });\n      param(\"mDataProp_\" + i, dataProp);\n\n      if (features.bFilter) {\n        param('sSearch_' + i, columnSearch.sSearch);\n        param('bRegex_' + i, columnSearch.bRegex);\n        param('bSearchable_' + i, column.bSearchable);\n      }\n\n      if (features.bSort) {\n        param('bSortable_' + i, column.bSortable);\n      }\n    }\n\n    if (features.bFilter) {\n      param('sSearch', preSearch.sSearch);\n      param('bRegex', preSearch.bRegex);\n    }\n\n    if (features.bSort) {\n      $.each(sort, function (i, val) {\n        d.order.push({\n          column: val.col,\n          dir: val.dir\n        });\n        param('iSortCol_' + i, val.col);\n        param('sSortDir_' + i, val.dir);\n      });\n      param('iSortingCols', sort.length);\n    } // If the legacy.ajax parameter is null, then we automatically decide which\n    // form to use, based on sAjaxSource\n\n\n    var legacy = DataTable.ext.legacy.ajax;\n\n    if (legacy === null) {\n      return settings.sAjaxSource ? data : d;\n    } // Otherwise, if legacy has been specified then we use that to decide on the\n    // form\n\n\n    return legacy ? data : d;\n  }\n  /**\n   * Data the data from the server (nuking the old) and redraw the table\n   *  @param {object} oSettings dataTables settings object\n   *  @param {object} json json data return from the server.\n   *  @param {string} json.sEcho Tracking flag for DataTables to match requests\n   *  @param {int} json.iTotalRecords Number of records in the data set, not accounting for filtering\n   *  @param {int} json.iTotalDisplayRecords Number of records in the data set, accounting for filtering\n   *  @param {array} json.aaData The data to display on this page\n   *  @param {string} [json.sColumns] Column ordering (sName, comma separated)\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnAjaxUpdateDraw(settings, json) {\n    // v1.10 uses camelCase variables, while 1.9 uses Hungarian notation.\n    // Support both\n    var compat = function (old, modern) {\n      return json[old] !== undefined ? json[old] : json[modern];\n    };\n\n    var data = _fnAjaxDataSrc(settings, json);\n\n    var draw = compat('sEcho', 'draw');\n    var recordsTotal = compat('iTotalRecords', 'recordsTotal');\n    var recordsFiltered = compat('iTotalDisplayRecords', 'recordsFiltered');\n\n    if (draw !== undefined) {\n      // Protect against out of sequence returns\n      if (draw * 1 < settings.iDraw) {\n        return;\n      }\n\n      settings.iDraw = draw * 1;\n    }\n\n    _fnClearTable(settings);\n\n    settings._iRecordsTotal = parseInt(recordsTotal, 10);\n    settings._iRecordsDisplay = parseInt(recordsFiltered, 10);\n\n    for (var i = 0, ien = data.length; i < ien; i++) {\n      _fnAddData(settings, data[i]);\n    }\n\n    settings.aiDisplay = settings.aiDisplayMaster.slice();\n    settings.bAjaxDataGet = false;\n\n    _fnDraw(settings);\n\n    if (!settings._bInitComplete) {\n      _fnInitComplete(settings, json);\n    }\n\n    settings.bAjaxDataGet = true;\n\n    _fnProcessingDisplay(settings, false);\n  }\n  /**\n   * Get the data from the JSON data source to use for drawing a table. Using\n   * `_fnGetObjectDataFn` allows the data to be sourced from a property of the\n   * source object, or from a processing function.\n   *  @param {object} oSettings dataTables settings object\n   *  @param  {object} json Data source object / array from the server\n   *  @return {array} Array of data to use\n   */\n\n\n  function _fnAjaxDataSrc(oSettings, json) {\n    var dataSrc = $.isPlainObject(oSettings.ajax) && oSettings.ajax.dataSrc !== undefined ? oSettings.ajax.dataSrc : oSettings.sAjaxDataProp; // Compatibility with 1.9-.\n    // Compatibility with 1.9-. In order to read from aaData, check if the\n    // default has been changed, if not, check for aaData\n\n    if (dataSrc === 'data') {\n      return json.aaData || json[dataSrc];\n    }\n\n    return dataSrc !== \"\" ? _fnGetObjectDataFn(dataSrc)(json) : json;\n  }\n  /**\n   * Generate the node required for filtering text\n   *  @returns {node} Filter control element\n   *  @param {object} oSettings dataTables settings object\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnFeatureHtmlFilter(settings) {\n    var classes = settings.oClasses;\n    var tableId = settings.sTableId;\n    var language = settings.oLanguage;\n    var previousSearch = settings.oPreviousSearch;\n    var features = settings.aanFeatures;\n    var input = '<input type=\"search\" class=\"' + classes.sFilterInput + '\"/>';\n    var str = language.sSearch;\n    str = str.match(/_INPUT_/) ? str.replace('_INPUT_', input) : str + input;\n    var filter = $('<div/>', {\n      'id': !features.f ? tableId + '_filter' : null,\n      'class': classes.sFilter\n    }).append($('<label/>').append(str));\n\n    var searchFn = function () {\n      /* Update all other filter input elements for the new display */\n      var n = features.f;\n      var val = !this.value ? \"\" : this.value; // mental IE8 fix :-(\n\n      /* Now do the filter */\n\n      if (val != previousSearch.sSearch) {\n        _fnFilterComplete(settings, {\n          \"sSearch\": val,\n          \"bRegex\": previousSearch.bRegex,\n          \"bSmart\": previousSearch.bSmart,\n          \"bCaseInsensitive\": previousSearch.bCaseInsensitive\n        }); // Need to redraw, without resorting\n\n\n        settings._iDisplayStart = 0;\n\n        _fnDraw(settings);\n      }\n    };\n\n    var searchDelay = settings.searchDelay !== null ? settings.searchDelay : _fnDataSource(settings) === 'ssp' ? 400 : 0;\n    var jqFilter = $('input', filter).val(previousSearch.sSearch).attr('placeholder', language.sSearchPlaceholder).on('keyup.DT search.DT input.DT paste.DT cut.DT', searchDelay ? _fnThrottle(searchFn, searchDelay) : searchFn).on('mouseup', function (e) {\n      // Edge fix! Edge 17 does not trigger anything other than mouse events when clicking\n      // on the clear icon (Edge bug 17584515). This is safe in other browsers as `searchFn`\n      // checks the value to see if it has changed. In other browsers it won't have.\n      setTimeout(function () {\n        searchFn.call(jqFilter[0]);\n      }, 10);\n    }).on('keypress.DT', function (e) {\n      /* Prevent form submission */\n      if (e.keyCode == 13) {\n        return false;\n      }\n    }).attr('aria-controls', tableId); // Update the input elements whenever the table is filtered\n\n    $(settings.nTable).on('search.dt.DT', function (ev, s) {\n      if (settings === s) {\n        // IE9 throws an 'unknown error' if document.activeElement is used\n        // inside an iframe or frame...\n        try {\n          if (jqFilter[0] !== document.activeElement) {\n            jqFilter.val(previousSearch.sSearch);\n          }\n        } catch (e) {}\n      }\n    });\n    return filter[0];\n  }\n  /**\n   * Filter the table using both the global filter and column based filtering\n   *  @param {object} oSettings dataTables settings object\n   *  @param {object} oSearch search information\n   *  @param {int} [iForce] force a research of the master array (1) or not (undefined or 0)\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnFilterComplete(oSettings, oInput, iForce) {\n    var oPrevSearch = oSettings.oPreviousSearch;\n    var aoPrevSearch = oSettings.aoPreSearchCols;\n\n    var fnSaveFilter = function (oFilter) {\n      /* Save the filtering values */\n      oPrevSearch.sSearch = oFilter.sSearch;\n      oPrevSearch.bRegex = oFilter.bRegex;\n      oPrevSearch.bSmart = oFilter.bSmart;\n      oPrevSearch.bCaseInsensitive = oFilter.bCaseInsensitive;\n    };\n\n    var fnRegex = function (o) {\n      // Backwards compatibility with the bEscapeRegex option\n      return o.bEscapeRegex !== undefined ? !o.bEscapeRegex : o.bRegex;\n    }; // Resolve any column types that are unknown due to addition or invalidation\n    // @todo As per sort - can this be moved into an event handler?\n\n\n    _fnColumnTypes(oSettings);\n    /* In server-side processing all filtering is done by the server, so no point hanging around here */\n\n\n    if (_fnDataSource(oSettings) != 'ssp') {\n      /* Global filter */\n      _fnFilter(oSettings, oInput.sSearch, iForce, fnRegex(oInput), oInput.bSmart, oInput.bCaseInsensitive);\n\n      fnSaveFilter(oInput);\n      /* Now do the individual column filter */\n\n      for (var i = 0; i < aoPrevSearch.length; i++) {\n        _fnFilterColumn(oSettings, aoPrevSearch[i].sSearch, i, fnRegex(aoPrevSearch[i]), aoPrevSearch[i].bSmart, aoPrevSearch[i].bCaseInsensitive);\n      }\n      /* Custom filtering */\n\n\n      _fnFilterCustom(oSettings);\n    } else {\n      fnSaveFilter(oInput);\n    }\n    /* Tell the draw function we have been filtering */\n\n\n    oSettings.bFiltered = true;\n\n    _fnCallbackFire(oSettings, null, 'search', [oSettings]);\n  }\n  /**\n   * Apply custom filtering functions\n   *  @param {object} oSettings dataTables settings object\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnFilterCustom(settings) {\n    var filters = DataTable.ext.search;\n    var displayRows = settings.aiDisplay;\n    var row, rowIdx;\n\n    for (var i = 0, ien = filters.length; i < ien; i++) {\n      var rows = []; // Loop over each row and see if it should be included\n\n      for (var j = 0, jen = displayRows.length; j < jen; j++) {\n        rowIdx = displayRows[j];\n        row = settings.aoData[rowIdx];\n\n        if (filters[i](settings, row._aFilterData, rowIdx, row._aData, j)) {\n          rows.push(rowIdx);\n        }\n      } // So the array reference doesn't break set the results into the\n      // existing array\n\n\n      displayRows.length = 0;\n      $.merge(displayRows, rows);\n    }\n  }\n  /**\n   * Filter the table on a per-column basis\n   *  @param {object} oSettings dataTables settings object\n   *  @param {string} sInput string to filter on\n   *  @param {int} iColumn column to filter\n   *  @param {bool} bRegex treat search string as a regular expression or not\n   *  @param {bool} bSmart use smart filtering or not\n   *  @param {bool} bCaseInsensitive Do case insenstive matching or not\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnFilterColumn(settings, searchStr, colIdx, regex, smart, caseInsensitive) {\n    if (searchStr === '') {\n      return;\n    }\n\n    var data;\n    var out = [];\n    var display = settings.aiDisplay;\n\n    var rpSearch = _fnFilterCreateSearch(searchStr, regex, smart, caseInsensitive);\n\n    for (var i = 0; i < display.length; i++) {\n      data = settings.aoData[display[i]]._aFilterData[colIdx];\n\n      if (rpSearch.test(data)) {\n        out.push(display[i]);\n      }\n    }\n\n    settings.aiDisplay = out;\n  }\n  /**\n   * Filter the data table based on user input and draw the table\n   *  @param {object} settings dataTables settings object\n   *  @param {string} input string to filter on\n   *  @param {int} force optional - force a research of the master array (1) or not (undefined or 0)\n   *  @param {bool} regex treat as a regular expression or not\n   *  @param {bool} smart perform smart filtering or not\n   *  @param {bool} caseInsensitive Do case insenstive matching or not\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnFilter(settings, input, force, regex, smart, caseInsensitive) {\n    var rpSearch = _fnFilterCreateSearch(input, regex, smart, caseInsensitive);\n\n    var prevSearch = settings.oPreviousSearch.sSearch;\n    var displayMaster = settings.aiDisplayMaster;\n    var display, invalidated, i;\n    var filtered = []; // Need to take account of custom filtering functions - always filter\n\n    if (DataTable.ext.search.length !== 0) {\n      force = true;\n    } // Check if any of the rows were invalidated\n\n\n    invalidated = _fnFilterData(settings); // If the input is blank - we just want the full data set\n\n    if (input.length <= 0) {\n      settings.aiDisplay = displayMaster.slice();\n    } else {\n      // New search - start from the master array\n      if (invalidated || force || regex || prevSearch.length > input.length || input.indexOf(prevSearch) !== 0 || settings.bSorted // On resort, the display master needs to be\n      // re-filtered since indexes will have changed\n      ) {\n          settings.aiDisplay = displayMaster.slice();\n        } // Search the display array\n\n\n      display = settings.aiDisplay;\n\n      for (i = 0; i < display.length; i++) {\n        if (rpSearch.test(settings.aoData[display[i]]._sFilterRow)) {\n          filtered.push(display[i]);\n        }\n      }\n\n      settings.aiDisplay = filtered;\n    }\n  }\n  /**\n   * Build a regular expression object suitable for searching a table\n   *  @param {string} sSearch string to search for\n   *  @param {bool} bRegex treat as a regular expression or not\n   *  @param {bool} bSmart perform smart filtering or not\n   *  @param {bool} bCaseInsensitive Do case insensitive matching or not\n   *  @returns {RegExp} constructed object\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnFilterCreateSearch(search, regex, smart, caseInsensitive) {\n    search = regex ? search : _fnEscapeRegex(search);\n\n    if (smart) {\n      /* For smart filtering we want to allow the search to work regardless of\n       * word order. We also want double quoted text to be preserved, so word\n       * order is important - a la google. So this is what we want to\n       * generate:\n       * \n       * ^(?=.*?\\bone\\b)(?=.*?\\btwo three\\b)(?=.*?\\bfour\\b).*$\n       */\n      var a = $.map(search.match(/\"[^\"]+\"|[^ ]+/g) || [''], function (word) {\n        if (word.charAt(0) === '\"') {\n          var m = word.match(/^\"(.*)\"$/);\n          word = m ? m[1] : word;\n        }\n\n        return word.replace('\"', '');\n      });\n      search = '^(?=.*?' + a.join(')(?=.*?') + ').*$';\n    }\n\n    return new RegExp(search, caseInsensitive ? 'i' : '');\n  }\n  /**\n   * Escape a string such that it can be used in a regular expression\n   *  @param {string} sVal string to escape\n   *  @returns {string} escaped string\n   *  @memberof DataTable#oApi\n   */\n\n\n  var _fnEscapeRegex = DataTable.util.escapeRegex;\n  var __filter_div = $('<div>')[0];\n\n  var __filter_div_textContent = __filter_div.textContent !== undefined; // Update the filtering data for each row if needed (by invalidation or first run)\n\n\n  function _fnFilterData(settings) {\n    var columns = settings.aoColumns;\n    var column;\n    var i, j, ien, jen, filterData, cellData, row;\n    var fomatters = DataTable.ext.type.search;\n    var wasInvalidated = false;\n\n    for (i = 0, ien = settings.aoData.length; i < ien; i++) {\n      row = settings.aoData[i];\n\n      if (!row._aFilterData) {\n        filterData = [];\n\n        for (j = 0, jen = columns.length; j < jen; j++) {\n          column = columns[j];\n\n          if (column.bSearchable) {\n            cellData = _fnGetCellData(settings, i, j, 'filter');\n\n            if (fomatters[column.sType]) {\n              cellData = fomatters[column.sType](cellData);\n            } // Search in DataTables 1.10 is string based. In 1.11 this\n            // should be altered to also allow strict type checking.\n\n\n            if (cellData === null) {\n              cellData = '';\n            }\n\n            if (typeof cellData !== 'string' && cellData.toString) {\n              cellData = cellData.toString();\n            }\n          } else {\n            cellData = '';\n          } // If it looks like there is an HTML entity in the string,\n          // attempt to decode it so sorting works as expected. Note that\n          // we could use a single line of jQuery to do this, but the DOM\n          // method used here is much faster http://jsperf.com/html-decode\n\n\n          if (cellData.indexOf && cellData.indexOf('&') !== -1) {\n            __filter_div.innerHTML = cellData;\n            cellData = __filter_div_textContent ? __filter_div.textContent : __filter_div.innerText;\n          }\n\n          if (cellData.replace) {\n            cellData = cellData.replace(/[\\r\\n\\u2028]/g, '');\n          }\n\n          filterData.push(cellData);\n        }\n\n        row._aFilterData = filterData;\n        row._sFilterRow = filterData.join('  ');\n        wasInvalidated = true;\n      }\n    }\n\n    return wasInvalidated;\n  }\n  /**\n   * Convert from the internal Hungarian notation to camelCase for external\n   * interaction\n   *  @param {object} obj Object to convert\n   *  @returns {object} Inverted object\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnSearchToCamel(obj) {\n    return {\n      search: obj.sSearch,\n      smart: obj.bSmart,\n      regex: obj.bRegex,\n      caseInsensitive: obj.bCaseInsensitive\n    };\n  }\n  /**\n   * Convert from camelCase notation to the internal Hungarian. We could use the\n   * Hungarian convert function here, but this is cleaner\n   *  @param {object} obj Object to convert\n   *  @returns {object} Inverted object\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnSearchToHung(obj) {\n    return {\n      sSearch: obj.search,\n      bSmart: obj.smart,\n      bRegex: obj.regex,\n      bCaseInsensitive: obj.caseInsensitive\n    };\n  }\n  /**\n   * Generate the node required for the info display\n   *  @param {object} oSettings dataTables settings object\n   *  @returns {node} Information element\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnFeatureHtmlInfo(settings) {\n    var tid = settings.sTableId,\n        nodes = settings.aanFeatures.i,\n        n = $('<div/>', {\n      'class': settings.oClasses.sInfo,\n      'id': !nodes ? tid + '_info' : null\n    });\n\n    if (!nodes) {\n      // Update display on each draw\n      settings.aoDrawCallback.push({\n        \"fn\": _fnUpdateInfo,\n        \"sName\": \"information\"\n      });\n      n.attr('role', 'status').attr('aria-live', 'polite'); // Table is described by our info div\n\n      $(settings.nTable).attr('aria-describedby', tid + '_info');\n    }\n\n    return n[0];\n  }\n  /**\n   * Update the information elements in the display\n   *  @param {object} settings dataTables settings object\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnUpdateInfo(settings) {\n    /* Show information about the table */\n    var nodes = settings.aanFeatures.i;\n\n    if (nodes.length === 0) {\n      return;\n    }\n\n    var lang = settings.oLanguage,\n        start = settings._iDisplayStart + 1,\n        end = settings.fnDisplayEnd(),\n        max = settings.fnRecordsTotal(),\n        total = settings.fnRecordsDisplay(),\n        out = total ? lang.sInfo : lang.sInfoEmpty;\n\n    if (total !== max) {\n      /* Record set after filtering */\n      out += ' ' + lang.sInfoFiltered;\n    } // Convert the macros\n\n\n    out += lang.sInfoPostFix;\n    out = _fnInfoMacros(settings, out);\n    var callback = lang.fnInfoCallback;\n\n    if (callback !== null) {\n      out = callback.call(settings.oInstance, settings, start, end, max, total, out);\n    }\n\n    $(nodes).html(out);\n  }\n\n  function _fnInfoMacros(settings, str) {\n    // When infinite scrolling, we are always starting at 1. _iDisplayStart is used only\n    // internally\n    var formatter = settings.fnFormatNumber,\n        start = settings._iDisplayStart + 1,\n        len = settings._iDisplayLength,\n        vis = settings.fnRecordsDisplay(),\n        all = len === -1;\n    return str.replace(/_START_/g, formatter.call(settings, start)).replace(/_END_/g, formatter.call(settings, settings.fnDisplayEnd())).replace(/_MAX_/g, formatter.call(settings, settings.fnRecordsTotal())).replace(/_TOTAL_/g, formatter.call(settings, vis)).replace(/_PAGE_/g, formatter.call(settings, all ? 1 : Math.ceil(start / len))).replace(/_PAGES_/g, formatter.call(settings, all ? 1 : Math.ceil(vis / len)));\n  }\n  /**\n   * Draw the table for the first time, adding all required features\n   *  @param {object} settings dataTables settings object\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnInitialise(settings) {\n    var i,\n        iLen,\n        iAjaxStart = settings.iInitDisplayStart;\n    var columns = settings.aoColumns,\n        column;\n    var features = settings.oFeatures;\n    var deferLoading = settings.bDeferLoading; // value modified by the draw\n\n    /* Ensure that the table data is fully initialised */\n\n    if (!settings.bInitialised) {\n      setTimeout(function () {\n        _fnInitialise(settings);\n      }, 200);\n      return;\n    }\n    /* Show the display HTML options */\n\n\n    _fnAddOptionsHtml(settings);\n    /* Build and draw the header / footer for the table */\n\n\n    _fnBuildHead(settings);\n\n    _fnDrawHead(settings, settings.aoHeader);\n\n    _fnDrawHead(settings, settings.aoFooter);\n    /* Okay to show that something is going on now */\n\n\n    _fnProcessingDisplay(settings, true);\n    /* Calculate sizes for columns */\n\n\n    if (features.bAutoWidth) {\n      _fnCalculateColumnWidths(settings);\n    }\n\n    for (i = 0, iLen = columns.length; i < iLen; i++) {\n      column = columns[i];\n\n      if (column.sWidth) {\n        column.nTh.style.width = _fnStringToCss(column.sWidth);\n      }\n    }\n\n    _fnCallbackFire(settings, null, 'preInit', [settings]); // If there is default sorting required - let's do it. The sort function\n    // will do the drawing for us. Otherwise we draw the table regardless of the\n    // Ajax source - this allows the table to look initialised for Ajax sourcing\n    // data (show 'loading' message possibly)\n\n\n    _fnReDraw(settings); // Server-side processing init complete is done by _fnAjaxUpdateDraw\n\n\n    var dataSrc = _fnDataSource(settings);\n\n    if (dataSrc != 'ssp' || deferLoading) {\n      // if there is an ajax source load the data\n      if (dataSrc == 'ajax') {\n        _fnBuildAjax(settings, [], function (json) {\n          var aData = _fnAjaxDataSrc(settings, json); // Got the data - add it to the table\n\n\n          for (i = 0; i < aData.length; i++) {\n            _fnAddData(settings, aData[i]);\n          } // Reset the init display for cookie saving. We've already done\n          // a filter, and therefore cleared it before. So we need to make\n          // it appear 'fresh'\n\n\n          settings.iInitDisplayStart = iAjaxStart;\n\n          _fnReDraw(settings);\n\n          _fnProcessingDisplay(settings, false);\n\n          _fnInitComplete(settings, json);\n        }, settings);\n      } else {\n        _fnProcessingDisplay(settings, false);\n\n        _fnInitComplete(settings);\n      }\n    }\n  }\n  /**\n   * Draw the table for the first time, adding all required features\n   *  @param {object} oSettings dataTables settings object\n   *  @param {object} [json] JSON from the server that completed the table, if using Ajax source\n   *    with client-side processing (optional)\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnInitComplete(settings, json) {\n    settings._bInitComplete = true; // When data was added after the initialisation (data or Ajax) we need to\n    // calculate the column sizing\n\n    if (json || settings.oInit.aaData) {\n      _fnAdjustColumnSizing(settings);\n    }\n\n    _fnCallbackFire(settings, null, 'plugin-init', [settings, json]);\n\n    _fnCallbackFire(settings, 'aoInitComplete', 'init', [settings, json]);\n  }\n\n  function _fnLengthChange(settings, val) {\n    var len = parseInt(val, 10);\n    settings._iDisplayLength = len;\n\n    _fnLengthOverflow(settings); // Fire length change event\n\n\n    _fnCallbackFire(settings, null, 'length', [settings, len]);\n  }\n  /**\n   * Generate the node required for user display length changing\n   *  @param {object} settings dataTables settings object\n   *  @returns {node} Display length feature node\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnFeatureHtmlLength(settings) {\n    var classes = settings.oClasses,\n        tableId = settings.sTableId,\n        menu = settings.aLengthMenu,\n        d2 = $.isArray(menu[0]),\n        lengths = d2 ? menu[0] : menu,\n        language = d2 ? menu[1] : menu;\n    var select = $('<select/>', {\n      'name': tableId + '_length',\n      'aria-controls': tableId,\n      'class': classes.sLengthSelect\n    });\n\n    for (var i = 0, ien = lengths.length; i < ien; i++) {\n      select[0][i] = new Option(typeof language[i] === 'number' ? settings.fnFormatNumber(language[i]) : language[i], lengths[i]);\n    }\n\n    var div = $('<div><label/></div>').addClass(classes.sLength);\n\n    if (!settings.aanFeatures.l) {\n      div[0].id = tableId + '_length';\n    }\n\n    div.children().append(settings.oLanguage.sLengthMenu.replace('_MENU_', select[0].outerHTML)); // Can't use `select` variable as user might provide their own and the\n    // reference is broken by the use of outerHTML\n\n    $('select', div).val(settings._iDisplayLength).on('change.DT', function (e) {\n      _fnLengthChange(settings, $(this).val());\n\n      _fnDraw(settings);\n    }); // Update node value whenever anything changes the table's length\n\n    $(settings.nTable).on('length.dt.DT', function (e, s, len) {\n      if (settings === s) {\n        $('select', div).val(len);\n      }\n    });\n    return div[0];\n  }\n  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n   * Note that most of the paging logic is done in\n   * DataTable.ext.pager\n   */\n\n  /**\n   * Generate the node required for default pagination\n   *  @param {object} oSettings dataTables settings object\n   *  @returns {node} Pagination feature node\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnFeatureHtmlPaginate(settings) {\n    var type = settings.sPaginationType,\n        plugin = DataTable.ext.pager[type],\n        modern = typeof plugin === 'function',\n        redraw = function (settings) {\n      _fnDraw(settings);\n    },\n        node = $('<div/>').addClass(settings.oClasses.sPaging + type)[0],\n        features = settings.aanFeatures;\n\n    if (!modern) {\n      plugin.fnInit(settings, node, redraw);\n    }\n    /* Add a draw callback for the pagination on first instance, to update the paging display */\n\n\n    if (!features.p) {\n      node.id = settings.sTableId + '_paginate';\n      settings.aoDrawCallback.push({\n        \"fn\": function (settings) {\n          if (modern) {\n            var start = settings._iDisplayStart,\n                len = settings._iDisplayLength,\n                visRecords = settings.fnRecordsDisplay(),\n                all = len === -1,\n                page = all ? 0 : Math.ceil(start / len),\n                pages = all ? 1 : Math.ceil(visRecords / len),\n                buttons = plugin(page, pages),\n                i,\n                ien;\n\n            for (i = 0, ien = features.p.length; i < ien; i++) {\n              _fnRenderer(settings, 'pageButton')(settings, features.p[i], i, buttons, page, pages);\n            }\n          } else {\n            plugin.fnUpdate(settings, redraw);\n          }\n        },\n        \"sName\": \"pagination\"\n      });\n    }\n\n    return node;\n  }\n  /**\n   * Alter the display settings to change the page\n   *  @param {object} settings DataTables settings object\n   *  @param {string|int} action Paging action to take: \"first\", \"previous\",\n   *    \"next\" or \"last\" or page number to jump to (integer)\n   *  @param [bool] redraw Automatically draw the update or not\n   *  @returns {bool} true page has changed, false - no change\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnPageChange(settings, action, redraw) {\n    var start = settings._iDisplayStart,\n        len = settings._iDisplayLength,\n        records = settings.fnRecordsDisplay();\n\n    if (records === 0 || len === -1) {\n      start = 0;\n    } else if (typeof action === \"number\") {\n      start = action * len;\n\n      if (start > records) {\n        start = 0;\n      }\n    } else if (action == \"first\") {\n      start = 0;\n    } else if (action == \"previous\") {\n      start = len >= 0 ? start - len : 0;\n\n      if (start < 0) {\n        start = 0;\n      }\n    } else if (action == \"next\") {\n      if (start + len < records) {\n        start += len;\n      }\n    } else if (action == \"last\") {\n      start = Math.floor((records - 1) / len) * len;\n    } else {\n      _fnLog(settings, 0, \"Unknown paging action: \" + action, 5);\n    }\n\n    var changed = settings._iDisplayStart !== start;\n    settings._iDisplayStart = start;\n\n    if (changed) {\n      _fnCallbackFire(settings, null, 'page', [settings]);\n\n      if (redraw) {\n        _fnDraw(settings);\n      }\n    }\n\n    return changed;\n  }\n  /**\n   * Generate the node required for the processing node\n   *  @param {object} settings dataTables settings object\n   *  @returns {node} Processing element\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnFeatureHtmlProcessing(settings) {\n    return $('<div/>', {\n      'id': !settings.aanFeatures.r ? settings.sTableId + '_processing' : null,\n      'class': settings.oClasses.sProcessing\n    }).html(settings.oLanguage.sProcessing).insertBefore(settings.nTable)[0];\n  }\n  /**\n   * Display or hide the processing indicator\n   *  @param {object} settings dataTables settings object\n   *  @param {bool} show Show the processing indicator (true) or not (false)\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnProcessingDisplay(settings, show) {\n    if (settings.oFeatures.bProcessing) {\n      $(settings.aanFeatures.r).css('display', show ? 'block' : 'none');\n    }\n\n    _fnCallbackFire(settings, null, 'processing', [settings, show]);\n  }\n  /**\n   * Add any control elements for the table - specifically scrolling\n   *  @param {object} settings dataTables settings object\n   *  @returns {node} Node to add to the DOM\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnFeatureHtmlTable(settings) {\n    var table = $(settings.nTable); // Add the ARIA grid role to the table\n\n    table.attr('role', 'grid'); // Scrolling from here on in\n\n    var scroll = settings.oScroll;\n\n    if (scroll.sX === '' && scroll.sY === '') {\n      return settings.nTable;\n    }\n\n    var scrollX = scroll.sX;\n    var scrollY = scroll.sY;\n    var classes = settings.oClasses;\n    var caption = table.children('caption');\n    var captionSide = caption.length ? caption[0]._captionSide : null;\n    var headerClone = $(table[0].cloneNode(false));\n    var footerClone = $(table[0].cloneNode(false));\n    var footer = table.children('tfoot');\n    var _div = '<div/>';\n\n    var size = function (s) {\n      return !s ? null : _fnStringToCss(s);\n    };\n\n    if (!footer.length) {\n      footer = null;\n    }\n    /*\n     * The HTML structure that we want to generate in this function is:\n     *  div - scroller\n     *    div - scroll head\n     *      div - scroll head inner\n     *        table - scroll head table\n     *          thead - thead\n     *    div - scroll body\n     *      table - table (master table)\n     *        thead - thead clone for sizing\n     *        tbody - tbody\n     *    div - scroll foot\n     *      div - scroll foot inner\n     *        table - scroll foot table\n     *          tfoot - tfoot\n     */\n\n\n    var scroller = $(_div, {\n      'class': classes.sScrollWrapper\n    }).append($(_div, {\n      'class': classes.sScrollHead\n    }).css({\n      overflow: 'hidden',\n      position: 'relative',\n      border: 0,\n      width: scrollX ? size(scrollX) : '100%'\n    }).append($(_div, {\n      'class': classes.sScrollHeadInner\n    }).css({\n      'box-sizing': 'content-box',\n      width: scroll.sXInner || '100%'\n    }).append(headerClone.removeAttr('id').css('margin-left', 0).append(captionSide === 'top' ? caption : null).append(table.children('thead'))))).append($(_div, {\n      'class': classes.sScrollBody\n    }).css({\n      position: 'relative',\n      overflow: 'auto',\n      width: size(scrollX)\n    }).append(table));\n\n    if (footer) {\n      scroller.append($(_div, {\n        'class': classes.sScrollFoot\n      }).css({\n        overflow: 'hidden',\n        border: 0,\n        width: scrollX ? size(scrollX) : '100%'\n      }).append($(_div, {\n        'class': classes.sScrollFootInner\n      }).append(footerClone.removeAttr('id').css('margin-left', 0).append(captionSide === 'bottom' ? caption : null).append(table.children('tfoot')))));\n    }\n\n    var children = scroller.children();\n    var scrollHead = children[0];\n    var scrollBody = children[1];\n    var scrollFoot = footer ? children[2] : null; // When the body is scrolled, then we also want to scroll the headers\n\n    if (scrollX) {\n      $(scrollBody).on('scroll.DT', function (e) {\n        var scrollLeft = this.scrollLeft;\n        scrollHead.scrollLeft = scrollLeft;\n\n        if (footer) {\n          scrollFoot.scrollLeft = scrollLeft;\n        }\n      });\n    }\n\n    $(scrollBody).css('max-height', scrollY);\n\n    if (!scroll.bCollapse) {\n      $(scrollBody).css('height', scrollY);\n    }\n\n    settings.nScrollHead = scrollHead;\n    settings.nScrollBody = scrollBody;\n    settings.nScrollFoot = scrollFoot; // On redraw - align columns\n\n    settings.aoDrawCallback.push({\n      \"fn\": _fnScrollDraw,\n      \"sName\": \"scrolling\"\n    });\n    return scroller[0];\n  }\n  /**\n   * Update the header, footer and body tables for resizing - i.e. column\n   * alignment.\n   *\n   * Welcome to the most horrible function DataTables. The process that this\n   * function follows is basically:\n   *   1. Re-create the table inside the scrolling div\n   *   2. Take live measurements from the DOM\n   *   3. Apply the measurements to align the columns\n   *   4. Clean up\n   *\n   *  @param {object} settings dataTables settings object\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnScrollDraw(settings) {\n    // Given that this is such a monster function, a lot of variables are use\n    // to try and keep the minimised size as small as possible\n    var scroll = settings.oScroll,\n        scrollX = scroll.sX,\n        scrollXInner = scroll.sXInner,\n        scrollY = scroll.sY,\n        barWidth = scroll.iBarWidth,\n        divHeader = $(settings.nScrollHead),\n        divHeaderStyle = divHeader[0].style,\n        divHeaderInner = divHeader.children('div'),\n        divHeaderInnerStyle = divHeaderInner[0].style,\n        divHeaderTable = divHeaderInner.children('table'),\n        divBodyEl = settings.nScrollBody,\n        divBody = $(divBodyEl),\n        divBodyStyle = divBodyEl.style,\n        divFooter = $(settings.nScrollFoot),\n        divFooterInner = divFooter.children('div'),\n        divFooterTable = divFooterInner.children('table'),\n        header = $(settings.nTHead),\n        table = $(settings.nTable),\n        tableEl = table[0],\n        tableStyle = tableEl.style,\n        footer = settings.nTFoot ? $(settings.nTFoot) : null,\n        browser = settings.oBrowser,\n        ie67 = browser.bScrollOversize,\n        dtHeaderCells = _pluck(settings.aoColumns, 'nTh'),\n        headerTrgEls,\n        footerTrgEls,\n        headerSrcEls,\n        footerSrcEls,\n        headerCopy,\n        footerCopy,\n        headerWidths = [],\n        footerWidths = [],\n        headerContent = [],\n        footerContent = [],\n        idx,\n        correction,\n        sanityWidth,\n        zeroOut = function (nSizer) {\n      var style = nSizer.style;\n      style.paddingTop = \"0\";\n      style.paddingBottom = \"0\";\n      style.borderTopWidth = \"0\";\n      style.borderBottomWidth = \"0\";\n      style.height = 0;\n    }; // If the scrollbar visibility has changed from the last draw, we need to\n    // adjust the column sizes as the table width will have changed to account\n    // for the scrollbar\n\n\n    var scrollBarVis = divBodyEl.scrollHeight > divBodyEl.clientHeight;\n\n    if (settings.scrollBarVis !== scrollBarVis && settings.scrollBarVis !== undefined) {\n      settings.scrollBarVis = scrollBarVis;\n\n      _fnAdjustColumnSizing(settings);\n\n      return; // adjust column sizing will call this function again\n    } else {\n      settings.scrollBarVis = scrollBarVis;\n    }\n    /*\n     * 1. Re-create the table inside the scrolling div\n     */\n    // Remove the old minimised thead and tfoot elements in the inner table\n\n\n    table.children('thead, tfoot').remove();\n\n    if (footer) {\n      footerCopy = footer.clone().prependTo(table);\n      footerTrgEls = footer.find('tr'); // the original tfoot is in its own table and must be sized\n\n      footerSrcEls = footerCopy.find('tr');\n    } // Clone the current header and footer elements and then place it into the inner table\n\n\n    headerCopy = header.clone().prependTo(table);\n    headerTrgEls = header.find('tr'); // original header is in its own table\n\n    headerSrcEls = headerCopy.find('tr');\n    headerCopy.find('th, td').removeAttr('tabindex');\n    /*\n     * 2. Take live measurements from the DOM - do not alter the DOM itself!\n     */\n    // Remove old sizing and apply the calculated column widths\n    // Get the unique column headers in the newly created (cloned) header. We want to apply the\n    // calculated sizes to this header\n\n    if (!scrollX) {\n      divBodyStyle.width = '100%';\n      divHeader[0].style.width = '100%';\n    }\n\n    $.each(_fnGetUniqueThs(settings, headerCopy), function (i, el) {\n      idx = _fnVisibleToColumnIndex(settings, i);\n      el.style.width = settings.aoColumns[idx].sWidth;\n    });\n\n    if (footer) {\n      _fnApplyToChildren(function (n) {\n        n.style.width = \"\";\n      }, footerSrcEls);\n    } // Size the table as a whole\n\n\n    sanityWidth = table.outerWidth();\n\n    if (scrollX === \"\") {\n      // No x scrolling\n      tableStyle.width = \"100%\"; // IE7 will make the width of the table when 100% include the scrollbar\n      // - which is shouldn't. When there is a scrollbar we need to take this\n      // into account.\n\n      if (ie67 && (table.find('tbody').height() > divBodyEl.offsetHeight || divBody.css('overflow-y') == \"scroll\")) {\n        tableStyle.width = _fnStringToCss(table.outerWidth() - barWidth);\n      } // Recalculate the sanity width\n\n\n      sanityWidth = table.outerWidth();\n    } else if (scrollXInner !== \"\") {\n      // legacy x scroll inner has been given - use it\n      tableStyle.width = _fnStringToCss(scrollXInner); // Recalculate the sanity width\n\n      sanityWidth = table.outerWidth();\n    } // Hidden header should have zero height, so remove padding and borders. Then\n    // set the width based on the real headers\n    // Apply all styles in one pass\n\n\n    _fnApplyToChildren(zeroOut, headerSrcEls); // Read all widths in next pass\n\n\n    _fnApplyToChildren(function (nSizer) {\n      headerContent.push(nSizer.innerHTML);\n      headerWidths.push(_fnStringToCss($(nSizer).css('width')));\n    }, headerSrcEls); // Apply all widths in final pass\n\n\n    _fnApplyToChildren(function (nToSize, i) {\n      // Only apply widths to the DataTables detected header cells - this\n      // prevents complex headers from having contradictory sizes applied\n      if ($.inArray(nToSize, dtHeaderCells) !== -1) {\n        nToSize.style.width = headerWidths[i];\n      }\n    }, headerTrgEls);\n\n    $(headerSrcEls).height(0);\n    /* Same again with the footer if we have one */\n\n    if (footer) {\n      _fnApplyToChildren(zeroOut, footerSrcEls);\n\n      _fnApplyToChildren(function (nSizer) {\n        footerContent.push(nSizer.innerHTML);\n        footerWidths.push(_fnStringToCss($(nSizer).css('width')));\n      }, footerSrcEls);\n\n      _fnApplyToChildren(function (nToSize, i) {\n        nToSize.style.width = footerWidths[i];\n      }, footerTrgEls);\n\n      $(footerSrcEls).height(0);\n    }\n    /*\n     * 3. Apply the measurements\n     */\n    // \"Hide\" the header and footer that we used for the sizing. We need to keep\n    // the content of the cell so that the width applied to the header and body\n    // both match, but we want to hide it completely. We want to also fix their\n    // width to what they currently are\n\n\n    _fnApplyToChildren(function (nSizer, i) {\n      nSizer.innerHTML = '<div class=\"dataTables_sizing\">' + headerContent[i] + '</div>';\n      nSizer.childNodes[0].style.height = \"0\";\n      nSizer.childNodes[0].style.overflow = \"hidden\";\n      nSizer.style.width = headerWidths[i];\n    }, headerSrcEls);\n\n    if (footer) {\n      _fnApplyToChildren(function (nSizer, i) {\n        nSizer.innerHTML = '<div class=\"dataTables_sizing\">' + footerContent[i] + '</div>';\n        nSizer.childNodes[0].style.height = \"0\";\n        nSizer.childNodes[0].style.overflow = \"hidden\";\n        nSizer.style.width = footerWidths[i];\n      }, footerSrcEls);\n    } // Sanity check that the table is of a sensible width. If not then we are going to get\n    // misalignment - try to prevent this by not allowing the table to shrink below its min width\n\n\n    if (table.outerWidth() < sanityWidth) {\n      // The min width depends upon if we have a vertical scrollbar visible or not */\n      correction = divBodyEl.scrollHeight > divBodyEl.offsetHeight || divBody.css('overflow-y') == \"scroll\" ? sanityWidth + barWidth : sanityWidth; // IE6/7 are a law unto themselves...\n\n      if (ie67 && (divBodyEl.scrollHeight > divBodyEl.offsetHeight || divBody.css('overflow-y') == \"scroll\")) {\n        tableStyle.width = _fnStringToCss(correction - barWidth);\n      } // And give the user a warning that we've stopped the table getting too small\n\n\n      if (scrollX === \"\" || scrollXInner !== \"\") {\n        _fnLog(settings, 1, 'Possible column misalignment', 6);\n      }\n    } else {\n      correction = '100%';\n    } // Apply to the container elements\n\n\n    divBodyStyle.width = _fnStringToCss(correction);\n    divHeaderStyle.width = _fnStringToCss(correction);\n\n    if (footer) {\n      settings.nScrollFoot.style.width = _fnStringToCss(correction);\n    }\n    /*\n     * 4. Clean up\n     */\n\n\n    if (!scrollY) {\n      /* IE7< puts a vertical scrollbar in place (when it shouldn't be) due to subtracting\n       * the scrollbar height from the visible display, rather than adding it on. We need to\n       * set the height in order to sort this. Don't want to do it in any other browsers.\n       */\n      if (ie67) {\n        divBodyStyle.height = _fnStringToCss(tableEl.offsetHeight + barWidth);\n      }\n    }\n    /* Finally set the width's of the header and footer tables */\n\n\n    var iOuterWidth = table.outerWidth();\n    divHeaderTable[0].style.width = _fnStringToCss(iOuterWidth);\n    divHeaderInnerStyle.width = _fnStringToCss(iOuterWidth); // Figure out if there are scrollbar present - if so then we need a the header and footer to\n    // provide a bit more space to allow \"overflow\" scrolling (i.e. past the scrollbar)\n\n    var bScrolling = table.height() > divBodyEl.clientHeight || divBody.css('overflow-y') == \"scroll\";\n    var padding = 'padding' + (browser.bScrollbarLeft ? 'Left' : 'Right');\n    divHeaderInnerStyle[padding] = bScrolling ? barWidth + \"px\" : \"0px\";\n\n    if (footer) {\n      divFooterTable[0].style.width = _fnStringToCss(iOuterWidth);\n      divFooterInner[0].style.width = _fnStringToCss(iOuterWidth);\n      divFooterInner[0].style[padding] = bScrolling ? barWidth + \"px\" : \"0px\";\n    } // Correct DOM ordering for colgroup - comes before the thead\n\n\n    table.children('colgroup').insertBefore(table.children('thead'));\n    /* Adjust the position of the header in case we loose the y-scrollbar */\n\n    divBody.trigger('scroll'); // If sorting or filtering has occurred, jump the scrolling back to the top\n    // only if we aren't holding the position\n\n    if ((settings.bSorted || settings.bFiltered) && !settings._drawHold) {\n      divBodyEl.scrollTop = 0;\n    }\n  }\n  /**\n   * Apply a given function to the display child nodes of an element array (typically\n   * TD children of TR rows\n   *  @param {function} fn Method to apply to the objects\n   *  @param array {nodes} an1 List of elements to look through for display children\n   *  @param array {nodes} an2 Another list (identical structure to the first) - optional\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnApplyToChildren(fn, an1, an2) {\n    var index = 0,\n        i = 0,\n        iLen = an1.length;\n    var nNode1, nNode2;\n\n    while (i < iLen) {\n      nNode1 = an1[i].firstChild;\n      nNode2 = an2 ? an2[i].firstChild : null;\n\n      while (nNode1) {\n        if (nNode1.nodeType === 1) {\n          if (an2) {\n            fn(nNode1, nNode2, index);\n          } else {\n            fn(nNode1, index);\n          }\n\n          index++;\n        }\n\n        nNode1 = nNode1.nextSibling;\n        nNode2 = an2 ? nNode2.nextSibling : null;\n      }\n\n      i++;\n    }\n  }\n\n  var __re_html_remove = /<.*?>/g;\n  /**\n   * Calculate the width of columns for the table\n   *  @param {object} oSettings dataTables settings object\n   *  @memberof DataTable#oApi\n   */\n\n  function _fnCalculateColumnWidths(oSettings) {\n    var table = oSettings.nTable,\n        columns = oSettings.aoColumns,\n        scroll = oSettings.oScroll,\n        scrollY = scroll.sY,\n        scrollX = scroll.sX,\n        scrollXInner = scroll.sXInner,\n        columnCount = columns.length,\n        visibleColumns = _fnGetColumns(oSettings, 'bVisible'),\n        headerCells = $('th', oSettings.nTHead),\n        tableWidthAttr = table.getAttribute('width'),\n        // from DOM element\n    tableContainer = table.parentNode,\n        userInputs = false,\n        i,\n        column,\n        columnIdx,\n        width,\n        outerWidth,\n        browser = oSettings.oBrowser,\n        ie67 = browser.bScrollOversize;\n\n    var styleWidth = table.style.width;\n\n    if (styleWidth && styleWidth.indexOf('%') !== -1) {\n      tableWidthAttr = styleWidth;\n    }\n    /* Convert any user input sizes into pixel sizes */\n\n\n    for (i = 0; i < visibleColumns.length; i++) {\n      column = columns[visibleColumns[i]];\n\n      if (column.sWidth !== null) {\n        column.sWidth = _fnConvertToWidth(column.sWidthOrig, tableContainer);\n        userInputs = true;\n      }\n    }\n    /* If the number of columns in the DOM equals the number that we have to\n     * process in DataTables, then we can use the offsets that are created by\n     * the web- browser. No custom sizes can be set in order for this to happen,\n     * nor scrolling used\n     */\n\n\n    if (ie67 || !userInputs && !scrollX && !scrollY && columnCount == _fnVisbleColumns(oSettings) && columnCount == headerCells.length) {\n      for (i = 0; i < columnCount; i++) {\n        var colIdx = _fnVisibleToColumnIndex(oSettings, i);\n\n        if (colIdx !== null) {\n          columns[colIdx].sWidth = _fnStringToCss(headerCells.eq(i).width());\n        }\n      }\n    } else {\n      // Otherwise construct a single row, worst case, table with the widest\n      // node in the data, assign any user defined widths, then insert it into\n      // the DOM and allow the browser to do all the hard work of calculating\n      // table widths\n      var tmpTable = $(table).clone() // don't use cloneNode - IE8 will remove events on the main table\n      .css('visibility', 'hidden').removeAttr('id'); // Clean up the table body\n\n      tmpTable.find('tbody tr').remove();\n      var tr = $('<tr/>').appendTo(tmpTable.find('tbody')); // Clone the table header and footer - we can't use the header / footer\n      // from the cloned table, since if scrolling is active, the table's\n      // real header and footer are contained in different table tags\n\n      tmpTable.find('thead, tfoot').remove();\n      tmpTable.append($(oSettings.nTHead).clone()).append($(oSettings.nTFoot).clone()); // Remove any assigned widths from the footer (from scrolling)\n\n      tmpTable.find('tfoot th, tfoot td').css('width', ''); // Apply custom sizing to the cloned header\n\n      headerCells = _fnGetUniqueThs(oSettings, tmpTable.find('thead')[0]);\n\n      for (i = 0; i < visibleColumns.length; i++) {\n        column = columns[visibleColumns[i]];\n        headerCells[i].style.width = column.sWidthOrig !== null && column.sWidthOrig !== '' ? _fnStringToCss(column.sWidthOrig) : ''; // For scrollX we need to force the column width otherwise the\n        // browser will collapse it. If this width is smaller than the\n        // width the column requires, then it will have no effect\n\n        if (column.sWidthOrig && scrollX) {\n          $(headerCells[i]).append($('<div/>').css({\n            width: column.sWidthOrig,\n            margin: 0,\n            padding: 0,\n            border: 0,\n            height: 1\n          }));\n        }\n      } // Find the widest cell for each column and put it into the table\n\n\n      if (oSettings.aoData.length) {\n        for (i = 0; i < visibleColumns.length; i++) {\n          columnIdx = visibleColumns[i];\n          column = columns[columnIdx];\n          $(_fnGetWidestNode(oSettings, columnIdx)).clone(false).append(column.sContentPadding).appendTo(tr);\n        }\n      } // Tidy the temporary table - remove name attributes so there aren't\n      // duplicated in the dom (radio elements for example)\n\n\n      $('[name]', tmpTable).removeAttr('name'); // Table has been built, attach to the document so we can work with it.\n      // A holding element is used, positioned at the top of the container\n      // with minimal height, so it has no effect on if the container scrolls\n      // or not. Otherwise it might trigger scrolling when it actually isn't\n      // needed\n\n      var holder = $('<div/>').css(scrollX || scrollY ? {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        height: 1,\n        right: 0,\n        overflow: 'hidden'\n      } : {}).append(tmpTable).appendTo(tableContainer); // When scrolling (X or Y) we want to set the width of the table as \n      // appropriate. However, when not scrolling leave the table width as it\n      // is. This results in slightly different, but I think correct behaviour\n\n      if (scrollX && scrollXInner) {\n        tmpTable.width(scrollXInner);\n      } else if (scrollX) {\n        tmpTable.css('width', 'auto');\n        tmpTable.removeAttr('width'); // If there is no width attribute or style, then allow the table to\n        // collapse\n\n        if (tmpTable.width() < tableContainer.clientWidth && tableWidthAttr) {\n          tmpTable.width(tableContainer.clientWidth);\n        }\n      } else if (scrollY) {\n        tmpTable.width(tableContainer.clientWidth);\n      } else if (tableWidthAttr) {\n        tmpTable.width(tableWidthAttr);\n      } // Get the width of each column in the constructed table - we need to\n      // know the inner width (so it can be assigned to the other table's\n      // cells) and the outer width so we can calculate the full width of the\n      // table. This is safe since DataTables requires a unique cell for each\n      // column, but if ever a header can span multiple columns, this will\n      // need to be modified.\n\n\n      var total = 0;\n\n      for (i = 0; i < visibleColumns.length; i++) {\n        var cell = $(headerCells[i]);\n        var border = cell.outerWidth() - cell.width(); // Use getBounding... where possible (not IE8-) because it can give\n        // sub-pixel accuracy, which we then want to round up!\n\n        var bounding = browser.bBounding ? Math.ceil(headerCells[i].getBoundingClientRect().width) : cell.outerWidth(); // Total is tracked to remove any sub-pixel errors as the outerWidth\n        // of the table might not equal the total given here (IE!).\n\n        total += bounding; // Width for each column to use\n\n        columns[visibleColumns[i]].sWidth = _fnStringToCss(bounding - border);\n      }\n\n      table.style.width = _fnStringToCss(total); // Finished with the table - ditch it\n\n      holder.remove();\n    } // If there is a width attr, we want to attach an event listener which\n    // allows the table sizing to automatically adjust when the window is\n    // resized. Use the width attr rather than CSS, since we can't know if the\n    // CSS is a relative value or absolute - DOM read is always px.\n\n\n    if (tableWidthAttr) {\n      table.style.width = _fnStringToCss(tableWidthAttr);\n    }\n\n    if ((tableWidthAttr || scrollX) && !oSettings._reszEvt) {\n      var bindResize = function () {\n        $(window).on('resize.DT-' + oSettings.sInstance, _fnThrottle(function () {\n          _fnAdjustColumnSizing(oSettings);\n        }));\n      }; // IE6/7 will crash if we bind a resize event handler on page load.\n      // To be removed in 1.11 which drops IE6/7 support\n\n\n      if (ie67) {\n        setTimeout(bindResize, 1000);\n      } else {\n        bindResize();\n      }\n\n      oSettings._reszEvt = true;\n    }\n  }\n  /**\n   * Throttle the calls to a function. Arguments and context are maintained for\n   * the throttled function\n   *  @param {function} fn Function to be called\n   *  @param {int} [freq=200] call frequency in mS\n   *  @returns {function} wrapped function\n   *  @memberof DataTable#oApi\n   */\n\n\n  var _fnThrottle = DataTable.util.throttle;\n  /**\n   * Convert a CSS unit width to pixels (e.g. 2em)\n   *  @param {string} width width to be converted\n   *  @param {node} parent parent to get the with for (required for relative widths) - optional\n   *  @returns {int} width in pixels\n   *  @memberof DataTable#oApi\n   */\n\n  function _fnConvertToWidth(width, parent) {\n    if (!width) {\n      return 0;\n    }\n\n    var n = $('<div/>').css('width', _fnStringToCss(width)).appendTo(parent || document.body);\n    var val = n[0].offsetWidth;\n    n.remove();\n    return val;\n  }\n  /**\n   * Get the widest node\n   *  @param {object} settings dataTables settings object\n   *  @param {int} colIdx column of interest\n   *  @returns {node} widest table node\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnGetWidestNode(settings, colIdx) {\n    var idx = _fnGetMaxLenString(settings, colIdx);\n\n    if (idx < 0) {\n      return null;\n    }\n\n    var data = settings.aoData[idx];\n    return !data.nTr ? // Might not have been created when deferred rendering\n    $('<td/>').html(_fnGetCellData(settings, idx, colIdx, 'display'))[0] : data.anCells[colIdx];\n  }\n  /**\n   * Get the maximum strlen for each data column\n   *  @param {object} settings dataTables settings object\n   *  @param {int} colIdx column of interest\n   *  @returns {string} max string length for each column\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnGetMaxLenString(settings, colIdx) {\n    var s,\n        max = -1,\n        maxIdx = -1;\n\n    for (var i = 0, ien = settings.aoData.length; i < ien; i++) {\n      s = _fnGetCellData(settings, i, colIdx, 'display') + '';\n      s = s.replace(__re_html_remove, '');\n      s = s.replace(/&nbsp;/g, ' ');\n\n      if (s.length > max) {\n        max = s.length;\n        maxIdx = i;\n      }\n    }\n\n    return maxIdx;\n  }\n  /**\n   * Append a CSS unit (only if required) to a string\n   *  @param {string} value to css-ify\n   *  @returns {string} value with css unit\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnStringToCss(s) {\n    if (s === null) {\n      return '0px';\n    }\n\n    if (typeof s == 'number') {\n      return s < 0 ? '0px' : s + 'px';\n    } // Check it has a unit character already\n\n\n    return s.match(/\\d$/) ? s + 'px' : s;\n  }\n\n  function _fnSortFlatten(settings) {\n    var i,\n        iLen,\n        k,\n        kLen,\n        aSort = [],\n        aiOrig = [],\n        aoColumns = settings.aoColumns,\n        aDataSort,\n        iCol,\n        sType,\n        srcCol,\n        fixed = settings.aaSortingFixed,\n        fixedObj = $.isPlainObject(fixed),\n        nestedSort = [],\n        add = function (a) {\n      if (a.length && !$.isArray(a[0])) {\n        // 1D array\n        nestedSort.push(a);\n      } else {\n        // 2D array\n        $.merge(nestedSort, a);\n      }\n    }; // Build the sort array, with pre-fix and post-fix options if they have been\n    // specified\n\n\n    if ($.isArray(fixed)) {\n      add(fixed);\n    }\n\n    if (fixedObj && fixed.pre) {\n      add(fixed.pre);\n    }\n\n    add(settings.aaSorting);\n\n    if (fixedObj && fixed.post) {\n      add(fixed.post);\n    }\n\n    for (i = 0; i < nestedSort.length; i++) {\n      srcCol = nestedSort[i][0];\n      aDataSort = aoColumns[srcCol].aDataSort;\n\n      for (k = 0, kLen = aDataSort.length; k < kLen; k++) {\n        iCol = aDataSort[k];\n        sType = aoColumns[iCol].sType || 'string';\n\n        if (nestedSort[i]._idx === undefined) {\n          nestedSort[i]._idx = $.inArray(nestedSort[i][1], aoColumns[iCol].asSorting);\n        }\n\n        aSort.push({\n          src: srcCol,\n          col: iCol,\n          dir: nestedSort[i][1],\n          index: nestedSort[i]._idx,\n          type: sType,\n          formatter: DataTable.ext.type.order[sType + \"-pre\"]\n        });\n      }\n    }\n\n    return aSort;\n  }\n  /**\n   * Change the order of the table\n   *  @param {object} oSettings dataTables settings object\n   *  @memberof DataTable#oApi\n   *  @todo This really needs split up!\n   */\n\n\n  function _fnSort(oSettings) {\n    var i,\n        ien,\n        iLen,\n        j,\n        jLen,\n        k,\n        kLen,\n        sDataType,\n        nTh,\n        aiOrig = [],\n        oExtSort = DataTable.ext.type.order,\n        aoData = oSettings.aoData,\n        aoColumns = oSettings.aoColumns,\n        aDataSort,\n        data,\n        iCol,\n        sType,\n        oSort,\n        formatters = 0,\n        sortCol,\n        displayMaster = oSettings.aiDisplayMaster,\n        aSort; // Resolve any column types that are unknown due to addition or invalidation\n    // @todo Can this be moved into a 'data-ready' handler which is called when\n    //   data is going to be used in the table?\n\n    _fnColumnTypes(oSettings);\n\n    aSort = _fnSortFlatten(oSettings);\n\n    for (i = 0, ien = aSort.length; i < ien; i++) {\n      sortCol = aSort[i]; // Track if we can use the fast sort algorithm\n\n      if (sortCol.formatter) {\n        formatters++;\n      } // Load the data needed for the sort, for each cell\n\n\n      _fnSortData(oSettings, sortCol.col);\n    }\n    /* No sorting required if server-side or no sorting array */\n\n\n    if (_fnDataSource(oSettings) != 'ssp' && aSort.length !== 0) {\n      // Create a value - key array of the current row positions such that we can use their\n      // current position during the sort, if values match, in order to perform stable sorting\n      for (i = 0, iLen = displayMaster.length; i < iLen; i++) {\n        aiOrig[displayMaster[i]] = i;\n      }\n      /* Do the sort - here we want multi-column sorting based on a given data source (column)\n       * and sorting function (from oSort) in a certain direction. It's reasonably complex to\n       * follow on it's own, but this is what we want (example two column sorting):\n       *  fnLocalSorting = function(a,b){\n       *    var iTest;\n       *    iTest = oSort['string-asc']('data11', 'data12');\n       *      if (iTest !== 0)\n       *        return iTest;\n       *    iTest = oSort['numeric-desc']('data21', 'data22');\n       *    if (iTest !== 0)\n       *      return iTest;\n       *    return oSort['numeric-asc']( aiOrig[a], aiOrig[b] );\n       *  }\n       * Basically we have a test for each sorting column, if the data in that column is equal,\n       * test the next column. If all columns match, then we use a numeric sort on the row\n       * positions in the original data array to provide a stable sort.\n       *\n       * Note - I know it seems excessive to have two sorting methods, but the first is around\n       * 15% faster, so the second is only maintained for backwards compatibility with sorting\n       * methods which do not have a pre-sort formatting function.\n       */\n\n\n      if (formatters === aSort.length) {\n        // All sort types have formatting functions\n        displayMaster.sort(function (a, b) {\n          var x,\n              y,\n              k,\n              test,\n              sort,\n              len = aSort.length,\n              dataA = aoData[a]._aSortData,\n              dataB = aoData[b]._aSortData;\n\n          for (k = 0; k < len; k++) {\n            sort = aSort[k];\n            x = dataA[sort.col];\n            y = dataB[sort.col];\n            test = x < y ? -1 : x > y ? 1 : 0;\n\n            if (test !== 0) {\n              return sort.dir === 'asc' ? test : -test;\n            }\n          }\n\n          x = aiOrig[a];\n          y = aiOrig[b];\n          return x < y ? -1 : x > y ? 1 : 0;\n        });\n      } else {\n        // Depreciated - remove in 1.11 (providing a plug-in option)\n        // Not all sort types have formatting methods, so we have to call their sorting\n        // methods.\n        displayMaster.sort(function (a, b) {\n          var x,\n              y,\n              k,\n              l,\n              test,\n              sort,\n              fn,\n              len = aSort.length,\n              dataA = aoData[a]._aSortData,\n              dataB = aoData[b]._aSortData;\n\n          for (k = 0; k < len; k++) {\n            sort = aSort[k];\n            x = dataA[sort.col];\n            y = dataB[sort.col];\n            fn = oExtSort[sort.type + \"-\" + sort.dir] || oExtSort[\"string-\" + sort.dir];\n            test = fn(x, y);\n\n            if (test !== 0) {\n              return test;\n            }\n          }\n\n          x = aiOrig[a];\n          y = aiOrig[b];\n          return x < y ? -1 : x > y ? 1 : 0;\n        });\n      }\n    }\n    /* Tell the draw function that we have sorted the data */\n\n\n    oSettings.bSorted = true;\n  }\n\n  function _fnSortAria(settings) {\n    var label;\n    var nextSort;\n    var columns = settings.aoColumns;\n\n    var aSort = _fnSortFlatten(settings);\n\n    var oAria = settings.oLanguage.oAria; // ARIA attributes - need to loop all columns, to update all (removing old\n    // attributes as needed)\n\n    for (var i = 0, iLen = columns.length; i < iLen; i++) {\n      var col = columns[i];\n      var asSorting = col.asSorting;\n      var sTitle = col.sTitle.replace(/<.*?>/g, \"\");\n      var th = col.nTh; // IE7 is throwing an error when setting these properties with jQuery's\n      // attr() and removeAttr() methods...\n\n      th.removeAttribute('aria-sort');\n      /* In ARIA only the first sorting column can be marked as sorting - no multi-sort option */\n\n      if (col.bSortable) {\n        if (aSort.length > 0 && aSort[0].col == i) {\n          th.setAttribute('aria-sort', aSort[0].dir == \"asc\" ? \"ascending\" : \"descending\");\n          nextSort = asSorting[aSort[0].index + 1] || asSorting[0];\n        } else {\n          nextSort = asSorting[0];\n        }\n\n        label = sTitle + (nextSort === \"asc\" ? oAria.sSortAscending : oAria.sSortDescending);\n      } else {\n        label = sTitle;\n      }\n\n      th.setAttribute('aria-label', label);\n    }\n  }\n  /**\n   * Function to run on user sort request\n   *  @param {object} settings dataTables settings object\n   *  @param {node} attachTo node to attach the handler to\n   *  @param {int} colIdx column sorting index\n   *  @param {boolean} [append=false] Append the requested sort to the existing\n   *    sort if true (i.e. multi-column sort)\n   *  @param {function} [callback] callback function\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnSortListener(settings, colIdx, append, callback) {\n    var col = settings.aoColumns[colIdx];\n    var sorting = settings.aaSorting;\n    var asSorting = col.asSorting;\n    var nextSortIdx;\n\n    var next = function (a, overflow) {\n      var idx = a._idx;\n\n      if (idx === undefined) {\n        idx = $.inArray(a[1], asSorting);\n      }\n\n      return idx + 1 < asSorting.length ? idx + 1 : overflow ? null : 0;\n    }; // Convert to 2D array if needed\n\n\n    if (typeof sorting[0] === 'number') {\n      sorting = settings.aaSorting = [sorting];\n    } // If appending the sort then we are multi-column sorting\n\n\n    if (append && settings.oFeatures.bSortMulti) {\n      // Are we already doing some kind of sort on this column?\n      var sortIdx = $.inArray(colIdx, _pluck(sorting, '0'));\n\n      if (sortIdx !== -1) {\n        // Yes, modify the sort\n        nextSortIdx = next(sorting[sortIdx], true);\n\n        if (nextSortIdx === null && sorting.length === 1) {\n          nextSortIdx = 0; // can't remove sorting completely\n        }\n\n        if (nextSortIdx === null) {\n          sorting.splice(sortIdx, 1);\n        } else {\n          sorting[sortIdx][1] = asSorting[nextSortIdx];\n          sorting[sortIdx]._idx = nextSortIdx;\n        }\n      } else {\n        // No sort on this column yet\n        sorting.push([colIdx, asSorting[0], 0]);\n        sorting[sorting.length - 1]._idx = 0;\n      }\n    } else if (sorting.length && sorting[0][0] == colIdx) {\n      // Single column - already sorting on this column, modify the sort\n      nextSortIdx = next(sorting[0]);\n      sorting.length = 1;\n      sorting[0][1] = asSorting[nextSortIdx];\n      sorting[0]._idx = nextSortIdx;\n    } else {\n      // Single column - sort only on this column\n      sorting.length = 0;\n      sorting.push([colIdx, asSorting[0]]);\n      sorting[0]._idx = 0;\n    } // Run the sort by calling a full redraw\n\n\n    _fnReDraw(settings); // callback used for async user interaction\n\n\n    if (typeof callback == 'function') {\n      callback(settings);\n    }\n  }\n  /**\n   * Attach a sort handler (click) to a node\n   *  @param {object} settings dataTables settings object\n   *  @param {node} attachTo node to attach the handler to\n   *  @param {int} colIdx column sorting index\n   *  @param {function} [callback] callback function\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnSortAttachListener(settings, attachTo, colIdx, callback) {\n    var col = settings.aoColumns[colIdx];\n\n    _fnBindAction(attachTo, {}, function (e) {\n      /* If the column is not sortable - don't to anything */\n      if (col.bSortable === false) {\n        return;\n      } // If processing is enabled use a timeout to allow the processing\n      // display to be shown - otherwise to it synchronously\n\n\n      if (settings.oFeatures.bProcessing) {\n        _fnProcessingDisplay(settings, true);\n\n        setTimeout(function () {\n          _fnSortListener(settings, colIdx, e.shiftKey, callback); // In server-side processing, the draw callback will remove the\n          // processing display\n\n\n          if (_fnDataSource(settings) !== 'ssp') {\n            _fnProcessingDisplay(settings, false);\n          }\n        }, 0);\n      } else {\n        _fnSortListener(settings, colIdx, e.shiftKey, callback);\n      }\n    });\n  }\n  /**\n   * Set the sorting classes on table's body, Note: it is safe to call this function\n   * when bSort and bSortClasses are false\n   *  @param {object} oSettings dataTables settings object\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnSortingClasses(settings) {\n    var oldSort = settings.aLastSort;\n    var sortClass = settings.oClasses.sSortColumn;\n\n    var sort = _fnSortFlatten(settings);\n\n    var features = settings.oFeatures;\n    var i, ien, colIdx;\n\n    if (features.bSort && features.bSortClasses) {\n      // Remove old sorting classes\n      for (i = 0, ien = oldSort.length; i < ien; i++) {\n        colIdx = oldSort[i].src; // Remove column sorting\n\n        $(_pluck(settings.aoData, 'anCells', colIdx)).removeClass(sortClass + (i < 2 ? i + 1 : 3));\n      } // Add new column sorting\n\n\n      for (i = 0, ien = sort.length; i < ien; i++) {\n        colIdx = sort[i].src;\n        $(_pluck(settings.aoData, 'anCells', colIdx)).addClass(sortClass + (i < 2 ? i + 1 : 3));\n      }\n    }\n\n    settings.aLastSort = sort;\n  } // Get the data to sort a column, be it from cache, fresh (populating the\n  // cache), or from a sort formatter\n\n\n  function _fnSortData(settings, idx) {\n    // Custom sorting function - provided by the sort data type\n    var column = settings.aoColumns[idx];\n    var customSort = DataTable.ext.order[column.sSortDataType];\n    var customData;\n\n    if (customSort) {\n      customData = customSort.call(settings.oInstance, settings, idx, _fnColumnIndexToVisible(settings, idx));\n    } // Use / populate cache\n\n\n    var row, cellData;\n    var formatter = DataTable.ext.type.order[column.sType + \"-pre\"];\n\n    for (var i = 0, ien = settings.aoData.length; i < ien; i++) {\n      row = settings.aoData[i];\n\n      if (!row._aSortData) {\n        row._aSortData = [];\n      }\n\n      if (!row._aSortData[idx] || customSort) {\n        cellData = customSort ? customData[i] : // If there was a custom sort function, use data from there\n        _fnGetCellData(settings, i, idx, 'sort');\n        row._aSortData[idx] = formatter ? formatter(cellData) : cellData;\n      }\n    }\n  }\n  /**\n   * Save the state of a table\n   *  @param {object} oSettings dataTables settings object\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnSaveState(settings) {\n    if (!settings.oFeatures.bStateSave || settings.bDestroying) {\n      return;\n    }\n    /* Store the interesting variables */\n\n\n    var state = {\n      time: +new Date(),\n      start: settings._iDisplayStart,\n      length: settings._iDisplayLength,\n      order: $.extend(true, [], settings.aaSorting),\n      search: _fnSearchToCamel(settings.oPreviousSearch),\n      columns: $.map(settings.aoColumns, function (col, i) {\n        return {\n          visible: col.bVisible,\n          search: _fnSearchToCamel(settings.aoPreSearchCols[i])\n        };\n      })\n    };\n\n    _fnCallbackFire(settings, \"aoStateSaveParams\", 'stateSaveParams', [settings, state]);\n\n    settings.oSavedState = state;\n    settings.fnStateSaveCallback.call(settings.oInstance, settings, state);\n  }\n  /**\n   * Attempt to load a saved table state\n   *  @param {object} oSettings dataTables settings object\n   *  @param {object} oInit DataTables init object so we can override settings\n   *  @param {function} callback Callback to execute when the state has been loaded\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnLoadState(settings, oInit, callback) {\n    var i, ien;\n    var columns = settings.aoColumns;\n\n    var loaded = function (s) {\n      if (!s || !s.time) {\n        callback();\n        return;\n      } // Allow custom and plug-in manipulation functions to alter the saved data set and\n      // cancelling of loading by returning false\n\n\n      var abStateLoad = _fnCallbackFire(settings, 'aoStateLoadParams', 'stateLoadParams', [settings, s]);\n\n      if ($.inArray(false, abStateLoad) !== -1) {\n        callback();\n        return;\n      } // Reject old data\n\n\n      var duration = settings.iStateDuration;\n\n      if (duration > 0 && s.time < +new Date() - duration * 1000) {\n        callback();\n        return;\n      } // Number of columns have changed - all bets are off, no restore of settings\n\n\n      if (s.columns && columns.length !== s.columns.length) {\n        callback();\n        return;\n      } // Store the saved state so it might be accessed at any time\n\n\n      settings.oLoadedState = $.extend(true, {}, s); // Restore key features - todo - for 1.11 this needs to be done by\n      // subscribed events\n\n      if (s.start !== undefined) {\n        settings._iDisplayStart = s.start;\n        settings.iInitDisplayStart = s.start;\n      }\n\n      if (s.length !== undefined) {\n        settings._iDisplayLength = s.length;\n      } // Order\n\n\n      if (s.order !== undefined) {\n        settings.aaSorting = [];\n        $.each(s.order, function (i, col) {\n          settings.aaSorting.push(col[0] >= columns.length ? [0, col[1]] : col);\n        });\n      } // Search\n\n\n      if (s.search !== undefined) {\n        $.extend(settings.oPreviousSearch, _fnSearchToHung(s.search));\n      } // Columns\n      //\n\n\n      if (s.columns) {\n        for (i = 0, ien = s.columns.length; i < ien; i++) {\n          var col = s.columns[i]; // Visibility\n\n          if (col.visible !== undefined) {\n            columns[i].bVisible = col.visible;\n          } // Search\n\n\n          if (col.search !== undefined) {\n            $.extend(settings.aoPreSearchCols[i], _fnSearchToHung(col.search));\n          }\n        }\n      }\n\n      _fnCallbackFire(settings, 'aoStateLoaded', 'stateLoaded', [settings, s]);\n\n      callback();\n    };\n\n    if (!settings.oFeatures.bStateSave) {\n      callback();\n      return;\n    }\n\n    var state = settings.fnStateLoadCallback.call(settings.oInstance, settings, loaded);\n\n    if (state !== undefined) {\n      loaded(state);\n    } // otherwise, wait for the loaded callback to be executed\n\n  }\n  /**\n   * Return the settings object for a particular table\n   *  @param {node} table table we are using as a dataTable\n   *  @returns {object} Settings object - or null if not found\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnSettingsFromNode(table) {\n    var settings = DataTable.settings;\n    var idx = $.inArray(table, _pluck(settings, 'nTable'));\n    return idx !== -1 ? settings[idx] : null;\n  }\n  /**\n   * Log an error message\n   *  @param {object} settings dataTables settings object\n   *  @param {int} level log error messages, or display them to the user\n   *  @param {string} msg error message\n   *  @param {int} tn Technical note id to get more information about the error.\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnLog(settings, level, msg, tn) {\n    msg = 'DataTables warning: ' + (settings ? 'table id=' + settings.sTableId + ' - ' : '') + msg;\n\n    if (tn) {\n      msg += '. For more information about this error, please see ' + 'http://datatables.net/tn/' + tn;\n    }\n\n    if (!level) {\n      // Backwards compatibility pre 1.10\n      var ext = DataTable.ext;\n      var type = ext.sErrMode || ext.errMode;\n\n      if (settings) {\n        _fnCallbackFire(settings, null, 'error', [settings, tn, msg]);\n      }\n\n      if (type == 'alert') {\n        alert(msg);\n      } else if (type == 'throw') {\n        throw new Error(msg);\n      } else if (typeof type == 'function') {\n        type(settings, tn, msg);\n      }\n    } else if (window.console && console.log) {\n      console.log(msg);\n    }\n  }\n  /**\n   * See if a property is defined on one object, if so assign it to the other object\n   *  @param {object} ret target object\n   *  @param {object} src source object\n   *  @param {string} name property\n   *  @param {string} [mappedName] name to map too - optional, name used if not given\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnMap(ret, src, name, mappedName) {\n    if ($.isArray(name)) {\n      $.each(name, function (i, val) {\n        if ($.isArray(val)) {\n          _fnMap(ret, src, val[0], val[1]);\n        } else {\n          _fnMap(ret, src, val);\n        }\n      });\n      return;\n    }\n\n    if (mappedName === undefined) {\n      mappedName = name;\n    }\n\n    if (src[name] !== undefined) {\n      ret[mappedName] = src[name];\n    }\n  }\n  /**\n   * Extend objects - very similar to jQuery.extend, but deep copy objects, and\n   * shallow copy arrays. The reason we need to do this, is that we don't want to\n   * deep copy array init values (such as aaSorting) since the dev wouldn't be\n   * able to override them, but we do want to deep copy arrays.\n   *  @param {object} out Object to extend\n   *  @param {object} extender Object from which the properties will be applied to\n   *      out\n   *  @param {boolean} breakRefs If true, then arrays will be sliced to take an\n   *      independent copy with the exception of the `data` or `aaData` parameters\n   *      if they are present. This is so you can pass in a collection to\n   *      DataTables and have that used as your data source without breaking the\n   *      references\n   *  @returns {object} out Reference, just for convenience - out === the return.\n   *  @memberof DataTable#oApi\n   *  @todo This doesn't take account of arrays inside the deep copied objects.\n   */\n\n\n  function _fnExtend(out, extender, breakRefs) {\n    var val;\n\n    for (var prop in extender) {\n      if (extender.hasOwnProperty(prop)) {\n        val = extender[prop];\n\n        if ($.isPlainObject(val)) {\n          if (!$.isPlainObject(out[prop])) {\n            out[prop] = {};\n          }\n\n          $.extend(true, out[prop], val);\n        } else if (breakRefs && prop !== 'data' && prop !== 'aaData' && $.isArray(val)) {\n          out[prop] = val.slice();\n        } else {\n          out[prop] = val;\n        }\n      }\n    }\n\n    return out;\n  }\n  /**\n   * Bind an event handers to allow a click or return key to activate the callback.\n   * This is good for accessibility since a return on the keyboard will have the\n   * same effect as a click, if the element has focus.\n   *  @param {element} n Element to bind the action to\n   *  @param {object} oData Data object to pass to the triggered function\n   *  @param {function} fn Callback function for when the event is triggered\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnBindAction(n, oData, fn) {\n    $(n).on('click.DT', oData, function (e) {\n      $(n).trigger('blur'); // Remove focus outline for mouse users\n\n      fn(e);\n    }).on('keypress.DT', oData, function (e) {\n      if (e.which === 13) {\n        e.preventDefault();\n        fn(e);\n      }\n    }).on('selectstart.DT', function () {\n      /* Take the brutal approach to cancelling text selection */\n      return false;\n    });\n  }\n  /**\n   * Register a callback function. Easily allows a callback function to be added to\n   * an array store of callback functions that can then all be called together.\n   *  @param {object} oSettings dataTables settings object\n   *  @param {string} sStore Name of the array storage for the callbacks in oSettings\n   *  @param {function} fn Function to be called back\n   *  @param {string} sName Identifying name for the callback (i.e. a label)\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnCallbackReg(oSettings, sStore, fn, sName) {\n    if (fn) {\n      oSettings[sStore].push({\n        \"fn\": fn,\n        \"sName\": sName\n      });\n    }\n  }\n  /**\n   * Fire callback functions and trigger events. Note that the loop over the\n   * callback array store is done backwards! Further note that you do not want to\n   * fire off triggers in time sensitive applications (for example cell creation)\n   * as its slow.\n   *  @param {object} settings dataTables settings object\n   *  @param {string} callbackArr Name of the array storage for the callbacks in\n   *      oSettings\n   *  @param {string} eventName Name of the jQuery custom event to trigger. If\n   *      null no trigger is fired\n   *  @param {array} args Array of arguments to pass to the callback function /\n   *      trigger\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnCallbackFire(settings, callbackArr, eventName, args) {\n    var ret = [];\n\n    if (callbackArr) {\n      ret = $.map(settings[callbackArr].slice().reverse(), function (val, i) {\n        return val.fn.apply(settings.oInstance, args);\n      });\n    }\n\n    if (eventName !== null) {\n      var e = $.Event(eventName + '.dt');\n      $(settings.nTable).trigger(e, args);\n      ret.push(e.result);\n    }\n\n    return ret;\n  }\n\n  function _fnLengthOverflow(settings) {\n    var start = settings._iDisplayStart,\n        end = settings.fnDisplayEnd(),\n        len = settings._iDisplayLength;\n    /* If we have space to show extra rows (backing up from the end point - then do so */\n\n    if (start >= end) {\n      start = end - len;\n    } // Keep the start record on the current page\n\n\n    start -= start % len;\n\n    if (len === -1 || start < 0) {\n      start = 0;\n    }\n\n    settings._iDisplayStart = start;\n  }\n\n  function _fnRenderer(settings, type) {\n    var renderer = settings.renderer;\n    var host = DataTable.ext.renderer[type];\n\n    if ($.isPlainObject(renderer) && renderer[type]) {\n      // Specific renderer for this type. If available use it, otherwise use\n      // the default.\n      return host[renderer[type]] || host._;\n    } else if (typeof renderer === 'string') {\n      // Common renderer - if there is one available for this type use it,\n      // otherwise use the default\n      return host[renderer] || host._;\n    } // Use the default\n\n\n    return host._;\n  }\n  /**\n   * Detect the data source being used for the table. Used to simplify the code\n   * a little (ajax) and to make it compress a little smaller.\n   *\n   *  @param {object} settings dataTables settings object\n   *  @returns {string} Data source\n   *  @memberof DataTable#oApi\n   */\n\n\n  function _fnDataSource(settings) {\n    if (settings.oFeatures.bServerSide) {\n      return 'ssp';\n    } else if (settings.ajax || settings.sAjaxSource) {\n      return 'ajax';\n    }\n\n    return 'dom';\n  }\n  /**\n   * Computed structure of the DataTables API, defined by the options passed to\n   * `DataTable.Api.register()` when building the API.\n   *\n   * The structure is built in order to speed creation and extension of the Api\n   * objects since the extensions are effectively pre-parsed.\n   *\n   * The array is an array of objects with the following structure, where this\n   * base array represents the Api prototype base:\n   *\n   *     [\n   *       {\n   *         name:      'data'                -- string   - Property name\n   *         val:       function () {},       -- function - Api method (or undefined if just an object\n   *         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result\n   *         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property\n   *       },\n   *       {\n   *         name:     'row'\n   *         val:       {},\n   *         methodExt: [ ... ],\n   *         propExt:   [\n   *           {\n   *             name:      'data'\n   *             val:       function () {},\n   *             methodExt: [ ... ],\n   *             propExt:   [ ... ]\n   *           },\n   *           ...\n   *         ]\n   *       }\n   *     ]\n   *\n   * @type {Array}\n   * @ignore\n   */\n\n\n  var __apiStruct = [];\n  /**\n   * `Array.prototype` reference.\n   *\n   * @type object\n   * @ignore\n   */\n\n  var __arrayProto = Array.prototype;\n  /**\n   * Abstraction for `context` parameter of the `Api` constructor to allow it to\n   * take several different forms for ease of use.\n   *\n   * Each of the input parameter types will be converted to a DataTables settings\n   * object where possible.\n   *\n   * @param  {string|node|jQuery|object} mixed DataTable identifier. Can be one\n   *   of:\n   *\n   *   * `string` - jQuery selector. Any DataTables' matching the given selector\n   *     with be found and used.\n   *   * `node` - `TABLE` node which has already been formed into a DataTable.\n   *   * `jQuery` - A jQuery object of `TABLE` nodes.\n   *   * `object` - DataTables settings object\n   *   * `DataTables.Api` - API instance\n   * @return {array|null} Matching DataTables settings objects. `null` or\n   *   `undefined` is returned if no matching DataTable is found.\n   * @ignore\n   */\n\n  var _toSettings = function (mixed) {\n    var idx, jq;\n    var settings = DataTable.settings;\n    var tables = $.map(settings, function (el, i) {\n      return el.nTable;\n    });\n\n    if (!mixed) {\n      return [];\n    } else if (mixed.nTable && mixed.oApi) {\n      // DataTables settings object\n      return [mixed];\n    } else if (mixed.nodeName && mixed.nodeName.toLowerCase() === 'table') {\n      // Table node\n      idx = $.inArray(mixed, tables);\n      return idx !== -1 ? [settings[idx]] : null;\n    } else if (mixed && typeof mixed.settings === 'function') {\n      return mixed.settings().toArray();\n    } else if (typeof mixed === 'string') {\n      // jQuery selector\n      jq = $(mixed);\n    } else if (mixed instanceof $) {\n      // jQuery object (also DataTables instance)\n      jq = mixed;\n    }\n\n    if (jq) {\n      return jq.map(function (i) {\n        idx = $.inArray(this, tables);\n        return idx !== -1 ? settings[idx] : null;\n      }).toArray();\n    }\n  };\n  /**\n   * DataTables API class - used to control and interface with  one or more\n   * DataTables enhanced tables.\n   *\n   * The API class is heavily based on jQuery, presenting a chainable interface\n   * that you can use to interact with tables. Each instance of the API class has\n   * a \"context\" - i.e. the tables that it will operate on. This could be a single\n   * table, all tables on a page or a sub-set thereof.\n   *\n   * Additionally the API is designed to allow you to easily work with the data in\n   * the tables, retrieving and manipulating it as required. This is done by\n   * presenting the API class as an array like interface. The contents of the\n   * array depend upon the actions requested by each method (for example\n   * `rows().nodes()` will return an array of nodes, while `rows().data()` will\n   * return an array of objects or arrays depending upon your table's\n   * configuration). The API object has a number of array like methods (`push`,\n   * `pop`, `reverse` etc) as well as additional helper methods (`each`, `pluck`,\n   * `unique` etc) to assist your working with the data held in a table.\n   *\n   * Most methods (those which return an Api instance) are chainable, which means\n   * the return from a method call also has all of the methods available that the\n   * top level object had. For example, these two calls are equivalent:\n   *\n   *     // Not chained\n   *     api.row.add( {...} );\n   *     api.draw();\n   *\n   *     // Chained\n   *     api.row.add( {...} ).draw();\n   *\n   * @class DataTable.Api\n   * @param {array|object|string|jQuery} context DataTable identifier. This is\n   *   used to define which DataTables enhanced tables this API will operate on.\n   *   Can be one of:\n   *\n   *   * `string` - jQuery selector. Any DataTables' matching the given selector\n   *     with be found and used.\n   *   * `node` - `TABLE` node which has already been formed into a DataTable.\n   *   * `jQuery` - A jQuery object of `TABLE` nodes.\n   *   * `object` - DataTables settings object\n   * @param {array} [data] Data to initialise the Api instance with.\n   *\n   * @example\n   *   // Direct initialisation during DataTables construction\n   *   var api = $('#example').DataTable();\n   *\n   * @example\n   *   // Initialisation using a DataTables jQuery object\n   *   var api = $('#example').dataTable().api();\n   *\n   * @example\n   *   // Initialisation as a constructor\n   *   var api = new $.fn.DataTable.Api( 'table.dataTable' );\n   */\n\n\n  _Api = function (context, data) {\n    if (!(this instanceof _Api)) {\n      return new _Api(context, data);\n    }\n\n    var settings = [];\n\n    var ctxSettings = function (o) {\n      var a = _toSettings(o);\n\n      if (a) {\n        settings.push.apply(settings, a);\n      }\n    };\n\n    if ($.isArray(context)) {\n      for (var i = 0, ien = context.length; i < ien; i++) {\n        ctxSettings(context[i]);\n      }\n    } else {\n      ctxSettings(context);\n    } // Remove duplicates\n\n\n    this.context = _unique(settings); // Initial data\n\n    if (data) {\n      $.merge(this, data);\n    } // selector\n\n\n    this.selector = {\n      rows: null,\n      cols: null,\n      opts: null\n    };\n\n    _Api.extend(this, this, __apiStruct);\n  };\n\n  DataTable.Api = _Api; // Don't destroy the existing prototype, just extend it. Required for jQuery 2's\n  // isPlainObject.\n\n  $.extend(_Api.prototype, {\n    any: function () {\n      return this.count() !== 0;\n    },\n    concat: __arrayProto.concat,\n    context: [],\n    // array of table settings objects\n    count: function () {\n      return this.flatten().length;\n    },\n    each: function (fn) {\n      for (var i = 0, ien = this.length; i < ien; i++) {\n        fn.call(this, this[i], i, this);\n      }\n\n      return this;\n    },\n    eq: function (idx) {\n      var ctx = this.context;\n      return ctx.length > idx ? new _Api(ctx[idx], this[idx]) : null;\n    },\n    filter: function (fn) {\n      var a = [];\n\n      if (__arrayProto.filter) {\n        a = __arrayProto.filter.call(this, fn, this);\n      } else {\n        // Compatibility for browsers without EMCA-252-5 (JS 1.6)\n        for (var i = 0, ien = this.length; i < ien; i++) {\n          if (fn.call(this, this[i], i, this)) {\n            a.push(this[i]);\n          }\n        }\n      }\n\n      return new _Api(this.context, a);\n    },\n    flatten: function () {\n      var a = [];\n      return new _Api(this.context, a.concat.apply(a, this.toArray()));\n    },\n    join: __arrayProto.join,\n    indexOf: __arrayProto.indexOf || function (obj, start) {\n      for (var i = start || 0, ien = this.length; i < ien; i++) {\n        if (this[i] === obj) {\n          return i;\n        }\n      }\n\n      return -1;\n    },\n    iterator: function (flatten, type, fn, alwaysNew) {\n      var a = [],\n          ret,\n          i,\n          ien,\n          j,\n          jen,\n          context = this.context,\n          rows,\n          items,\n          item,\n          selector = this.selector; // Argument shifting\n\n      if (typeof flatten === 'string') {\n        alwaysNew = fn;\n        fn = type;\n        type = flatten;\n        flatten = false;\n      }\n\n      for (i = 0, ien = context.length; i < ien; i++) {\n        var apiInst = new _Api(context[i]);\n\n        if (type === 'table') {\n          ret = fn.call(apiInst, context[i], i);\n\n          if (ret !== undefined) {\n            a.push(ret);\n          }\n        } else if (type === 'columns' || type === 'rows') {\n          // this has same length as context - one entry for each table\n          ret = fn.call(apiInst, context[i], this[i], i);\n\n          if (ret !== undefined) {\n            a.push(ret);\n          }\n        } else if (type === 'column' || type === 'column-rows' || type === 'row' || type === 'cell') {\n          // columns and rows share the same structure.\n          // 'this' is an array of column indexes for each context\n          items = this[i];\n\n          if (type === 'column-rows') {\n            rows = _selector_row_indexes(context[i], selector.opts);\n          }\n\n          for (j = 0, jen = items.length; j < jen; j++) {\n            item = items[j];\n\n            if (type === 'cell') {\n              ret = fn.call(apiInst, context[i], item.row, item.column, i, j);\n            } else {\n              ret = fn.call(apiInst, context[i], item, i, j, rows);\n            }\n\n            if (ret !== undefined) {\n              a.push(ret);\n            }\n          }\n        }\n      }\n\n      if (a.length || alwaysNew) {\n        var api = new _Api(context, flatten ? a.concat.apply([], a) : a);\n        var apiSelector = api.selector;\n        apiSelector.rows = selector.rows;\n        apiSelector.cols = selector.cols;\n        apiSelector.opts = selector.opts;\n        return api;\n      }\n\n      return this;\n    },\n    lastIndexOf: __arrayProto.lastIndexOf || function (obj, start) {\n      // Bit cheeky...\n      return this.indexOf.apply(this.toArray.reverse(), arguments);\n    },\n    length: 0,\n    map: function (fn) {\n      var a = [];\n\n      if (__arrayProto.map) {\n        a = __arrayProto.map.call(this, fn, this);\n      } else {\n        // Compatibility for browsers without EMCA-252-5 (JS 1.6)\n        for (var i = 0, ien = this.length; i < ien; i++) {\n          a.push(fn.call(this, this[i], i));\n        }\n      }\n\n      return new _Api(this.context, a);\n    },\n    pluck: function (prop) {\n      return this.map(function (el) {\n        return el[prop];\n      });\n    },\n    pop: __arrayProto.pop,\n    push: __arrayProto.push,\n    // Does not return an API instance\n    reduce: __arrayProto.reduce || function (fn, init) {\n      return _fnReduce(this, fn, init, 0, this.length, 1);\n    },\n    reduceRight: __arrayProto.reduceRight || function (fn, init) {\n      return _fnReduce(this, fn, init, this.length - 1, -1, -1);\n    },\n    reverse: __arrayProto.reverse,\n    // Object with rows, columns and opts\n    selector: null,\n    shift: __arrayProto.shift,\n    slice: function () {\n      return new _Api(this.context, this);\n    },\n    sort: __arrayProto.sort,\n    // ? name - order?\n    splice: __arrayProto.splice,\n    toArray: function () {\n      return __arrayProto.slice.call(this);\n    },\n    to$: function () {\n      return $(this);\n    },\n    toJQuery: function () {\n      return $(this);\n    },\n    unique: function () {\n      return new _Api(this.context, _unique(this));\n    },\n    unshift: __arrayProto.unshift\n  });\n\n  _Api.extend = function (scope, obj, ext) {\n    // Only extend API instances and static properties of the API\n    if (!ext.length || !obj || !(obj instanceof _Api) && !obj.__dt_wrapper) {\n      return;\n    }\n\n    var i,\n        ien,\n        struct,\n        methodScoping = function (scope, fn, struc) {\n      return function () {\n        var ret = fn.apply(scope, arguments); // Method extension\n\n        _Api.extend(ret, ret, struc.methodExt);\n\n        return ret;\n      };\n    };\n\n    for (i = 0, ien = ext.length; i < ien; i++) {\n      struct = ext[i]; // Value\n\n      obj[struct.name] = struct.type === 'function' ? methodScoping(scope, struct.val, struct) : struct.type === 'object' ? {} : struct.val;\n      obj[struct.name].__dt_wrapper = true; // Property extension\n\n      _Api.extend(scope, obj[struct.name], struct.propExt);\n    }\n  }; // @todo - Is there need for an augment function?\n  // _Api.augment = function ( inst, name )\n  // {\n  // \t// Find src object in the structure from the name\n  // \tvar parts = name.split('.');\n  // \t_Api.extend( inst, obj );\n  // };\n  //     [\n  //       {\n  //         name:      'data'                -- string   - Property name\n  //         val:       function () {},       -- function - Api method (or undefined if just an object\n  //         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result\n  //         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property\n  //       },\n  //       {\n  //         name:     'row'\n  //         val:       {},\n  //         methodExt: [ ... ],\n  //         propExt:   [\n  //           {\n  //             name:      'data'\n  //             val:       function () {},\n  //             methodExt: [ ... ],\n  //             propExt:   [ ... ]\n  //           },\n  //           ...\n  //         ]\n  //       }\n  //     ]\n\n\n  _Api.register = _api_register = function (name, val) {\n    if ($.isArray(name)) {\n      for (var j = 0, jen = name.length; j < jen; j++) {\n        _Api.register(name[j], val);\n      }\n\n      return;\n    }\n\n    var i,\n        ien,\n        heir = name.split('.'),\n        struct = __apiStruct,\n        key,\n        method;\n\n    var find = function (src, name) {\n      for (var i = 0, ien = src.length; i < ien; i++) {\n        if (src[i].name === name) {\n          return src[i];\n        }\n      }\n\n      return null;\n    };\n\n    for (i = 0, ien = heir.length; i < ien; i++) {\n      method = heir[i].indexOf('()') !== -1;\n      key = method ? heir[i].replace('()', '') : heir[i];\n      var src = find(struct, key);\n\n      if (!src) {\n        src = {\n          name: key,\n          val: {},\n          methodExt: [],\n          propExt: [],\n          type: 'object'\n        };\n        struct.push(src);\n      }\n\n      if (i === ien - 1) {\n        src.val = val;\n        src.type = typeof val === 'function' ? 'function' : $.isPlainObject(val) ? 'object' : 'other';\n      } else {\n        struct = method ? src.methodExt : src.propExt;\n      }\n    }\n  };\n\n  _Api.registerPlural = _api_registerPlural = function (pluralName, singularName, val) {\n    _Api.register(pluralName, val);\n\n    _Api.register(singularName, function () {\n      var ret = val.apply(this, arguments);\n\n      if (ret === this) {\n        // Returned item is the API instance that was passed in, return it\n        return this;\n      } else if (ret instanceof _Api) {\n        // New API instance returned, want the value from the first item\n        // in the returned array for the singular result.\n        return ret.length ? $.isArray(ret[0]) ? new _Api(ret.context, ret[0]) : // Array results are 'enhanced'\n        ret[0] : undefined;\n      } // Non-API return - just fire it back\n\n\n      return ret;\n    });\n  };\n  /**\n   * Selector for HTML tables. Apply the given selector to the give array of\n   * DataTables settings objects.\n   *\n   * @param {string|integer} [selector] jQuery selector string or integer\n   * @param  {array} Array of DataTables settings objects to be filtered\n   * @return {array}\n   * @ignore\n   */\n\n\n  var __table_selector = function (selector, a) {\n    if ($.isArray(selector)) {\n      return $.map(selector, function (item) {\n        return __table_selector(item, a);\n      });\n    } // Integer is used to pick out a table by index\n\n\n    if (typeof selector === 'number') {\n      return [a[selector]];\n    } // Perform a jQuery selector on the table nodes\n\n\n    var nodes = $.map(a, function (el, i) {\n      return el.nTable;\n    });\n    return $(nodes).filter(selector).map(function (i) {\n      // Need to translate back from the table node to the settings\n      var idx = $.inArray(this, nodes);\n      return a[idx];\n    }).toArray();\n  };\n  /**\n   * Context selector for the API's context (i.e. the tables the API instance\n   * refers to.\n   *\n   * @name    DataTable.Api#tables\n   * @param {string|integer} [selector] Selector to pick which tables the iterator\n   *   should operate on. If not given, all tables in the current context are\n   *   used. This can be given as a jQuery selector (for example `':gt(0)'`) to\n   *   select multiple tables or as an integer to select a single table.\n   * @returns {DataTable.Api} Returns a new API instance if a selector is given.\n   */\n\n\n  _api_register('tables()', function (selector) {\n    // A new instance is created if there was a selector specified\n    return selector !== undefined && selector !== null ? new _Api(__table_selector(selector, this.context)) : this;\n  });\n\n  _api_register('table()', function (selector) {\n    var tables = this.tables(selector);\n    var ctx = tables.context; // Truncate to the first matched table\n\n    return ctx.length ? new _Api(ctx[0]) : tables;\n  });\n\n  _api_registerPlural('tables().nodes()', 'table().node()', function () {\n    return this.iterator('table', function (ctx) {\n      return ctx.nTable;\n    }, 1);\n  });\n\n  _api_registerPlural('tables().body()', 'table().body()', function () {\n    return this.iterator('table', function (ctx) {\n      return ctx.nTBody;\n    }, 1);\n  });\n\n  _api_registerPlural('tables().header()', 'table().header()', function () {\n    return this.iterator('table', function (ctx) {\n      return ctx.nTHead;\n    }, 1);\n  });\n\n  _api_registerPlural('tables().footer()', 'table().footer()', function () {\n    return this.iterator('table', function (ctx) {\n      return ctx.nTFoot;\n    }, 1);\n  });\n\n  _api_registerPlural('tables().containers()', 'table().container()', function () {\n    return this.iterator('table', function (ctx) {\n      return ctx.nTableWrapper;\n    }, 1);\n  });\n  /**\n   * Redraw the tables in the current context.\n   */\n\n\n  _api_register('draw()', function (paging) {\n    return this.iterator('table', function (settings) {\n      if (paging === 'page') {\n        _fnDraw(settings);\n      } else {\n        if (typeof paging === 'string') {\n          paging = paging === 'full-hold' ? false : true;\n        }\n\n        _fnReDraw(settings, paging === false);\n      }\n    });\n  });\n  /**\n   * Get the current page index.\n   *\n   * @return {integer} Current page index (zero based)\n   */\n\n  /**\n  * Set the current page.\n  *\n  * Note that if you attempt to show a page which does not exist, DataTables will\n  * not throw an error, but rather reset the paging.\n  *\n  * @param {integer|string} action The paging action to take. This can be one of:\n  *  * `integer` - The page index to jump to\n  *  * `string` - An action to take:\n  *    * `first` - Jump to first page.\n  *    * `next` - Jump to the next page\n  *    * `previous` - Jump to previous page\n  *    * `last` - Jump to the last page.\n  * @returns {DataTables.Api} this\n  */\n\n\n  _api_register('page()', function (action) {\n    if (action === undefined) {\n      return this.page.info().page; // not an expensive call\n    } // else, have an action to take on all tables\n\n\n    return this.iterator('table', function (settings) {\n      _fnPageChange(settings, action);\n    });\n  });\n  /**\n   * Paging information for the first table in the current context.\n   *\n   * If you require paging information for another table, use the `table()` method\n   * with a suitable selector.\n   *\n   * @return {object} Object with the following properties set:\n   *  * `page` - Current page index (zero based - i.e. the first page is `0`)\n   *  * `pages` - Total number of pages\n   *  * `start` - Display index for the first record shown on the current page\n   *  * `end` - Display index for the last record shown on the current page\n   *  * `length` - Display length (number of records). Note that generally `start\n   *    + length = end`, but this is not always true, for example if there are\n   *    only 2 records to show on the final page, with a length of 10.\n   *  * `recordsTotal` - Full data set length\n   *  * `recordsDisplay` - Data set length once the current filtering criterion\n   *    are applied.\n   */\n\n\n  _api_register('page.info()', function (action) {\n    if (this.context.length === 0) {\n      return undefined;\n    }\n\n    var settings = this.context[0],\n        start = settings._iDisplayStart,\n        len = settings.oFeatures.bPaginate ? settings._iDisplayLength : -1,\n        visRecords = settings.fnRecordsDisplay(),\n        all = len === -1;\n    return {\n      \"page\": all ? 0 : Math.floor(start / len),\n      \"pages\": all ? 1 : Math.ceil(visRecords / len),\n      \"start\": start,\n      \"end\": settings.fnDisplayEnd(),\n      \"length\": len,\n      \"recordsTotal\": settings.fnRecordsTotal(),\n      \"recordsDisplay\": visRecords,\n      \"serverSide\": _fnDataSource(settings) === 'ssp'\n    };\n  });\n  /**\n   * Get the current page length.\n   *\n   * @return {integer} Current page length. Note `-1` indicates that all records\n   *   are to be shown.\n   */\n\n  /**\n  * Set the current page length.\n  *\n  * @param {integer} Page length to set. Use `-1` to show all records.\n  * @returns {DataTables.Api} this\n  */\n\n\n  _api_register('page.len()', function (len) {\n    // Note that we can't call this function 'length()' because `length`\n    // is a Javascript property of functions which defines how many arguments\n    // the function expects.\n    if (len === undefined) {\n      return this.context.length !== 0 ? this.context[0]._iDisplayLength : undefined;\n    } // else, set the page length\n\n\n    return this.iterator('table', function (settings) {\n      _fnLengthChange(settings, len);\n    });\n  });\n\n  var __reload = function (settings, holdPosition, callback) {\n    // Use the draw event to trigger a callback\n    if (callback) {\n      var api = new _Api(settings);\n      api.one('draw', function () {\n        callback(api.ajax.json());\n      });\n    }\n\n    if (_fnDataSource(settings) == 'ssp') {\n      _fnReDraw(settings, holdPosition);\n    } else {\n      _fnProcessingDisplay(settings, true); // Cancel an existing request\n\n\n      var xhr = settings.jqXHR;\n\n      if (xhr && xhr.readyState !== 4) {\n        xhr.abort();\n      } // Trigger xhr\n\n\n      _fnBuildAjax(settings, [], function (json) {\n        _fnClearTable(settings);\n\n        var data = _fnAjaxDataSrc(settings, json);\n\n        for (var i = 0, ien = data.length; i < ien; i++) {\n          _fnAddData(settings, data[i]);\n        }\n\n        _fnReDraw(settings, holdPosition);\n\n        _fnProcessingDisplay(settings, false);\n      });\n    }\n  };\n  /**\n   * Get the JSON response from the last Ajax request that DataTables made to the\n   * server. Note that this returns the JSON from the first table in the current\n   * context.\n   *\n   * @return {object} JSON received from the server.\n   */\n\n\n  _api_register('ajax.json()', function () {\n    var ctx = this.context;\n\n    if (ctx.length > 0) {\n      return ctx[0].json;\n    } // else return undefined;\n\n  });\n  /**\n   * Get the data submitted in the last Ajax request\n   */\n\n\n  _api_register('ajax.params()', function () {\n    var ctx = this.context;\n\n    if (ctx.length > 0) {\n      return ctx[0].oAjaxData;\n    } // else return undefined;\n\n  });\n  /**\n   * Reload tables from the Ajax data source. Note that this function will\n   * automatically re-draw the table when the remote data has been loaded.\n   *\n   * @param {boolean} [reset=true] Reset (default) or hold the current paging\n   *   position. A full re-sort and re-filter is performed when this method is\n   *   called, which is why the pagination reset is the default action.\n   * @returns {DataTables.Api} this\n   */\n\n\n  _api_register('ajax.reload()', function (callback, resetPaging) {\n    return this.iterator('table', function (settings) {\n      __reload(settings, resetPaging === false, callback);\n    });\n  });\n  /**\n   * Get the current Ajax URL. Note that this returns the URL from the first\n   * table in the current context.\n   *\n   * @return {string} Current Ajax source URL\n   */\n\n  /**\n  * Set the Ajax URL. Note that this will set the URL for all tables in the\n  * current context.\n  *\n  * @param {string} url URL to set.\n  * @returns {DataTables.Api} this\n  */\n\n\n  _api_register('ajax.url()', function (url) {\n    var ctx = this.context;\n\n    if (url === undefined) {\n      // get\n      if (ctx.length === 0) {\n        return undefined;\n      }\n\n      ctx = ctx[0];\n      return ctx.ajax ? $.isPlainObject(ctx.ajax) ? ctx.ajax.url : ctx.ajax : ctx.sAjaxSource;\n    } // set\n\n\n    return this.iterator('table', function (settings) {\n      if ($.isPlainObject(settings.ajax)) {\n        settings.ajax.url = url;\n      } else {\n        settings.ajax = url;\n      } // No need to consider sAjaxSource here since DataTables gives priority\n      // to `ajax` over `sAjaxSource`. So setting `ajax` here, renders any\n      // value of `sAjaxSource` redundant.\n\n    });\n  });\n  /**\n   * Load data from the newly set Ajax URL. Note that this method is only\n   * available when `ajax.url()` is used to set a URL. Additionally, this method\n   * has the same effect as calling `ajax.reload()` but is provided for\n   * convenience when setting a new URL. Like `ajax.reload()` it will\n   * automatically redraw the table once the remote data has been loaded.\n   *\n   * @returns {DataTables.Api} this\n   */\n\n\n  _api_register('ajax.url().load()', function (callback, resetPaging) {\n    // Same as a reload, but makes sense to present it for easy access after a\n    // url change\n    return this.iterator('table', function (ctx) {\n      __reload(ctx, resetPaging === false, callback);\n    });\n  });\n\n  var _selector_run = function (type, selector, selectFn, settings, opts) {\n    var out = [],\n        res,\n        a,\n        i,\n        ien,\n        j,\n        jen,\n        selectorType = typeof selector; // Can't just check for isArray here, as an API or jQuery instance might be\n    // given with their array like look\n\n    if (!selector || selectorType === 'string' || selectorType === 'function' || selector.length === undefined) {\n      selector = [selector];\n    }\n\n    for (i = 0, ien = selector.length; i < ien; i++) {\n      // Only split on simple strings - complex expressions will be jQuery selectors\n      a = selector[i] && selector[i].split && !selector[i].match(/[\\[\\(:]/) ? selector[i].split(',') : [selector[i]];\n\n      for (j = 0, jen = a.length; j < jen; j++) {\n        res = selectFn(typeof a[j] === 'string' ? $.trim(a[j]) : a[j]);\n\n        if (res && res.length) {\n          out = out.concat(res);\n        }\n      }\n    } // selector extensions\n\n\n    var ext = _ext.selector[type];\n\n    if (ext.length) {\n      for (i = 0, ien = ext.length; i < ien; i++) {\n        out = ext[i](settings, opts, out);\n      }\n    }\n\n    return _unique(out);\n  };\n\n  var _selector_opts = function (opts) {\n    if (!opts) {\n      opts = {};\n    } // Backwards compatibility for 1.9- which used the terminology filter rather\n    // than search\n\n\n    if (opts.filter && opts.search === undefined) {\n      opts.search = opts.filter;\n    }\n\n    return $.extend({\n      search: 'none',\n      order: 'current',\n      page: 'all'\n    }, opts);\n  };\n\n  var _selector_first = function (inst) {\n    // Reduce the API instance to the first item found\n    for (var i = 0, ien = inst.length; i < ien; i++) {\n      if (inst[i].length > 0) {\n        // Assign the first element to the first item in the instance\n        // and truncate the instance and context\n        inst[0] = inst[i];\n        inst[0].length = 1;\n        inst.length = 1;\n        inst.context = [inst.context[i]];\n        return inst;\n      }\n    } // Not found - return an empty instance\n\n\n    inst.length = 0;\n    return inst;\n  };\n\n  var _selector_row_indexes = function (settings, opts) {\n    var i,\n        ien,\n        tmp,\n        a = [],\n        displayFiltered = settings.aiDisplay,\n        displayMaster = settings.aiDisplayMaster;\n    var search = opts.search,\n        // none, applied, removed\n    order = opts.order,\n        // applied, current, index (original - compatibility with 1.9)\n    page = opts.page; // all, current\n\n    if (_fnDataSource(settings) == 'ssp') {\n      // In server-side processing mode, most options are irrelevant since\n      // rows not shown don't exist and the index order is the applied order\n      // Removed is a special case - for consistency just return an empty\n      // array\n      return search === 'removed' ? [] : _range(0, displayMaster.length);\n    } else if (page == 'current') {\n      // Current page implies that order=current and fitler=applied, since it is\n      // fairly senseless otherwise, regardless of what order and search actually\n      // are\n      for (i = settings._iDisplayStart, ien = settings.fnDisplayEnd(); i < ien; i++) {\n        a.push(displayFiltered[i]);\n      }\n    } else if (order == 'current' || order == 'applied') {\n      if (search == 'none') {\n        a = displayMaster.slice();\n      } else if (search == 'applied') {\n        a = displayFiltered.slice();\n      } else if (search == 'removed') {\n        // O(n+m) solution by creating a hash map\n        var displayFilteredMap = {};\n\n        for (var i = 0, ien = displayFiltered.length; i < ien; i++) {\n          displayFilteredMap[displayFiltered[i]] = null;\n        }\n\n        a = $.map(displayMaster, function (el) {\n          return !displayFilteredMap.hasOwnProperty(el) ? el : null;\n        });\n      }\n    } else if (order == 'index' || order == 'original') {\n      for (i = 0, ien = settings.aoData.length; i < ien; i++) {\n        if (search == 'none') {\n          a.push(i);\n        } else {\n          // applied | removed\n          tmp = $.inArray(i, displayFiltered);\n\n          if (tmp === -1 && search == 'removed' || tmp >= 0 && search == 'applied') {\n            a.push(i);\n          }\n        }\n      }\n    }\n\n    return a;\n  };\n  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n   * Rows\n   *\n   * {}          - no selector - use all available rows\n   * {integer}   - row aoData index\n   * {node}      - TR node\n   * {string}    - jQuery selector to apply to the TR elements\n   * {array}     - jQuery array of nodes, or simply an array of TR nodes\n   *\n   */\n\n\n  var __row_selector = function (settings, selector, opts) {\n    var rows;\n\n    var run = function (sel) {\n      var selInt = _intVal(sel);\n\n      var i, ien;\n      var aoData = settings.aoData; // Short cut - selector is a number and no options provided (default is\n      // all records, so no need to check if the index is in there, since it\n      // must be - dev error if the index doesn't exist).\n\n      if (selInt !== null && !opts) {\n        return [selInt];\n      }\n\n      if (!rows) {\n        rows = _selector_row_indexes(settings, opts);\n      }\n\n      if (selInt !== null && $.inArray(selInt, rows) !== -1) {\n        // Selector - integer\n        return [selInt];\n      } else if (sel === null || sel === undefined || sel === '') {\n        // Selector - none\n        return rows;\n      } // Selector - function\n\n\n      if (typeof sel === 'function') {\n        return $.map(rows, function (idx) {\n          var row = aoData[idx];\n          return sel(idx, row._aData, row.nTr) ? idx : null;\n        });\n      } // Selector - node\n\n\n      if (sel.nodeName) {\n        var rowIdx = sel._DT_RowIndex; // Property added by DT for fast lookup\n\n        var cellIdx = sel._DT_CellIndex;\n\n        if (rowIdx !== undefined) {\n          // Make sure that the row is actually still present in the table\n          return aoData[rowIdx] && aoData[rowIdx].nTr === sel ? [rowIdx] : [];\n        } else if (cellIdx) {\n          return aoData[cellIdx.row] && aoData[cellIdx.row].nTr === sel.parentNode ? [cellIdx.row] : [];\n        } else {\n          var host = $(sel).closest('*[data-dt-row]');\n          return host.length ? [host.data('dt-row')] : [];\n        }\n      } // ID selector. Want to always be able to select rows by id, regardless\n      // of if the tr element has been created or not, so can't rely upon\n      // jQuery here - hence a custom implementation. This does not match\n      // Sizzle's fast selector or HTML4 - in HTML5 the ID can be anything,\n      // but to select it using a CSS selector engine (like Sizzle or\n      // querySelect) it would need to need to be escaped for some characters.\n      // DataTables simplifies this for row selectors since you can select\n      // only a row. A # indicates an id any anything that follows is the id -\n      // unescaped.\n\n\n      if (typeof sel === 'string' && sel.charAt(0) === '#') {\n        // get row index from id\n        var rowObj = settings.aIds[sel.replace(/^#/, '')];\n\n        if (rowObj !== undefined) {\n          return [rowObj.idx];\n        } // need to fall through to jQuery in case there is DOM id that\n        // matches\n\n      } // Get nodes in the order from the `rows` array with null values removed\n\n\n      var nodes = _removeEmpty(_pluck_order(settings.aoData, rows, 'nTr')); // Selector - jQuery selector string, array of nodes or jQuery object/\n      // As jQuery's .filter() allows jQuery objects to be passed in filter,\n      // it also allows arrays, so this will cope with all three options\n\n\n      return $(nodes).filter(sel).map(function () {\n        return this._DT_RowIndex;\n      }).toArray();\n    };\n\n    return _selector_run('row', selector, run, settings, opts);\n  };\n\n  _api_register('rows()', function (selector, opts) {\n    // argument shifting\n    if (selector === undefined) {\n      selector = '';\n    } else if ($.isPlainObject(selector)) {\n      opts = selector;\n      selector = '';\n    }\n\n    opts = _selector_opts(opts);\n    var inst = this.iterator('table', function (settings) {\n      return __row_selector(settings, selector, opts);\n    }, 1); // Want argument shifting here and in __row_selector?\n\n    inst.selector.rows = selector;\n    inst.selector.opts = opts;\n    return inst;\n  });\n\n  _api_register('rows().nodes()', function () {\n    return this.iterator('row', function (settings, row) {\n      return settings.aoData[row].nTr || undefined;\n    }, 1);\n  });\n\n  _api_register('rows().data()', function () {\n    return this.iterator(true, 'rows', function (settings, rows) {\n      return _pluck_order(settings.aoData, rows, '_aData');\n    }, 1);\n  });\n\n  _api_registerPlural('rows().cache()', 'row().cache()', function (type) {\n    return this.iterator('row', function (settings, row) {\n      var r = settings.aoData[row];\n      return type === 'search' ? r._aFilterData : r._aSortData;\n    }, 1);\n  });\n\n  _api_registerPlural('rows().invalidate()', 'row().invalidate()', function (src) {\n    return this.iterator('row', function (settings, row) {\n      _fnInvalidate(settings, row, src);\n    });\n  });\n\n  _api_registerPlural('rows().indexes()', 'row().index()', function () {\n    return this.iterator('row', function (settings, row) {\n      return row;\n    }, 1);\n  });\n\n  _api_registerPlural('rows().ids()', 'row().id()', function (hash) {\n    var a = [];\n    var context = this.context; // `iterator` will drop undefined values, but in this case we want them\n\n    for (var i = 0, ien = context.length; i < ien; i++) {\n      for (var j = 0, jen = this[i].length; j < jen; j++) {\n        var id = context[i].rowIdFn(context[i].aoData[this[i][j]]._aData);\n        a.push((hash === true ? '#' : '') + id);\n      }\n    }\n\n    return new _Api(context, a);\n  });\n\n  _api_registerPlural('rows().remove()', 'row().remove()', function () {\n    var that = this;\n    this.iterator('row', function (settings, row, thatIdx) {\n      var data = settings.aoData;\n      var rowData = data[row];\n      var i, ien, j, jen;\n      var loopRow, loopCells;\n      data.splice(row, 1); // Update the cached indexes\n\n      for (i = 0, ien = data.length; i < ien; i++) {\n        loopRow = data[i];\n        loopCells = loopRow.anCells; // Rows\n\n        if (loopRow.nTr !== null) {\n          loopRow.nTr._DT_RowIndex = i;\n        } // Cells\n\n\n        if (loopCells !== null) {\n          for (j = 0, jen = loopCells.length; j < jen; j++) {\n            loopCells[j]._DT_CellIndex.row = i;\n          }\n        }\n      } // Delete from the display arrays\n\n\n      _fnDeleteIndex(settings.aiDisplayMaster, row);\n\n      _fnDeleteIndex(settings.aiDisplay, row);\n\n      _fnDeleteIndex(that[thatIdx], row, false); // maintain local indexes\n      // For server-side processing tables - subtract the deleted row from the count\n\n\n      if (settings._iRecordsDisplay > 0) {\n        settings._iRecordsDisplay--;\n      } // Check for an 'overflow' they case for displaying the table\n\n\n      _fnLengthOverflow(settings); // Remove the row's ID reference if there is one\n\n\n      var id = settings.rowIdFn(rowData._aData);\n\n      if (id !== undefined) {\n        delete settings.aIds[id];\n      }\n    });\n    this.iterator('table', function (settings) {\n      for (var i = 0, ien = settings.aoData.length; i < ien; i++) {\n        settings.aoData[i].idx = i;\n      }\n    });\n    return this;\n  });\n\n  _api_register('rows.add()', function (rows) {\n    var newRows = this.iterator('table', function (settings) {\n      var row, i, ien;\n      var out = [];\n\n      for (i = 0, ien = rows.length; i < ien; i++) {\n        row = rows[i];\n\n        if (row.nodeName && row.nodeName.toUpperCase() === 'TR') {\n          out.push(_fnAddTr(settings, row)[0]);\n        } else {\n          out.push(_fnAddData(settings, row));\n        }\n      }\n\n      return out;\n    }, 1); // Return an Api.rows() extended instance, so rows().nodes() etc can be used\n\n    var modRows = this.rows(-1);\n    modRows.pop();\n    $.merge(modRows, newRows);\n    return modRows;\n  });\n  /**\n   *\n   */\n\n\n  _api_register('row()', function (selector, opts) {\n    return _selector_first(this.rows(selector, opts));\n  });\n\n  _api_register('row().data()', function (data) {\n    var ctx = this.context;\n\n    if (data === undefined) {\n      // Get\n      return ctx.length && this.length ? ctx[0].aoData[this[0]]._aData : undefined;\n    } // Set\n\n\n    var row = ctx[0].aoData[this[0]];\n    row._aData = data; // If the DOM has an id, and the data source is an array\n\n    if ($.isArray(data) && row.nTr && row.nTr.id) {\n      _fnSetObjectDataFn(ctx[0].rowId)(data, row.nTr.id);\n    } // Automatically invalidate\n\n\n    _fnInvalidate(ctx[0], this[0], 'data');\n\n    return this;\n  });\n\n  _api_register('row().node()', function () {\n    var ctx = this.context;\n    return ctx.length && this.length ? ctx[0].aoData[this[0]].nTr || null : null;\n  });\n\n  _api_register('row.add()', function (row) {\n    // Allow a jQuery object to be passed in - only a single row is added from\n    // it though - the first element in the set\n    if (row instanceof $ && row.length) {\n      row = row[0];\n    }\n\n    var rows = this.iterator('table', function (settings) {\n      if (row.nodeName && row.nodeName.toUpperCase() === 'TR') {\n        return _fnAddTr(settings, row)[0];\n      }\n\n      return _fnAddData(settings, row);\n    }); // Return an Api.rows() extended instance, with the newly added row selected\n\n    return this.row(rows[0]);\n  });\n\n  var __details_add = function (ctx, row, data, klass) {\n    // Convert to array of TR elements\n    var rows = [];\n\n    var addRow = function (r, k) {\n      // Recursion to allow for arrays of jQuery objects\n      if ($.isArray(r) || r instanceof $) {\n        for (var i = 0, ien = r.length; i < ien; i++) {\n          addRow(r[i], k);\n        }\n\n        return;\n      } // If we get a TR element, then just add it directly - up to the dev\n      // to add the correct number of columns etc\n\n\n      if (r.nodeName && r.nodeName.toLowerCase() === 'tr') {\n        rows.push(r);\n      } else {\n        // Otherwise create a row with a wrapper\n        var created = $('<tr><td/></tr>').addClass(k);\n        $('td', created).addClass(k).html(r)[0].colSpan = _fnVisbleColumns(ctx);\n        rows.push(created[0]);\n      }\n    };\n\n    addRow(data, klass);\n\n    if (row._details) {\n      row._details.detach();\n    }\n\n    row._details = $(rows); // If the children were already shown, that state should be retained\n\n    if (row._detailsShow) {\n      row._details.insertAfter(row.nTr);\n    }\n  };\n\n  var __details_remove = function (api, idx) {\n    var ctx = api.context;\n\n    if (ctx.length) {\n      var row = ctx[0].aoData[idx !== undefined ? idx : api[0]];\n\n      if (row && row._details) {\n        row._details.remove();\n\n        row._detailsShow = undefined;\n        row._details = undefined;\n      }\n    }\n  };\n\n  var __details_display = function (api, show) {\n    var ctx = api.context;\n\n    if (ctx.length && api.length) {\n      var row = ctx[0].aoData[api[0]];\n\n      if (row._details) {\n        row._detailsShow = show;\n\n        if (show) {\n          row._details.insertAfter(row.nTr);\n        } else {\n          row._details.detach();\n        }\n\n        __details_events(ctx[0]);\n      }\n    }\n  };\n\n  var __details_events = function (settings) {\n    var api = new _Api(settings);\n    var namespace = '.dt.DT_details';\n    var drawEvent = 'draw' + namespace;\n    var colvisEvent = 'column-visibility' + namespace;\n    var destroyEvent = 'destroy' + namespace;\n    var data = settings.aoData;\n    api.off(drawEvent + ' ' + colvisEvent + ' ' + destroyEvent);\n\n    if (_pluck(data, '_details').length > 0) {\n      // On each draw, insert the required elements into the document\n      api.on(drawEvent, function (e, ctx) {\n        if (settings !== ctx) {\n          return;\n        }\n\n        api.rows({\n          page: 'current'\n        }).eq(0).each(function (idx) {\n          // Internal data grab\n          var row = data[idx];\n\n          if (row._detailsShow) {\n            row._details.insertAfter(row.nTr);\n          }\n        });\n      }); // Column visibility change - update the colspan\n\n      api.on(colvisEvent, function (e, ctx, idx, vis) {\n        if (settings !== ctx) {\n          return;\n        } // Update the colspan for the details rows (note, only if it already has\n        // a colspan)\n\n\n        var row,\n            visible = _fnVisbleColumns(ctx);\n\n        for (var i = 0, ien = data.length; i < ien; i++) {\n          row = data[i];\n\n          if (row._details) {\n            row._details.children('td[colspan]').attr('colspan', visible);\n          }\n        }\n      }); // Table destroyed - nuke any child rows\n\n      api.on(destroyEvent, function (e, ctx) {\n        if (settings !== ctx) {\n          return;\n        }\n\n        for (var i = 0, ien = data.length; i < ien; i++) {\n          if (data[i]._details) {\n            __details_remove(api, i);\n          }\n        }\n      });\n    }\n  }; // Strings for the method names to help minification\n\n\n  var _emp = '';\n\n  var _child_obj = _emp + 'row().child';\n\n  var _child_mth = _child_obj + '()'; // data can be:\n  //  tr\n  //  string\n  //  jQuery or array of any of the above\n\n\n  _api_register(_child_mth, function (data, klass) {\n    var ctx = this.context;\n\n    if (data === undefined) {\n      // get\n      return ctx.length && this.length ? ctx[0].aoData[this[0]]._details : undefined;\n    } else if (data === true) {\n      // show\n      this.child.show();\n    } else if (data === false) {\n      // remove\n      __details_remove(this);\n    } else if (ctx.length && this.length) {\n      // set\n      __details_add(ctx[0], ctx[0].aoData[this[0]], data, klass);\n    }\n\n    return this;\n  });\n\n  _api_register([_child_obj + '.show()', _child_mth + '.show()' // only when `child()` was called with parameters (without\n  ], function (show) {\n    // it returns an object and this method is not executed)\n    __details_display(this, true);\n\n    return this;\n  });\n\n  _api_register([_child_obj + '.hide()', _child_mth + '.hide()' // only when `child()` was called with parameters (without\n  ], function () {\n    // it returns an object and this method is not executed)\n    __details_display(this, false);\n\n    return this;\n  });\n\n  _api_register([_child_obj + '.remove()', _child_mth + '.remove()' // only when `child()` was called with parameters (without\n  ], function () {\n    // it returns an object and this method is not executed)\n    __details_remove(this);\n\n    return this;\n  });\n\n  _api_register(_child_obj + '.isShown()', function () {\n    var ctx = this.context;\n\n    if (ctx.length && this.length) {\n      // _detailsShown as false or undefined will fall through to return false\n      return ctx[0].aoData[this[0]]._detailsShow || false;\n    }\n\n    return false;\n  });\n  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n   * Columns\n   *\n   * {integer}           - column index (>=0 count from left, <0 count from right)\n   * \"{integer}:visIdx\"  - visible column index (i.e. translate to column index)  (>=0 count from left, <0 count from right)\n   * \"{integer}:visible\" - alias for {integer}:visIdx  (>=0 count from left, <0 count from right)\n   * \"{string}:name\"     - column name\n   * \"{string}\"          - jQuery selector on column header nodes\n   *\n   */\n  // can be an array of these items, comma separated list, or an array of comma\n  // separated lists\n\n\n  var __re_column_selector = /^([^:]+):(name|visIdx|visible)$/; // r1 and r2 are redundant - but it means that the parameters match for the\n  // iterator callback in columns().data()\n\n  var __columnData = function (settings, column, r1, r2, rows) {\n    var a = [];\n\n    for (var row = 0, ien = rows.length; row < ien; row++) {\n      a.push(_fnGetCellData(settings, rows[row], column));\n    }\n\n    return a;\n  };\n\n  var __column_selector = function (settings, selector, opts) {\n    var columns = settings.aoColumns,\n        names = _pluck(columns, 'sName'),\n        nodes = _pluck(columns, 'nTh');\n\n    var run = function (s) {\n      var selInt = _intVal(s); // Selector - all\n\n\n      if (s === '') {\n        return _range(columns.length);\n      } // Selector - index\n\n\n      if (selInt !== null) {\n        return [selInt >= 0 ? selInt : // Count from left\n        columns.length + selInt // Count from right (+ because its a negative value)\n        ];\n      } // Selector = function\n\n\n      if (typeof s === 'function') {\n        var rows = _selector_row_indexes(settings, opts);\n\n        return $.map(columns, function (col, idx) {\n          return s(idx, __columnData(settings, idx, 0, 0, rows), nodes[idx]) ? idx : null;\n        });\n      } // jQuery or string selector\n\n\n      var match = typeof s === 'string' ? s.match(__re_column_selector) : '';\n\n      if (match) {\n        switch (match[2]) {\n          case 'visIdx':\n          case 'visible':\n            var idx = parseInt(match[1], 10); // Visible index given, convert to column index\n\n            if (idx < 0) {\n              // Counting from the right\n              var visColumns = $.map(columns, function (col, i) {\n                return col.bVisible ? i : null;\n              });\n              return [visColumns[visColumns.length + idx]];\n            } // Counting from the left\n\n\n            return [_fnVisibleToColumnIndex(settings, idx)];\n\n          case 'name':\n            // match by name. `names` is column index complete and in order\n            return $.map(names, function (name, i) {\n              return name === match[1] ? i : null;\n            });\n\n          default:\n            return [];\n        }\n      } // Cell in the table body\n\n\n      if (s.nodeName && s._DT_CellIndex) {\n        return [s._DT_CellIndex.column];\n      } // jQuery selector on the TH elements for the columns\n\n\n      var jqResult = $(nodes).filter(s).map(function () {\n        return $.inArray(this, nodes); // `nodes` is column index complete and in order\n      }).toArray();\n\n      if (jqResult.length || !s.nodeName) {\n        return jqResult;\n      } // Otherwise a node which might have a `dt-column` data attribute, or be\n      // a child or such an element\n\n\n      var host = $(s).closest('*[data-dt-column]');\n      return host.length ? [host.data('dt-column')] : [];\n    };\n\n    return _selector_run('column', selector, run, settings, opts);\n  };\n\n  var __setColumnVis = function (settings, column, vis) {\n    var cols = settings.aoColumns,\n        col = cols[column],\n        data = settings.aoData,\n        row,\n        cells,\n        i,\n        ien,\n        tr; // Get\n\n    if (vis === undefined) {\n      return col.bVisible;\n    } // Set\n    // No change\n\n\n    if (col.bVisible === vis) {\n      return;\n    }\n\n    if (vis) {\n      // Insert column\n      // Need to decide if we should use appendChild or insertBefore\n      var insertBefore = $.inArray(true, _pluck(cols, 'bVisible'), column + 1);\n\n      for (i = 0, ien = data.length; i < ien; i++) {\n        tr = data[i].nTr;\n        cells = data[i].anCells;\n\n        if (tr) {\n          // insertBefore can act like appendChild if 2nd arg is null\n          tr.insertBefore(cells[column], cells[insertBefore] || null);\n        }\n      }\n    } else {\n      // Remove column\n      $(_pluck(settings.aoData, 'anCells', column)).detach();\n    } // Common actions\n\n\n    col.bVisible = vis;\n  };\n\n  _api_register('columns()', function (selector, opts) {\n    // argument shifting\n    if (selector === undefined) {\n      selector = '';\n    } else if ($.isPlainObject(selector)) {\n      opts = selector;\n      selector = '';\n    }\n\n    opts = _selector_opts(opts);\n    var inst = this.iterator('table', function (settings) {\n      return __column_selector(settings, selector, opts);\n    }, 1); // Want argument shifting here and in _row_selector?\n\n    inst.selector.cols = selector;\n    inst.selector.opts = opts;\n    return inst;\n  });\n\n  _api_registerPlural('columns().header()', 'column().header()', function (selector, opts) {\n    return this.iterator('column', function (settings, column) {\n      return settings.aoColumns[column].nTh;\n    }, 1);\n  });\n\n  _api_registerPlural('columns().footer()', 'column().footer()', function (selector, opts) {\n    return this.iterator('column', function (settings, column) {\n      return settings.aoColumns[column].nTf;\n    }, 1);\n  });\n\n  _api_registerPlural('columns().data()', 'column().data()', function () {\n    return this.iterator('column-rows', __columnData, 1);\n  });\n\n  _api_registerPlural('columns().dataSrc()', 'column().dataSrc()', function () {\n    return this.iterator('column', function (settings, column) {\n      return settings.aoColumns[column].mData;\n    }, 1);\n  });\n\n  _api_registerPlural('columns().cache()', 'column().cache()', function (type) {\n    return this.iterator('column-rows', function (settings, column, i, j, rows) {\n      return _pluck_order(settings.aoData, rows, type === 'search' ? '_aFilterData' : '_aSortData', column);\n    }, 1);\n  });\n\n  _api_registerPlural('columns().nodes()', 'column().nodes()', function () {\n    return this.iterator('column-rows', function (settings, column, i, j, rows) {\n      return _pluck_order(settings.aoData, rows, 'anCells', column);\n    }, 1);\n  });\n\n  _api_registerPlural('columns().visible()', 'column().visible()', function (vis, calc) {\n    var that = this;\n    var ret = this.iterator('column', function (settings, column) {\n      if (vis === undefined) {\n        return settings.aoColumns[column].bVisible;\n      } // else\n\n\n      __setColumnVis(settings, column, vis);\n    }); // Group the column visibility changes\n\n    if (vis !== undefined) {\n      this.iterator('table', function (settings) {\n        // Redraw the header after changes\n        _fnDrawHead(settings, settings.aoHeader);\n\n        _fnDrawHead(settings, settings.aoFooter); // Update colspan for no records display. Child rows and extensions will use their own\n        // listeners to do this - only need to update the empty table item here\n\n\n        if (!settings.aiDisplay.length) {\n          $(settings.nTBody).find('td[colspan]').attr('colspan', _fnVisbleColumns(settings));\n        }\n\n        _fnSaveState(settings); // Second loop once the first is done for events\n\n\n        that.iterator('column', function (settings, column) {\n          _fnCallbackFire(settings, null, 'column-visibility', [settings, column, vis, calc]);\n        });\n\n        if (calc === undefined || calc) {\n          that.columns.adjust();\n        }\n      });\n    }\n\n    return ret;\n  });\n\n  _api_registerPlural('columns().indexes()', 'column().index()', function (type) {\n    return this.iterator('column', function (settings, column) {\n      return type === 'visible' ? _fnColumnIndexToVisible(settings, column) : column;\n    }, 1);\n  });\n\n  _api_register('columns.adjust()', function () {\n    return this.iterator('table', function (settings) {\n      _fnAdjustColumnSizing(settings);\n    }, 1);\n  });\n\n  _api_register('column.index()', function (type, idx) {\n    if (this.context.length !== 0) {\n      var ctx = this.context[0];\n\n      if (type === 'fromVisible' || type === 'toData') {\n        return _fnVisibleToColumnIndex(ctx, idx);\n      } else if (type === 'fromData' || type === 'toVisible') {\n        return _fnColumnIndexToVisible(ctx, idx);\n      }\n    }\n  });\n\n  _api_register('column()', function (selector, opts) {\n    return _selector_first(this.columns(selector, opts));\n  });\n\n  var __cell_selector = function (settings, selector, opts) {\n    var data = settings.aoData;\n\n    var rows = _selector_row_indexes(settings, opts);\n\n    var cells = _removeEmpty(_pluck_order(data, rows, 'anCells'));\n\n    var allCells = $([].concat.apply([], cells));\n    var row;\n    var columns = settings.aoColumns.length;\n    var a, i, ien, j, o, host;\n\n    var run = function (s) {\n      var fnSelector = typeof s === 'function';\n\n      if (s === null || s === undefined || fnSelector) {\n        // All cells and function selectors\n        a = [];\n\n        for (i = 0, ien = rows.length; i < ien; i++) {\n          row = rows[i];\n\n          for (j = 0; j < columns; j++) {\n            o = {\n              row: row,\n              column: j\n            };\n\n            if (fnSelector) {\n              // Selector - function\n              host = data[row];\n\n              if (s(o, _fnGetCellData(settings, row, j), host.anCells ? host.anCells[j] : null)) {\n                a.push(o);\n              }\n            } else {\n              // Selector - all\n              a.push(o);\n            }\n          }\n        }\n\n        return a;\n      } // Selector - index\n\n\n      if ($.isPlainObject(s)) {\n        // Valid cell index and its in the array of selectable rows\n        return s.column !== undefined && s.row !== undefined && $.inArray(s.row, rows) !== -1 ? [s] : [];\n      } // Selector - jQuery filtered cells\n\n\n      var jqResult = allCells.filter(s).map(function (i, el) {\n        return {\n          // use a new object, in case someone changes the values\n          row: el._DT_CellIndex.row,\n          column: el._DT_CellIndex.column\n        };\n      }).toArray();\n\n      if (jqResult.length || !s.nodeName) {\n        return jqResult;\n      } // Otherwise the selector is a node, and there is one last option - the\n      // element might be a child of an element which has dt-row and dt-column\n      // data attributes\n\n\n      host = $(s).closest('*[data-dt-row]');\n      return host.length ? [{\n        row: host.data('dt-row'),\n        column: host.data('dt-column')\n      }] : [];\n    };\n\n    return _selector_run('cell', selector, run, settings, opts);\n  };\n\n  _api_register('cells()', function (rowSelector, columnSelector, opts) {\n    // Argument shifting\n    if ($.isPlainObject(rowSelector)) {\n      // Indexes\n      if (rowSelector.row === undefined) {\n        // Selector options in first parameter\n        opts = rowSelector;\n        rowSelector = null;\n      } else {\n        // Cell index objects in first parameter\n        opts = columnSelector;\n        columnSelector = null;\n      }\n    }\n\n    if ($.isPlainObject(columnSelector)) {\n      opts = columnSelector;\n      columnSelector = null;\n    } // Cell selector\n\n\n    if (columnSelector === null || columnSelector === undefined) {\n      return this.iterator('table', function (settings) {\n        return __cell_selector(settings, rowSelector, _selector_opts(opts));\n      });\n    } // The default built in options need to apply to row and columns\n\n\n    var internalOpts = opts ? {\n      page: opts.page,\n      order: opts.order,\n      search: opts.search\n    } : {}; // Row + column selector\n\n    var columns = this.columns(columnSelector, internalOpts);\n    var rows = this.rows(rowSelector, internalOpts);\n    var i, ien, j, jen;\n    var cellsNoOpts = this.iterator('table', function (settings, idx) {\n      var a = [];\n\n      for (i = 0, ien = rows[idx].length; i < ien; i++) {\n        for (j = 0, jen = columns[idx].length; j < jen; j++) {\n          a.push({\n            row: rows[idx][i],\n            column: columns[idx][j]\n          });\n        }\n      }\n\n      return a;\n    }, 1); // There is currently only one extension which uses a cell selector extension\n    // It is a _major_ performance drag to run this if it isn't needed, so this is\n    // an extension specific check at the moment\n\n    var cells = opts && opts.selected ? this.cells(cellsNoOpts, opts) : cellsNoOpts;\n    $.extend(cells.selector, {\n      cols: columnSelector,\n      rows: rowSelector,\n      opts: opts\n    });\n    return cells;\n  });\n\n  _api_registerPlural('cells().nodes()', 'cell().node()', function () {\n    return this.iterator('cell', function (settings, row, column) {\n      var data = settings.aoData[row];\n      return data && data.anCells ? data.anCells[column] : undefined;\n    }, 1);\n  });\n\n  _api_register('cells().data()', function () {\n    return this.iterator('cell', function (settings, row, column) {\n      return _fnGetCellData(settings, row, column);\n    }, 1);\n  });\n\n  _api_registerPlural('cells().cache()', 'cell().cache()', function (type) {\n    type = type === 'search' ? '_aFilterData' : '_aSortData';\n    return this.iterator('cell', function (settings, row, column) {\n      return settings.aoData[row][type][column];\n    }, 1);\n  });\n\n  _api_registerPlural('cells().render()', 'cell().render()', function (type) {\n    return this.iterator('cell', function (settings, row, column) {\n      return _fnGetCellData(settings, row, column, type);\n    }, 1);\n  });\n\n  _api_registerPlural('cells().indexes()', 'cell().index()', function () {\n    return this.iterator('cell', function (settings, row, column) {\n      return {\n        row: row,\n        column: column,\n        columnVisible: _fnColumnIndexToVisible(settings, column)\n      };\n    }, 1);\n  });\n\n  _api_registerPlural('cells().invalidate()', 'cell().invalidate()', function (src) {\n    return this.iterator('cell', function (settings, row, column) {\n      _fnInvalidate(settings, row, src, column);\n    });\n  });\n\n  _api_register('cell()', function (rowSelector, columnSelector, opts) {\n    return _selector_first(this.cells(rowSelector, columnSelector, opts));\n  });\n\n  _api_register('cell().data()', function (data) {\n    var ctx = this.context;\n    var cell = this[0];\n\n    if (data === undefined) {\n      // Get\n      return ctx.length && cell.length ? _fnGetCellData(ctx[0], cell[0].row, cell[0].column) : undefined;\n    } // Set\n\n\n    _fnSetCellData(ctx[0], cell[0].row, cell[0].column, data);\n\n    _fnInvalidate(ctx[0], cell[0].row, 'data', cell[0].column);\n\n    return this;\n  });\n  /**\n   * Get current ordering (sorting) that has been applied to the table.\n   *\n   * @returns {array} 2D array containing the sorting information for the first\n   *   table in the current context. Each element in the parent array represents\n   *   a column being sorted upon (i.e. multi-sorting with two columns would have\n   *   2 inner arrays). The inner arrays may have 2 or 3 elements. The first is\n   *   the column index that the sorting condition applies to, the second is the\n   *   direction of the sort (`desc` or `asc`) and, optionally, the third is the\n   *   index of the sorting order from the `column.sorting` initialisation array.\n   */\n\n  /**\n  * Set the ordering for the table.\n  *\n  * @param {integer} order Column index to sort upon.\n  * @param {string} direction Direction of the sort to be applied (`asc` or `desc`)\n  * @returns {DataTables.Api} this\n  */\n\n  /**\n  * Set the ordering for the table.\n  *\n  * @param {array} order 1D array of sorting information to be applied.\n  * @param {array} [...] Optional additional sorting conditions\n  * @returns {DataTables.Api} this\n  */\n\n  /**\n  * Set the ordering for the table.\n  *\n  * @param {array} order 2D array of sorting information to be applied.\n  * @returns {DataTables.Api} this\n  */\n\n\n  _api_register('order()', function (order, dir) {\n    var ctx = this.context;\n\n    if (order === undefined) {\n      // get\n      return ctx.length !== 0 ? ctx[0].aaSorting : undefined;\n    } // set\n\n\n    if (typeof order === 'number') {\n      // Simple column / direction passed in\n      order = [[order, dir]];\n    } else if (order.length && !$.isArray(order[0])) {\n      // Arguments passed in (list of 1D arrays)\n      order = Array.prototype.slice.call(arguments);\n    } // otherwise a 2D array was passed in\n\n\n    return this.iterator('table', function (settings) {\n      settings.aaSorting = order.slice();\n    });\n  });\n  /**\n   * Attach a sort listener to an element for a given column\n   *\n   * @param {node|jQuery|string} node Identifier for the element(s) to attach the\n   *   listener to. This can take the form of a single DOM node, a jQuery\n   *   collection of nodes or a jQuery selector which will identify the node(s).\n   * @param {integer} column the column that a click on this node will sort on\n   * @param {function} [callback] callback function when sort is run\n   * @returns {DataTables.Api} this\n   */\n\n\n  _api_register('order.listener()', function (node, column, callback) {\n    return this.iterator('table', function (settings) {\n      _fnSortAttachListener(settings, node, column, callback);\n    });\n  });\n\n  _api_register('order.fixed()', function (set) {\n    if (!set) {\n      var ctx = this.context;\n      var fixed = ctx.length ? ctx[0].aaSortingFixed : undefined;\n      return $.isArray(fixed) ? {\n        pre: fixed\n      } : fixed;\n    }\n\n    return this.iterator('table', function (settings) {\n      settings.aaSortingFixed = $.extend(true, {}, set);\n    });\n  }); // Order by the selected column(s)\n\n\n  _api_register(['columns().order()', 'column().order()'], function (dir) {\n    var that = this;\n    return this.iterator('table', function (settings, i) {\n      var sort = [];\n      $.each(that[i], function (j, col) {\n        sort.push([col, dir]);\n      });\n      settings.aaSorting = sort;\n    });\n  });\n\n  _api_register('search()', function (input, regex, smart, caseInsen) {\n    var ctx = this.context;\n\n    if (input === undefined) {\n      // get\n      return ctx.length !== 0 ? ctx[0].oPreviousSearch.sSearch : undefined;\n    } // set\n\n\n    return this.iterator('table', function (settings) {\n      if (!settings.oFeatures.bFilter) {\n        return;\n      }\n\n      _fnFilterComplete(settings, $.extend({}, settings.oPreviousSearch, {\n        \"sSearch\": input + \"\",\n        \"bRegex\": regex === null ? false : regex,\n        \"bSmart\": smart === null ? true : smart,\n        \"bCaseInsensitive\": caseInsen === null ? true : caseInsen\n      }), 1);\n    });\n  });\n\n  _api_registerPlural('columns().search()', 'column().search()', function (input, regex, smart, caseInsen) {\n    return this.iterator('column', function (settings, column) {\n      var preSearch = settings.aoPreSearchCols;\n\n      if (input === undefined) {\n        // get\n        return preSearch[column].sSearch;\n      } // set\n\n\n      if (!settings.oFeatures.bFilter) {\n        return;\n      }\n\n      $.extend(preSearch[column], {\n        \"sSearch\": input + \"\",\n        \"bRegex\": regex === null ? false : regex,\n        \"bSmart\": smart === null ? true : smart,\n        \"bCaseInsensitive\": caseInsen === null ? true : caseInsen\n      });\n\n      _fnFilterComplete(settings, settings.oPreviousSearch, 1);\n    });\n  });\n  /*\n   * State API methods\n   */\n\n\n  _api_register('state()', function () {\n    return this.context.length ? this.context[0].oSavedState : null;\n  });\n\n  _api_register('state.clear()', function () {\n    return this.iterator('table', function (settings) {\n      // Save an empty object\n      settings.fnStateSaveCallback.call(settings.oInstance, settings, {});\n    });\n  });\n\n  _api_register('state.loaded()', function () {\n    return this.context.length ? this.context[0].oLoadedState : null;\n  });\n\n  _api_register('state.save()', function () {\n    return this.iterator('table', function (settings) {\n      _fnSaveState(settings);\n    });\n  });\n  /**\n   * Provide a common method for plug-ins to check the version of DataTables being\n   * used, in order to ensure compatibility.\n   *\n   *  @param {string} version Version string to check for, in the format \"X.Y.Z\".\n   *    Note that the formats \"X\" and \"X.Y\" are also acceptable.\n   *  @returns {boolean} true if this version of DataTables is greater or equal to\n   *    the required version, or false if this version of DataTales is not\n   *    suitable\n   *  @static\n   *  @dtopt API-Static\n   *\n   *  @example\n   *    alert( $.fn.dataTable.versionCheck( '1.9.0' ) );\n   */\n\n\n  DataTable.versionCheck = DataTable.fnVersionCheck = function (version) {\n    var aThis = DataTable.version.split('.');\n    var aThat = version.split('.');\n    var iThis, iThat;\n\n    for (var i = 0, iLen = aThat.length; i < iLen; i++) {\n      iThis = parseInt(aThis[i], 10) || 0;\n      iThat = parseInt(aThat[i], 10) || 0; // Parts are the same, keep comparing\n\n      if (iThis === iThat) {\n        continue;\n      } // Parts are different, return immediately\n\n\n      return iThis > iThat;\n    }\n\n    return true;\n  };\n  /**\n   * Check if a `<table>` node is a DataTable table already or not.\n   *\n   *  @param {node|jquery|string} table Table node, jQuery object or jQuery\n   *      selector for the table to test. Note that if more than more than one\n   *      table is passed on, only the first will be checked\n   *  @returns {boolean} true the table given is a DataTable, or false otherwise\n   *  @static\n   *  @dtopt API-Static\n   *\n   *  @example\n   *    if ( ! $.fn.DataTable.isDataTable( '#example' ) ) {\n   *      $('#example').dataTable();\n   *    }\n   */\n\n\n  DataTable.isDataTable = DataTable.fnIsDataTable = function (table) {\n    var t = $(table).get(0);\n    var is = false;\n\n    if (table instanceof DataTable.Api) {\n      return true;\n    }\n\n    $.each(DataTable.settings, function (i, o) {\n      var head = o.nScrollHead ? $('table', o.nScrollHead)[0] : null;\n      var foot = o.nScrollFoot ? $('table', o.nScrollFoot)[0] : null;\n\n      if (o.nTable === t || head === t || foot === t) {\n        is = true;\n      }\n    });\n    return is;\n  };\n  /**\n   * Get all DataTable tables that have been initialised - optionally you can\n   * select to get only currently visible tables.\n   *\n   *  @param {boolean} [visible=false] Flag to indicate if you want all (default)\n   *    or visible tables only.\n   *  @returns {array} Array of `table` nodes (not DataTable instances) which are\n   *    DataTables\n   *  @static\n   *  @dtopt API-Static\n   *\n   *  @example\n   *    $.each( $.fn.dataTable.tables(true), function () {\n   *      $(table).DataTable().columns.adjust();\n   *    } );\n   */\n\n\n  DataTable.tables = DataTable.fnTables = function (visible) {\n    var api = false;\n\n    if ($.isPlainObject(visible)) {\n      api = visible.api;\n      visible = visible.visible;\n    }\n\n    var a = $.map(DataTable.settings, function (o) {\n      if (!visible || visible && $(o.nTable).is(':visible')) {\n        return o.nTable;\n      }\n    });\n    return api ? new _Api(a) : a;\n  };\n  /**\n   * Convert from camel case parameters to Hungarian notation. This is made public\n   * for the extensions to provide the same ability as DataTables core to accept\n   * either the 1.9 style Hungarian notation, or the 1.10+ style camelCase\n   * parameters.\n   *\n   *  @param {object} src The model object which holds all parameters that can be\n   *    mapped.\n   *  @param {object} user The object to convert from camel case to Hungarian.\n   *  @param {boolean} force When set to `true`, properties which already have a\n   *    Hungarian value in the `user` object will be overwritten. Otherwise they\n   *    won't be.\n   */\n\n\n  DataTable.camelToHungarian = _fnCamelToHungarian;\n  /**\n   *\n   */\n\n  _api_register('$()', function (selector, opts) {\n    var rows = this.rows(opts).nodes(),\n        // Get all rows\n    jqRows = $(rows);\n    return $([].concat(jqRows.filter(selector).toArray(), jqRows.find(selector).toArray()));\n  }); // jQuery functions to operate on the tables\n\n\n  $.each(['on', 'one', 'off'], function (i, key) {\n    _api_register(key + '()', function ()\n    /* event, handler */\n    {\n      var args = Array.prototype.slice.call(arguments); // Add the `dt` namespace automatically if it isn't already present\n\n      args[0] = $.map(args[0].split(/\\s/), function (e) {\n        return !e.match(/\\.dt\\b/) ? e + '.dt' : e;\n      }).join(' ');\n      var inst = $(this.tables().nodes());\n      inst[key].apply(inst, args);\n      return this;\n    });\n  });\n\n  _api_register('clear()', function () {\n    return this.iterator('table', function (settings) {\n      _fnClearTable(settings);\n    });\n  });\n\n  _api_register('settings()', function () {\n    return new _Api(this.context, this.context);\n  });\n\n  _api_register('init()', function () {\n    var ctx = this.context;\n    return ctx.length ? ctx[0].oInit : null;\n  });\n\n  _api_register('data()', function () {\n    return this.iterator('table', function (settings) {\n      return _pluck(settings.aoData, '_aData');\n    }).flatten();\n  });\n\n  _api_register('destroy()', function (remove) {\n    remove = remove || false;\n    return this.iterator('table', function (settings) {\n      var orig = settings.nTableWrapper.parentNode;\n      var classes = settings.oClasses;\n      var table = settings.nTable;\n      var tbody = settings.nTBody;\n      var thead = settings.nTHead;\n      var tfoot = settings.nTFoot;\n      var jqTable = $(table);\n      var jqTbody = $(tbody);\n      var jqWrapper = $(settings.nTableWrapper);\n      var rows = $.map(settings.aoData, function (r) {\n        return r.nTr;\n      });\n      var i, ien; // Flag to note that the table is currently being destroyed - no action\n      // should be taken\n\n      settings.bDestroying = true; // Fire off the destroy callbacks for plug-ins etc\n\n      _fnCallbackFire(settings, \"aoDestroyCallback\", \"destroy\", [settings]); // If not being removed from the document, make all columns visible\n\n\n      if (!remove) {\n        new _Api(settings).columns().visible(true);\n      } // Blitz all `DT` namespaced events (these are internal events, the\n      // lowercase, `dt` events are user subscribed and they are responsible\n      // for removing them\n\n\n      jqWrapper.off('.DT').find(':not(tbody *)').off('.DT');\n      $(window).off('.DT-' + settings.sInstance); // When scrolling we had to break the table up - restore it\n\n      if (table != thead.parentNode) {\n        jqTable.children('thead').detach();\n        jqTable.append(thead);\n      }\n\n      if (tfoot && table != tfoot.parentNode) {\n        jqTable.children('tfoot').detach();\n        jqTable.append(tfoot);\n      }\n\n      settings.aaSorting = [];\n      settings.aaSortingFixed = [];\n\n      _fnSortingClasses(settings);\n\n      $(rows).removeClass(settings.asStripeClasses.join(' '));\n      $('th, td', thead).removeClass(classes.sSortable + ' ' + classes.sSortableAsc + ' ' + classes.sSortableDesc + ' ' + classes.sSortableNone); // Add the TR elements back into the table in their original order\n\n      jqTbody.children().detach();\n      jqTbody.append(rows); // Remove the DataTables generated nodes, events and classes\n\n      var removedMethod = remove ? 'remove' : 'detach';\n      jqTable[removedMethod]();\n      jqWrapper[removedMethod](); // If we need to reattach the table to the document\n\n      if (!remove && orig) {\n        // insertBefore acts like appendChild if !arg[1]\n        orig.insertBefore(table, settings.nTableReinsertBefore); // Restore the width of the original table - was read from the style property,\n        // so we can restore directly to that\n\n        jqTable.css('width', settings.sDestroyWidth).removeClass(classes.sTable); // If the were originally stripe classes - then we add them back here.\n        // Note this is not fool proof (for example if not all rows had stripe\n        // classes - but it's a good effort without getting carried away\n\n        ien = settings.asDestroyStripes.length;\n\n        if (ien) {\n          jqTbody.children().each(function (i) {\n            $(this).addClass(settings.asDestroyStripes[i % ien]);\n          });\n        }\n      }\n      /* Remove the settings object from the settings array */\n\n\n      var idx = $.inArray(settings, DataTable.settings);\n\n      if (idx !== -1) {\n        DataTable.settings.splice(idx, 1);\n      }\n    });\n  }); // Add the `every()` method for rows, columns and cells in a compact form\n\n\n  $.each(['column', 'row', 'cell'], function (i, type) {\n    _api_register(type + 's().every()', function (fn) {\n      var opts = this.selector.opts;\n      var api = this;\n      return this.iterator(type, function (settings, arg1, arg2, arg3, arg4) {\n        // Rows and columns:\n        //  arg1 - index\n        //  arg2 - table counter\n        //  arg3 - loop counter\n        //  arg4 - undefined\n        // Cells:\n        //  arg1 - row index\n        //  arg2 - column index\n        //  arg3 - table counter\n        //  arg4 - loop counter\n        fn.call(api[type](arg1, type === 'cell' ? arg2 : opts, type === 'cell' ? opts : undefined), arg1, arg2, arg3, arg4);\n      });\n    });\n  }); // i18n method for extensions to be able to use the language object from the\n  // DataTable\n\n  _api_register('i18n()', function (token, def, plural) {\n    var ctx = this.context[0];\n\n    var resolved = _fnGetObjectDataFn(token)(ctx.oLanguage);\n\n    if (resolved === undefined) {\n      resolved = def;\n    }\n\n    if (plural !== undefined && $.isPlainObject(resolved)) {\n      resolved = resolved[plural] !== undefined ? resolved[plural] : resolved._;\n    }\n\n    return resolved.replace('%d', plural); // nb: plural might be undefined,\n  });\n  /**\n   * Version string for plug-ins to check compatibility. Allowed format is\n   * `a.b.c-d` where: a:int, b:int, c:int, d:string(dev|beta|alpha). `d` is used\n   * only for non-release builds. See http://semver.org/ for more information.\n   *  @member\n   *  @type string\n   *  @default Version number\n   */\n\n\n  DataTable.version = \"1.10.21\";\n  /**\n   * Private data store, containing all of the settings objects that are\n   * created for the tables on a given page.\n   *\n   * Note that the `DataTable.settings` object is aliased to\n   * `jQuery.fn.dataTableExt` through which it may be accessed and\n   * manipulated, or `jQuery.fn.dataTable.settings`.\n   *  @member\n   *  @type array\n   *  @default []\n   *  @private\n   */\n\n  DataTable.settings = [];\n  /**\n   * Object models container, for the various models that DataTables has\n   * available to it. These models define the objects that are used to hold\n   * the active state and configuration of the table.\n   *  @namespace\n   */\n\n  DataTable.models = {};\n  /**\n   * Template object for the way in which DataTables holds information about\n   * search information for the global filter and individual column filters.\n   *  @namespace\n   */\n\n  DataTable.models.oSearch = {\n    /**\n     * Flag to indicate if the filtering should be case insensitive or not\n     *  @type boolean\n     *  @default true\n     */\n    \"bCaseInsensitive\": true,\n\n    /**\n     * Applied search term\n     *  @type string\n     *  @default <i>Empty string</i>\n     */\n    \"sSearch\": \"\",\n\n    /**\n     * Flag to indicate if the search term should be interpreted as a\n     * regular expression (true) or not (false) and therefore and special\n     * regex characters escaped.\n     *  @type boolean\n     *  @default false\n     */\n    \"bRegex\": false,\n\n    /**\n     * Flag to indicate if DataTables is to use its smart filtering or not.\n     *  @type boolean\n     *  @default true\n     */\n    \"bSmart\": true\n  };\n  /**\n   * Template object for the way in which DataTables holds information about\n   * each individual row. This is the object format used for the settings\n   * aoData array.\n   *  @namespace\n   */\n\n  DataTable.models.oRow = {\n    /**\n     * TR element for the row\n     *  @type node\n     *  @default null\n     */\n    \"nTr\": null,\n\n    /**\n     * Array of TD elements for each row. This is null until the row has been\n     * created.\n     *  @type array nodes\n     *  @default []\n     */\n    \"anCells\": null,\n\n    /**\n     * Data object from the original data source for the row. This is either\n     * an array if using the traditional form of DataTables, or an object if\n     * using mData options. The exact type will depend on the passed in\n     * data from the data source, or will be an array if using DOM a data\n     * source.\n     *  @type array|object\n     *  @default []\n     */\n    \"_aData\": [],\n\n    /**\n     * Sorting data cache - this array is ostensibly the same length as the\n     * number of columns (although each index is generated only as it is\n     * needed), and holds the data that is used for sorting each column in the\n     * row. We do this cache generation at the start of the sort in order that\n     * the formatting of the sort data need be done only once for each cell\n     * per sort. This array should not be read from or written to by anything\n     * other than the master sorting methods.\n     *  @type array\n     *  @default null\n     *  @private\n     */\n    \"_aSortData\": null,\n\n    /**\n     * Per cell filtering data cache. As per the sort data cache, used to\n     * increase the performance of the filtering in DataTables\n     *  @type array\n     *  @default null\n     *  @private\n     */\n    \"_aFilterData\": null,\n\n    /**\n     * Filtering data cache. This is the same as the cell filtering cache, but\n     * in this case a string rather than an array. This is easily computed with\n     * a join on `_aFilterData`, but is provided as a cache so the join isn't\n     * needed on every search (memory traded for performance)\n     *  @type array\n     *  @default null\n     *  @private\n     */\n    \"_sFilterRow\": null,\n\n    /**\n     * Cache of the class name that DataTables has applied to the row, so we\n     * can quickly look at this variable rather than needing to do a DOM check\n     * on className for the nTr property.\n     *  @type string\n     *  @default <i>Empty string</i>\n     *  @private\n     */\n    \"_sRowStripe\": \"\",\n\n    /**\n     * Denote if the original data source was from the DOM, or the data source\n     * object. This is used for invalidating data, so DataTables can\n     * automatically read data from the original source, unless uninstructed\n     * otherwise.\n     *  @type string\n     *  @default null\n     *  @private\n     */\n    \"src\": null,\n\n    /**\n     * Index in the aoData array. This saves an indexOf lookup when we have the\n     * object, but want to know the index\n     *  @type integer\n     *  @default -1\n     *  @private\n     */\n    \"idx\": -1\n  };\n  /**\n   * Template object for the column information object in DataTables. This object\n   * is held in the settings aoColumns array and contains all the information that\n   * DataTables needs about each individual column.\n   *\n   * Note that this object is related to {@link DataTable.defaults.column}\n   * but this one is the internal data store for DataTables's cache of columns.\n   * It should NOT be manipulated outside of DataTables. Any configuration should\n   * be done through the initialisation options.\n   *  @namespace\n   */\n\n  DataTable.models.oColumn = {\n    /**\n     * Column index. This could be worked out on-the-fly with $.inArray, but it\n     * is faster to just hold it as a variable\n     *  @type integer\n     *  @default null\n     */\n    \"idx\": null,\n\n    /**\n     * A list of the columns that sorting should occur on when this column\n     * is sorted. That this property is an array allows multi-column sorting\n     * to be defined for a column (for example first name / last name columns\n     * would benefit from this). The values are integers pointing to the\n     * columns to be sorted on (typically it will be a single integer pointing\n     * at itself, but that doesn't need to be the case).\n     *  @type array\n     */\n    \"aDataSort\": null,\n\n    /**\n     * Define the sorting directions that are applied to the column, in sequence\n     * as the column is repeatedly sorted upon - i.e. the first value is used\n     * as the sorting direction when the column if first sorted (clicked on).\n     * Sort it again (click again) and it will move on to the next index.\n     * Repeat until loop.\n     *  @type array\n     */\n    \"asSorting\": null,\n\n    /**\n     * Flag to indicate if the column is searchable, and thus should be included\n     * in the filtering or not.\n     *  @type boolean\n     */\n    \"bSearchable\": null,\n\n    /**\n     * Flag to indicate if the column is sortable or not.\n     *  @type boolean\n     */\n    \"bSortable\": null,\n\n    /**\n     * Flag to indicate if the column is currently visible in the table or not\n     *  @type boolean\n     */\n    \"bVisible\": null,\n\n    /**\n     * Store for manual type assignment using the `column.type` option. This\n     * is held in store so we can manipulate the column's `sType` property.\n     *  @type string\n     *  @default null\n     *  @private\n     */\n    \"_sManualType\": null,\n\n    /**\n     * Flag to indicate if HTML5 data attributes should be used as the data\n     * source for filtering or sorting. True is either are.\n     *  @type boolean\n     *  @default false\n     *  @private\n     */\n    \"_bAttrSrc\": false,\n\n    /**\n     * Developer definable function that is called whenever a cell is created (Ajax source,\n     * etc) or processed for input (DOM source). This can be used as a compliment to mRender\n     * allowing you to modify the DOM element (add background colour for example) when the\n     * element is available.\n     *  @type function\n     *  @param {element} nTd The TD node that has been created\n     *  @param {*} sData The Data for the cell\n     *  @param {array|object} oData The data for the whole row\n     *  @param {int} iRow The row index for the aoData data store\n     *  @default null\n     */\n    \"fnCreatedCell\": null,\n\n    /**\n     * Function to get data from a cell in a column. You should <b>never</b>\n     * access data directly through _aData internally in DataTables - always use\n     * the method attached to this property. It allows mData to function as\n     * required. This function is automatically assigned by the column\n     * initialisation method\n     *  @type function\n     *  @param {array|object} oData The data array/object for the array\n     *    (i.e. aoData[]._aData)\n     *  @param {string} sSpecific The specific data type you want to get -\n     *    'display', 'type' 'filter' 'sort'\n     *  @returns {*} The data for the cell from the given row's data\n     *  @default null\n     */\n    \"fnGetData\": null,\n\n    /**\n     * Function to set data for a cell in the column. You should <b>never</b>\n     * set the data directly to _aData internally in DataTables - always use\n     * this method. It allows mData to function as required. This function\n     * is automatically assigned by the column initialisation method\n     *  @type function\n     *  @param {array|object} oData The data array/object for the array\n     *    (i.e. aoData[]._aData)\n     *  @param {*} sValue Value to set\n     *  @default null\n     */\n    \"fnSetData\": null,\n\n    /**\n     * Property to read the value for the cells in the column from the data\n     * source array / object. If null, then the default content is used, if a\n     * function is given then the return from the function is used.\n     *  @type function|int|string|null\n     *  @default null\n     */\n    \"mData\": null,\n\n    /**\n     * Partner property to mData which is used (only when defined) to get\n     * the data - i.e. it is basically the same as mData, but without the\n     * 'set' option, and also the data fed to it is the result from mData.\n     * This is the rendering method to match the data method of mData.\n     *  @type function|int|string|null\n     *  @default null\n     */\n    \"mRender\": null,\n\n    /**\n     * Unique header TH/TD element for this column - this is what the sorting\n     * listener is attached to (if sorting is enabled.)\n     *  @type node\n     *  @default null\n     */\n    \"nTh\": null,\n\n    /**\n     * Unique footer TH/TD element for this column (if there is one). Not used\n     * in DataTables as such, but can be used for plug-ins to reference the\n     * footer for each column.\n     *  @type node\n     *  @default null\n     */\n    \"nTf\": null,\n\n    /**\n     * The class to apply to all TD elements in the table's TBODY for the column\n     *  @type string\n     *  @default null\n     */\n    \"sClass\": null,\n\n    /**\n     * When DataTables calculates the column widths to assign to each column,\n     * it finds the longest string in each column and then constructs a\n     * temporary table and reads the widths from that. The problem with this\n     * is that \"mmm\" is much wider then \"iiii\", but the latter is a longer\n     * string - thus the calculation can go wrong (doing it properly and putting\n     * it into an DOM object and measuring that is horribly(!) slow). Thus as\n     * a \"work around\" we provide this option. It will append its value to the\n     * text that is found to be the longest string for the column - i.e. padding.\n     *  @type string\n     */\n    \"sContentPadding\": null,\n\n    /**\n     * Allows a default value to be given for a column's data, and will be used\n     * whenever a null data source is encountered (this can be because mData\n     * is set to null, or because the data source itself is null).\n     *  @type string\n     *  @default null\n     */\n    \"sDefaultContent\": null,\n\n    /**\n     * Name for the column, allowing reference to the column by name as well as\n     * by index (needs a lookup to work by name).\n     *  @type string\n     */\n    \"sName\": null,\n\n    /**\n     * Custom sorting data type - defines which of the available plug-ins in\n     * afnSortData the custom sorting will use - if any is defined.\n     *  @type string\n     *  @default std\n     */\n    \"sSortDataType\": 'std',\n\n    /**\n     * Class to be applied to the header element when sorting on this column\n     *  @type string\n     *  @default null\n     */\n    \"sSortingClass\": null,\n\n    /**\n     * Class to be applied to the header element when sorting on this column -\n     * when jQuery UI theming is used.\n     *  @type string\n     *  @default null\n     */\n    \"sSortingClassJUI\": null,\n\n    /**\n     * Title of the column - what is seen in the TH element (nTh).\n     *  @type string\n     */\n    \"sTitle\": null,\n\n    /**\n     * Column sorting and filtering type\n     *  @type string\n     *  @default null\n     */\n    \"sType\": null,\n\n    /**\n     * Width of the column\n     *  @type string\n     *  @default null\n     */\n    \"sWidth\": null,\n\n    /**\n     * Width of the column when it was first \"encountered\"\n     *  @type string\n     *  @default null\n     */\n    \"sWidthOrig\": null\n  };\n  /*\n   * Developer note: The properties of the object below are given in Hungarian\n   * notation, that was used as the interface for DataTables prior to v1.10, however\n   * from v1.10 onwards the primary interface is camel case. In order to avoid\n   * breaking backwards compatibility utterly with this change, the Hungarian\n   * version is still, internally the primary interface, but is is not documented\n   * - hence the @name tags in each doc comment. This allows a Javascript function\n   * to create a map from Hungarian notation to camel case (going the other direction\n   * would require each property to be listed, which would at around 3K to the size\n   * of DataTables, while this method is about a 0.5K hit.\n   *\n   * Ultimately this does pave the way for Hungarian notation to be dropped\n   * completely, but that is a massive amount of work and will break current\n   * installs (therefore is on-hold until v2).\n   */\n\n  /**\n   * Initialisation options that can be given to DataTables at initialisation\n   * time.\n   *  @namespace\n   */\n\n  DataTable.defaults = {\n    /**\n     * An array of data to use for the table, passed in at initialisation which\n     * will be used in preference to any data which is already in the DOM. This is\n     * particularly useful for constructing tables purely in Javascript, for\n     * example with a custom Ajax call.\n     *  @type array\n     *  @default null\n     *\n     *  @dtopt Option\n     *  @name DataTable.defaults.data\n     *\n     *  @example\n     *    // Using a 2D array data source\n     *    $(document).ready( function () {\n     *      $('#example').dataTable( {\n     *        \"data\": [\n     *          ['Trident', 'Internet Explorer 4.0', 'Win 95+', 4, 'X'],\n     *          ['Trident', 'Internet Explorer 5.0', 'Win 95+', 5, 'C'],\n     *        ],\n     *        \"columns\": [\n     *          { \"title\": \"Engine\" },\n     *          { \"title\": \"Browser\" },\n     *          { \"title\": \"Platform\" },\n     *          { \"title\": \"Version\" },\n     *          { \"title\": \"Grade\" }\n     *        ]\n     *      } );\n     *    } );\n     *\n     *  @example\n     *    // Using an array of objects as a data source (`data`)\n     *    $(document).ready( function () {\n     *      $('#example').dataTable( {\n     *        \"data\": [\n     *          {\n     *            \"engine\":   \"Trident\",\n     *            \"browser\":  \"Internet Explorer 4.0\",\n     *            \"platform\": \"Win 95+\",\n     *            \"version\":  4,\n     *            \"grade\":    \"X\"\n     *          },\n     *          {\n     *            \"engine\":   \"Trident\",\n     *            \"browser\":  \"Internet Explorer 5.0\",\n     *            \"platform\": \"Win 95+\",\n     *            \"version\":  5,\n     *            \"grade\":    \"C\"\n     *          }\n     *        ],\n     *        \"columns\": [\n     *          { \"title\": \"Engine\",   \"data\": \"engine\" },\n     *          { \"title\": \"Browser\",  \"data\": \"browser\" },\n     *          { \"title\": \"Platform\", \"data\": \"platform\" },\n     *          { \"title\": \"Version\",  \"data\": \"version\" },\n     *          { \"title\": \"Grade\",    \"data\": \"grade\" }\n     *        ]\n     *      } );\n     *    } );\n     */\n    \"aaData\": null,\n\n    /**\n     * If ordering is enabled, then DataTables will perform a first pass sort on\n     * initialisation. You can define which column(s) the sort is performed\n     * upon, and the sorting direction, with this variable. The `sorting` array\n     * should contain an array for each column to be sorted initially containing\n     * the column's index and a direction string ('asc' or 'desc').\n     *  @type array\n     *  @default [[0,'asc']]\n     *\n     *  @dtopt Option\n     *  @name DataTable.defaults.order\n     *\n     *  @example\n     *    // Sort by 3rd column first, and then 4th column\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"order\": [[2,'asc'], [3,'desc']]\n     *      } );\n     *    } );\n     *\n     *    // No initial sorting\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"order\": []\n     *      } );\n     *    } );\n     */\n    \"aaSorting\": [[0, 'asc']],\n\n    /**\n     * This parameter is basically identical to the `sorting` parameter, but\n     * cannot be overridden by user interaction with the table. What this means\n     * is that you could have a column (visible or hidden) which the sorting\n     * will always be forced on first - any sorting after that (from the user)\n     * will then be performed as required. This can be useful for grouping rows\n     * together.\n     *  @type array\n     *  @default null\n     *\n     *  @dtopt Option\n     *  @name DataTable.defaults.orderFixed\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"orderFixed\": [[0,'asc']]\n     *      } );\n     *    } )\n     */\n    \"aaSortingFixed\": [],\n\n    /**\n     * DataTables can be instructed to load data to display in the table from a\n     * Ajax source. This option defines how that Ajax call is made and where to.\n     *\n     * The `ajax` property has three different modes of operation, depending on\n     * how it is defined. These are:\n     *\n     * * `string` - Set the URL from where the data should be loaded from.\n     * * `object` - Define properties for `jQuery.ajax`.\n     * * `function` - Custom data get function\n     *\n     * `string`\n     * --------\n     *\n     * As a string, the `ajax` property simply defines the URL from which\n     * DataTables will load data.\n     *\n     * `object`\n     * --------\n     *\n     * As an object, the parameters in the object are passed to\n     * [jQuery.ajax](http://api.jquery.com/jQuery.ajax/) allowing fine control\n     * of the Ajax request. DataTables has a number of default parameters which\n     * you can override using this option. Please refer to the jQuery\n     * documentation for a full description of the options available, although\n     * the following parameters provide additional options in DataTables or\n     * require special consideration:\n     *\n     * * `data` - As with jQuery, `data` can be provided as an object, but it\n     *   can also be used as a function to manipulate the data DataTables sends\n     *   to the server. The function takes a single parameter, an object of\n     *   parameters with the values that DataTables has readied for sending. An\n     *   object may be returned which will be merged into the DataTables\n     *   defaults, or you can add the items to the object that was passed in and\n     *   not return anything from the function. This supersedes `fnServerParams`\n     *   from DataTables 1.9-.\n     *\n     * * `dataSrc` - By default DataTables will look for the property `data` (or\n     *   `aaData` for compatibility with DataTables 1.9-) when obtaining data\n     *   from an Ajax source or for server-side processing - this parameter\n     *   allows that property to be changed. You can use Javascript dotted\n     *   object notation to get a data source for multiple levels of nesting, or\n     *   it my be used as a function. As a function it takes a single parameter,\n     *   the JSON returned from the server, which can be manipulated as\n     *   required, with the returned value being that used by DataTables as the\n     *   data source for the table. This supersedes `sAjaxDataProp` from\n     *   DataTables 1.9-.\n     *\n     * * `success` - Should not be overridden it is used internally in\n     *   DataTables. To manipulate / transform the data returned by the server\n     *   use `ajax.dataSrc`, or use `ajax` as a function (see below).\n     *\n     * `function`\n     * ----------\n     *\n     * As a function, making the Ajax call is left up to yourself allowing\n     * complete control of the Ajax request. Indeed, if desired, a method other\n     * than Ajax could be used to obtain the required data, such as Web storage\n     * or an AIR database.\n     *\n     * The function is given four parameters and no return is required. The\n     * parameters are:\n     *\n     * 1. _object_ - Data to send to the server\n     * 2. _function_ - Callback function that must be executed when the required\n     *    data has been obtained. That data should be passed into the callback\n     *    as the only parameter\n     * 3. _object_ - DataTables settings object for the table\n     *\n     * Note that this supersedes `fnServerData` from DataTables 1.9-.\n     *\n     *  @type string|object|function\n     *  @default null\n     *\n     *  @dtopt Option\n     *  @name DataTable.defaults.ajax\n     *  @since 1.10.0\n     *\n     * @example\n     *   // Get JSON data from a file via Ajax.\n     *   // Note DataTables expects data in the form `{ data: [ ...data... ] }` by default).\n     *   $('#example').dataTable( {\n     *     \"ajax\": \"data.json\"\n     *   } );\n     *\n     * @example\n     *   // Get JSON data from a file via Ajax, using `dataSrc` to change\n     *   // `data` to `tableData` (i.e. `{ tableData: [ ...data... ] }`)\n     *   $('#example').dataTable( {\n     *     \"ajax\": {\n     *       \"url\": \"data.json\",\n     *       \"dataSrc\": \"tableData\"\n     *     }\n     *   } );\n     *\n     * @example\n     *   // Get JSON data from a file via Ajax, using `dataSrc` to read data\n     *   // from a plain array rather than an array in an object\n     *   $('#example').dataTable( {\n     *     \"ajax\": {\n     *       \"url\": \"data.json\",\n     *       \"dataSrc\": \"\"\n     *     }\n     *   } );\n     *\n     * @example\n     *   // Manipulate the data returned from the server - add a link to data\n     *   // (note this can, should, be done using `render` for the column - this\n     *   // is just a simple example of how the data can be manipulated).\n     *   $('#example').dataTable( {\n     *     \"ajax\": {\n     *       \"url\": \"data.json\",\n     *       \"dataSrc\": function ( json ) {\n     *         for ( var i=0, ien=json.length ; i<ien ; i++ ) {\n     *           json[i][0] = '<a href=\"/message/'+json[i][0]+'>View message</a>';\n     *         }\n     *         return json;\n     *       }\n     *     }\n     *   } );\n     *\n     * @example\n     *   // Add data to the request\n     *   $('#example').dataTable( {\n     *     \"ajax\": {\n     *       \"url\": \"data.json\",\n     *       \"data\": function ( d ) {\n     *         return {\n     *           \"extra_search\": $('#extra').val()\n     *         };\n     *       }\n     *     }\n     *   } );\n     *\n     * @example\n     *   // Send request as POST\n     *   $('#example').dataTable( {\n     *     \"ajax\": {\n     *       \"url\": \"data.json\",\n     *       \"type\": \"POST\"\n     *     }\n     *   } );\n     *\n     * @example\n     *   // Get the data from localStorage (could interface with a form for\n     *   // adding, editing and removing rows).\n     *   $('#example').dataTable( {\n     *     \"ajax\": function (data, callback, settings) {\n     *       callback(\n     *         JSON.parse( localStorage.getItem('dataTablesData') )\n     *       );\n     *     }\n     *   } );\n     */\n    \"ajax\": null,\n\n    /**\n     * This parameter allows you to readily specify the entries in the length drop\n     * down menu that DataTables shows when pagination is enabled. It can be\n     * either a 1D array of options which will be used for both the displayed\n     * option and the value, or a 2D array which will use the array in the first\n     * position as the value, and the array in the second position as the\n     * displayed options (useful for language strings such as 'All').\n     *\n     * Note that the `pageLength` property will be automatically set to the\n     * first value given in this array, unless `pageLength` is also provided.\n     *  @type array\n     *  @default [ 10, 25, 50, 100 ]\n     *\n     *  @dtopt Option\n     *  @name DataTable.defaults.lengthMenu\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"lengthMenu\": [[10, 25, 50, -1], [10, 25, 50, \"All\"]]\n     *      } );\n     *    } );\n     */\n    \"aLengthMenu\": [10, 25, 50, 100],\n\n    /**\n     * The `columns` option in the initialisation parameter allows you to define\n     * details about the way individual columns behave. For a full list of\n     * column options that can be set, please see\n     * {@link DataTable.defaults.column}. Note that if you use `columns` to\n     * define your columns, you must have an entry in the array for every single\n     * column that you have in your table (these can be null if you don't which\n     * to specify any options).\n     *  @member\n     *\n     *  @name DataTable.defaults.column\n     */\n    \"aoColumns\": null,\n\n    /**\n     * Very similar to `columns`, `columnDefs` allows you to target a specific\n     * column, multiple columns, or all columns, using the `targets` property of\n     * each object in the array. This allows great flexibility when creating\n     * tables, as the `columnDefs` arrays can be of any length, targeting the\n     * columns you specifically want. `columnDefs` may use any of the column\n     * options available: {@link DataTable.defaults.column}, but it _must_\n     * have `targets` defined in each object in the array. Values in the `targets`\n     * array may be:\n     *   <ul>\n     *     <li>a string - class name will be matched on the TH for the column</li>\n     *     <li>0 or a positive integer - column index counting from the left</li>\n     *     <li>a negative integer - column index counting from the right</li>\n     *     <li>the string \"_all\" - all columns (i.e. assign a default)</li>\n     *   </ul>\n     *  @member\n     *\n     *  @name DataTable.defaults.columnDefs\n     */\n    \"aoColumnDefs\": null,\n\n    /**\n     * Basically the same as `search`, this parameter defines the individual column\n     * filtering state at initialisation time. The array must be of the same size\n     * as the number of columns, and each element be an object with the parameters\n     * `search` and `escapeRegex` (the latter is optional). 'null' is also\n     * accepted and the default will be used.\n     *  @type array\n     *  @default []\n     *\n     *  @dtopt Option\n     *  @name DataTable.defaults.searchCols\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"searchCols\": [\n     *          null,\n     *          { \"search\": \"My filter\" },\n     *          null,\n     *          { \"search\": \"^[0-9]\", \"escapeRegex\": false }\n     *        ]\n     *      } );\n     *    } )\n     */\n    \"aoSearchCols\": [],\n\n    /**\n     * An array of CSS classes that should be applied to displayed rows. This\n     * array may be of any length, and DataTables will apply each class\n     * sequentially, looping when required.\n     *  @type array\n     *  @default null <i>Will take the values determined by the `oClasses.stripe*`\n     *    options</i>\n     *\n     *  @dtopt Option\n     *  @name DataTable.defaults.stripeClasses\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"stripeClasses\": [ 'strip1', 'strip2', 'strip3' ]\n     *      } );\n     *    } )\n     */\n    \"asStripeClasses\": null,\n\n    /**\n     * Enable or disable automatic column width calculation. This can be disabled\n     * as an optimisation (it takes some time to calculate the widths) if the\n     * tables widths are passed in using `columns`.\n     *  @type boolean\n     *  @default true\n     *\n     *  @dtopt Features\n     *  @name DataTable.defaults.autoWidth\n     *\n     *  @example\n     *    $(document).ready( function () {\n     *      $('#example').dataTable( {\n     *        \"autoWidth\": false\n     *      } );\n     *    } );\n     */\n    \"bAutoWidth\": true,\n\n    /**\n     * Deferred rendering can provide DataTables with a huge speed boost when you\n     * are using an Ajax or JS data source for the table. This option, when set to\n     * true, will cause DataTables to defer the creation of the table elements for\n     * each row until they are needed for a draw - saving a significant amount of\n     * time.\n     *  @type boolean\n     *  @default false\n     *\n     *  @dtopt Features\n     *  @name DataTable.defaults.deferRender\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"ajax\": \"sources/arrays.txt\",\n     *        \"deferRender\": true\n     *      } );\n     *    } );\n     */\n    \"bDeferRender\": false,\n\n    /**\n     * Replace a DataTable which matches the given selector and replace it with\n     * one which has the properties of the new initialisation object passed. If no\n     * table matches the selector, then the new DataTable will be constructed as\n     * per normal.\n     *  @type boolean\n     *  @default false\n     *\n     *  @dtopt Options\n     *  @name DataTable.defaults.destroy\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"srollY\": \"200px\",\n     *        \"paginate\": false\n     *      } );\n     *\n     *      // Some time later....\n     *      $('#example').dataTable( {\n     *        \"filter\": false,\n     *        \"destroy\": true\n     *      } );\n     *    } );\n     */\n    \"bDestroy\": false,\n\n    /**\n     * Enable or disable filtering of data. Filtering in DataTables is \"smart\" in\n     * that it allows the end user to input multiple words (space separated) and\n     * will match a row containing those words, even if not in the order that was\n     * specified (this allow matching across multiple columns). Note that if you\n     * wish to use filtering in DataTables this must remain 'true' - to remove the\n     * default filtering input box and retain filtering abilities, please use\n     * {@link DataTable.defaults.dom}.\n     *  @type boolean\n     *  @default true\n     *\n     *  @dtopt Features\n     *  @name DataTable.defaults.searching\n     *\n     *  @example\n     *    $(document).ready( function () {\n     *      $('#example').dataTable( {\n     *        \"searching\": false\n     *      } );\n     *    } );\n     */\n    \"bFilter\": true,\n\n    /**\n     * Enable or disable the table information display. This shows information\n     * about the data that is currently visible on the page, including information\n     * about filtered data if that action is being performed.\n     *  @type boolean\n     *  @default true\n     *\n     *  @dtopt Features\n     *  @name DataTable.defaults.info\n     *\n     *  @example\n     *    $(document).ready( function () {\n     *      $('#example').dataTable( {\n     *        \"info\": false\n     *      } );\n     *    } );\n     */\n    \"bInfo\": true,\n\n    /**\n     * Allows the end user to select the size of a formatted page from a select\n     * menu (sizes are 10, 25, 50 and 100). Requires pagination (`paginate`).\n     *  @type boolean\n     *  @default true\n     *\n     *  @dtopt Features\n     *  @name DataTable.defaults.lengthChange\n     *\n     *  @example\n     *    $(document).ready( function () {\n     *      $('#example').dataTable( {\n     *        \"lengthChange\": false\n     *      } );\n     *    } );\n     */\n    \"bLengthChange\": true,\n\n    /**\n     * Enable or disable pagination.\n     *  @type boolean\n     *  @default true\n     *\n     *  @dtopt Features\n     *  @name DataTable.defaults.paging\n     *\n     *  @example\n     *    $(document).ready( function () {\n     *      $('#example').dataTable( {\n     *        \"paging\": false\n     *      } );\n     *    } );\n     */\n    \"bPaginate\": true,\n\n    /**\n     * Enable or disable the display of a 'processing' indicator when the table is\n     * being processed (e.g. a sort). This is particularly useful for tables with\n     * large amounts of data where it can take a noticeable amount of time to sort\n     * the entries.\n     *  @type boolean\n     *  @default false\n     *\n     *  @dtopt Features\n     *  @name DataTable.defaults.processing\n     *\n     *  @example\n     *    $(document).ready( function () {\n     *      $('#example').dataTable( {\n     *        \"processing\": true\n     *      } );\n     *    } );\n     */\n    \"bProcessing\": false,\n\n    /**\n     * Retrieve the DataTables object for the given selector. Note that if the\n     * table has already been initialised, this parameter will cause DataTables\n     * to simply return the object that has already been set up - it will not take\n     * account of any changes you might have made to the initialisation object\n     * passed to DataTables (setting this parameter to true is an acknowledgement\n     * that you understand this). `destroy` can be used to reinitialise a table if\n     * you need.\n     *  @type boolean\n     *  @default false\n     *\n     *  @dtopt Options\n     *  @name DataTable.defaults.retrieve\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      initTable();\n     *      tableActions();\n     *    } );\n     *\n     *    function initTable ()\n     *    {\n     *      return $('#example').dataTable( {\n     *        \"scrollY\": \"200px\",\n     *        \"paginate\": false,\n     *        \"retrieve\": true\n     *      } );\n     *    }\n     *\n     *    function tableActions ()\n     *    {\n     *      var table = initTable();\n     *      // perform API operations with oTable\n     *    }\n     */\n    \"bRetrieve\": false,\n\n    /**\n     * When vertical (y) scrolling is enabled, DataTables will force the height of\n     * the table's viewport to the given height at all times (useful for layout).\n     * However, this can look odd when filtering data down to a small data set,\n     * and the footer is left \"floating\" further down. This parameter (when\n     * enabled) will cause DataTables to collapse the table's viewport down when\n     * the result set will fit within the given Y height.\n     *  @type boolean\n     *  @default false\n     *\n     *  @dtopt Options\n     *  @name DataTable.defaults.scrollCollapse\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"scrollY\": \"200\",\n     *        \"scrollCollapse\": true\n     *      } );\n     *    } );\n     */\n    \"bScrollCollapse\": false,\n\n    /**\n     * Configure DataTables to use server-side processing. Note that the\n     * `ajax` parameter must also be given in order to give DataTables a\n     * source to obtain the required data for each draw.\n     *  @type boolean\n     *  @default false\n     *\n     *  @dtopt Features\n     *  @dtopt Server-side\n     *  @name DataTable.defaults.serverSide\n     *\n     *  @example\n     *    $(document).ready( function () {\n     *      $('#example').dataTable( {\n     *        \"serverSide\": true,\n     *        \"ajax\": \"xhr.php\"\n     *      } );\n     *    } );\n     */\n    \"bServerSide\": false,\n\n    /**\n     * Enable or disable sorting of columns. Sorting of individual columns can be\n     * disabled by the `sortable` option for each column.\n     *  @type boolean\n     *  @default true\n     *\n     *  @dtopt Features\n     *  @name DataTable.defaults.ordering\n     *\n     *  @example\n     *    $(document).ready( function () {\n     *      $('#example').dataTable( {\n     *        \"ordering\": false\n     *      } );\n     *    } );\n     */\n    \"bSort\": true,\n\n    /**\n     * Enable or display DataTables' ability to sort multiple columns at the\n     * same time (activated by shift-click by the user).\n     *  @type boolean\n     *  @default true\n     *\n     *  @dtopt Options\n     *  @name DataTable.defaults.orderMulti\n     *\n     *  @example\n     *    // Disable multiple column sorting ability\n     *    $(document).ready( function () {\n     *      $('#example').dataTable( {\n     *        \"orderMulti\": false\n     *      } );\n     *    } );\n     */\n    \"bSortMulti\": true,\n\n    /**\n     * Allows control over whether DataTables should use the top (true) unique\n     * cell that is found for a single column, or the bottom (false - default).\n     * This is useful when using complex headers.\n     *  @type boolean\n     *  @default false\n     *\n     *  @dtopt Options\n     *  @name DataTable.defaults.orderCellsTop\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"orderCellsTop\": true\n     *      } );\n     *    } );\n     */\n    \"bSortCellsTop\": false,\n\n    /**\n     * Enable or disable the addition of the classes `sorting\\_1`, `sorting\\_2` and\n     * `sorting\\_3` to the columns which are currently being sorted on. This is\n     * presented as a feature switch as it can increase processing time (while\n     * classes are removed and added) so for large data sets you might want to\n     * turn this off.\n     *  @type boolean\n     *  @default true\n     *\n     *  @dtopt Features\n     *  @name DataTable.defaults.orderClasses\n     *\n     *  @example\n     *    $(document).ready( function () {\n     *      $('#example').dataTable( {\n     *        \"orderClasses\": false\n     *      } );\n     *    } );\n     */\n    \"bSortClasses\": true,\n\n    /**\n     * Enable or disable state saving. When enabled HTML5 `localStorage` will be\n     * used to save table display information such as pagination information,\n     * display length, filtering and sorting. As such when the end user reloads\n     * the page the display display will match what thy had previously set up.\n     *\n     * Due to the use of `localStorage` the default state saving is not supported\n     * in IE6 or 7. If state saving is required in those browsers, use\n     * `stateSaveCallback` to provide a storage solution such as cookies.\n     *  @type boolean\n     *  @default false\n     *\n     *  @dtopt Features\n     *  @name DataTable.defaults.stateSave\n     *\n     *  @example\n     *    $(document).ready( function () {\n     *      $('#example').dataTable( {\n     *        \"stateSave\": true\n     *      } );\n     *    } );\n     */\n    \"bStateSave\": false,\n\n    /**\n     * This function is called when a TR element is created (and all TD child\n     * elements have been inserted), or registered if using a DOM source, allowing\n     * manipulation of the TR element (adding classes etc).\n     *  @type function\n     *  @param {node} row \"TR\" element for the current row\n     *  @param {array} data Raw data array for this row\n     *  @param {int} dataIndex The index of this row in the internal aoData array\n     *\n     *  @dtopt Callbacks\n     *  @name DataTable.defaults.createdRow\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"createdRow\": function( row, data, dataIndex ) {\n     *          // Bold the grade for all 'A' grade browsers\n     *          if ( data[4] == \"A\" )\n     *          {\n     *            $('td:eq(4)', row).html( '<b>A</b>' );\n     *          }\n     *        }\n     *      } );\n     *    } );\n     */\n    \"fnCreatedRow\": null,\n\n    /**\n     * This function is called on every 'draw' event, and allows you to\n     * dynamically modify any aspect you want about the created DOM.\n     *  @type function\n     *  @param {object} settings DataTables settings object\n     *\n     *  @dtopt Callbacks\n     *  @name DataTable.defaults.drawCallback\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"drawCallback\": function( settings ) {\n     *          alert( 'DataTables has redrawn the table' );\n     *        }\n     *      } );\n     *    } );\n     */\n    \"fnDrawCallback\": null,\n\n    /**\n     * Identical to fnHeaderCallback() but for the table footer this function\n     * allows you to modify the table footer on every 'draw' event.\n     *  @type function\n     *  @param {node} foot \"TR\" element for the footer\n     *  @param {array} data Full table data (as derived from the original HTML)\n     *  @param {int} start Index for the current display starting point in the\n     *    display array\n     *  @param {int} end Index for the current display ending point in the\n     *    display array\n     *  @param {array int} display Index array to translate the visual position\n     *    to the full data array\n     *\n     *  @dtopt Callbacks\n     *  @name DataTable.defaults.footerCallback\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"footerCallback\": function( tfoot, data, start, end, display ) {\n     *          tfoot.getElementsByTagName('th')[0].innerHTML = \"Starting index is \"+start;\n     *        }\n     *      } );\n     *    } )\n     */\n    \"fnFooterCallback\": null,\n\n    /**\n     * When rendering large numbers in the information element for the table\n     * (i.e. \"Showing 1 to 10 of 57 entries\") DataTables will render large numbers\n     * to have a comma separator for the 'thousands' units (e.g. 1 million is\n     * rendered as \"1,000,000\") to help readability for the end user. This\n     * function will override the default method DataTables uses.\n     *  @type function\n     *  @member\n     *  @param {int} toFormat number to be formatted\n     *  @returns {string} formatted string for DataTables to show the number\n     *\n     *  @dtopt Callbacks\n     *  @name DataTable.defaults.formatNumber\n     *\n     *  @example\n     *    // Format a number using a single quote for the separator (note that\n     *    // this can also be done with the language.thousands option)\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"formatNumber\": function ( toFormat ) {\n     *          return toFormat.toString().replace(\n     *            /\\B(?=(\\d{3})+(?!\\d))/g, \"'\"\n     *          );\n     *        };\n     *      } );\n     *    } );\n     */\n    \"fnFormatNumber\": function (toFormat) {\n      return toFormat.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, this.oLanguage.sThousands);\n    },\n\n    /**\n     * This function is called on every 'draw' event, and allows you to\n     * dynamically modify the header row. This can be used to calculate and\n     * display useful information about the table.\n     *  @type function\n     *  @param {node} head \"TR\" element for the header\n     *  @param {array} data Full table data (as derived from the original HTML)\n     *  @param {int} start Index for the current display starting point in the\n     *    display array\n     *  @param {int} end Index for the current display ending point in the\n     *    display array\n     *  @param {array int} display Index array to translate the visual position\n     *    to the full data array\n     *\n     *  @dtopt Callbacks\n     *  @name DataTable.defaults.headerCallback\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"fheaderCallback\": function( head, data, start, end, display ) {\n     *          head.getElementsByTagName('th')[0].innerHTML = \"Displaying \"+(end-start)+\" records\";\n     *        }\n     *      } );\n     *    } )\n     */\n    \"fnHeaderCallback\": null,\n\n    /**\n     * The information element can be used to convey information about the current\n     * state of the table. Although the internationalisation options presented by\n     * DataTables are quite capable of dealing with most customisations, there may\n     * be times where you wish to customise the string further. This callback\n     * allows you to do exactly that.\n     *  @type function\n     *  @param {object} oSettings DataTables settings object\n     *  @param {int} start Starting position in data for the draw\n     *  @param {int} end End position in data for the draw\n     *  @param {int} max Total number of rows in the table (regardless of\n     *    filtering)\n     *  @param {int} total Total number of rows in the data set, after filtering\n     *  @param {string} pre The string that DataTables has formatted using it's\n     *    own rules\n     *  @returns {string} The string to be displayed in the information element.\n     *\n     *  @dtopt Callbacks\n     *  @name DataTable.defaults.infoCallback\n     *\n     *  @example\n     *    $('#example').dataTable( {\n     *      \"infoCallback\": function( settings, start, end, max, total, pre ) {\n     *        return start +\" to \"+ end;\n     *      }\n     *    } );\n     */\n    \"fnInfoCallback\": null,\n\n    /**\n     * Called when the table has been initialised. Normally DataTables will\n     * initialise sequentially and there will be no need for this function,\n     * however, this does not hold true when using external language information\n     * since that is obtained using an async XHR call.\n     *  @type function\n     *  @param {object} settings DataTables settings object\n     *  @param {object} json The JSON object request from the server - only\n     *    present if client-side Ajax sourced data is used\n     *\n     *  @dtopt Callbacks\n     *  @name DataTable.defaults.initComplete\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"initComplete\": function(settings, json) {\n     *          alert( 'DataTables has finished its initialisation.' );\n     *        }\n     *      } );\n     *    } )\n     */\n    \"fnInitComplete\": null,\n\n    /**\n     * Called at the very start of each table draw and can be used to cancel the\n     * draw by returning false, any other return (including undefined) results in\n     * the full draw occurring).\n     *  @type function\n     *  @param {object} settings DataTables settings object\n     *  @returns {boolean} False will cancel the draw, anything else (including no\n     *    return) will allow it to complete.\n     *\n     *  @dtopt Callbacks\n     *  @name DataTable.defaults.preDrawCallback\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"preDrawCallback\": function( settings ) {\n     *          if ( $('#test').val() == 1 ) {\n     *            return false;\n     *          }\n     *        }\n     *      } );\n     *    } );\n     */\n    \"fnPreDrawCallback\": null,\n\n    /**\n     * This function allows you to 'post process' each row after it have been\n     * generated for each table draw, but before it is rendered on screen. This\n     * function might be used for setting the row class name etc.\n     *  @type function\n     *  @param {node} row \"TR\" element for the current row\n     *  @param {array} data Raw data array for this row\n     *  @param {int} displayIndex The display index for the current table draw\n     *  @param {int} displayIndexFull The index of the data in the full list of\n     *    rows (after filtering)\n     *\n     *  @dtopt Callbacks\n     *  @name DataTable.defaults.rowCallback\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"rowCallback\": function( row, data, displayIndex, displayIndexFull ) {\n     *          // Bold the grade for all 'A' grade browsers\n     *          if ( data[4] == \"A\" ) {\n     *            $('td:eq(4)', row).html( '<b>A</b>' );\n     *          }\n     *        }\n     *      } );\n     *    } );\n     */\n    \"fnRowCallback\": null,\n\n    /**\n     * __Deprecated__ The functionality provided by this parameter has now been\n     * superseded by that provided through `ajax`, which should be used instead.\n     *\n     * This parameter allows you to override the default function which obtains\n     * the data from the server so something more suitable for your application.\n     * For example you could use POST data, or pull information from a Gears or\n     * AIR database.\n     *  @type function\n     *  @member\n     *  @param {string} source HTTP source to obtain the data from (`ajax`)\n     *  @param {array} data A key/value pair object containing the data to send\n     *    to the server\n     *  @param {function} callback to be called on completion of the data get\n     *    process that will draw the data on the page.\n     *  @param {object} settings DataTables settings object\n     *\n     *  @dtopt Callbacks\n     *  @dtopt Server-side\n     *  @name DataTable.defaults.serverData\n     *\n     *  @deprecated 1.10. Please use `ajax` for this functionality now.\n     */\n    \"fnServerData\": null,\n\n    /**\n     * __Deprecated__ The functionality provided by this parameter has now been\n     * superseded by that provided through `ajax`, which should be used instead.\n     *\n     *  It is often useful to send extra data to the server when making an Ajax\n     * request - for example custom filtering information, and this callback\n     * function makes it trivial to send extra information to the server. The\n     * passed in parameter is the data set that has been constructed by\n     * DataTables, and you can add to this or modify it as you require.\n     *  @type function\n     *  @param {array} data Data array (array of objects which are name/value\n     *    pairs) that has been constructed by DataTables and will be sent to the\n     *    server. In the case of Ajax sourced data with server-side processing\n     *    this will be an empty array, for server-side processing there will be a\n     *    significant number of parameters!\n     *  @returns {undefined} Ensure that you modify the data array passed in,\n     *    as this is passed by reference.\n     *\n     *  @dtopt Callbacks\n     *  @dtopt Server-side\n     *  @name DataTable.defaults.serverParams\n     *\n     *  @deprecated 1.10. Please use `ajax` for this functionality now.\n     */\n    \"fnServerParams\": null,\n\n    /**\n     * Load the table state. With this function you can define from where, and how, the\n     * state of a table is loaded. By default DataTables will load from `localStorage`\n     * but you might wish to use a server-side database or cookies.\n     *  @type function\n     *  @member\n     *  @param {object} settings DataTables settings object\n     *  @param {object} callback Callback that can be executed when done. It\n     *    should be passed the loaded state object.\n     *  @return {object} The DataTables state object to be loaded\n     *\n     *  @dtopt Callbacks\n     *  @name DataTable.defaults.stateLoadCallback\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"stateSave\": true,\n     *        \"stateLoadCallback\": function (settings, callback) {\n     *          $.ajax( {\n     *            \"url\": \"/state_load\",\n     *            \"dataType\": \"json\",\n     *            \"success\": function (json) {\n     *              callback( json );\n     *            }\n     *          } );\n     *        }\n     *      } );\n     *    } );\n     */\n    \"fnStateLoadCallback\": function (settings) {\n      try {\n        return JSON.parse((settings.iStateDuration === -1 ? sessionStorage : localStorage).getItem('DataTables_' + settings.sInstance + '_' + location.pathname));\n      } catch (e) {\n        return {};\n      }\n    },\n\n    /**\n     * Callback which allows modification of the saved state prior to loading that state.\n     * This callback is called when the table is loading state from the stored data, but\n     * prior to the settings object being modified by the saved state. Note that for\n     * plug-in authors, you should use the `stateLoadParams` event to load parameters for\n     * a plug-in.\n     *  @type function\n     *  @param {object} settings DataTables settings object\n     *  @param {object} data The state object that is to be loaded\n     *\n     *  @dtopt Callbacks\n     *  @name DataTable.defaults.stateLoadParams\n     *\n     *  @example\n     *    // Remove a saved filter, so filtering is never loaded\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"stateSave\": true,\n     *        \"stateLoadParams\": function (settings, data) {\n     *          data.oSearch.sSearch = \"\";\n     *        }\n     *      } );\n     *    } );\n     *\n     *  @example\n     *    // Disallow state loading by returning false\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"stateSave\": true,\n     *        \"stateLoadParams\": function (settings, data) {\n     *          return false;\n     *        }\n     *      } );\n     *    } );\n     */\n    \"fnStateLoadParams\": null,\n\n    /**\n     * Callback that is called when the state has been loaded from the state saving method\n     * and the DataTables settings object has been modified as a result of the loaded state.\n     *  @type function\n     *  @param {object} settings DataTables settings object\n     *  @param {object} data The state object that was loaded\n     *\n     *  @dtopt Callbacks\n     *  @name DataTable.defaults.stateLoaded\n     *\n     *  @example\n     *    // Show an alert with the filtering value that was saved\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"stateSave\": true,\n     *        \"stateLoaded\": function (settings, data) {\n     *          alert( 'Saved filter was: '+data.oSearch.sSearch );\n     *        }\n     *      } );\n     *    } );\n     */\n    \"fnStateLoaded\": null,\n\n    /**\n     * Save the table state. This function allows you to define where and how the state\n     * information for the table is stored By default DataTables will use `localStorage`\n     * but you might wish to use a server-side database or cookies.\n     *  @type function\n     *  @member\n     *  @param {object} settings DataTables settings object\n     *  @param {object} data The state object to be saved\n     *\n     *  @dtopt Callbacks\n     *  @name DataTable.defaults.stateSaveCallback\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"stateSave\": true,\n     *        \"stateSaveCallback\": function (settings, data) {\n     *          // Send an Ajax request to the server with the state object\n     *          $.ajax( {\n     *            \"url\": \"/state_save\",\n     *            \"data\": data,\n     *            \"dataType\": \"json\",\n     *            \"method\": \"POST\"\n     *            \"success\": function () {}\n     *          } );\n     *        }\n     *      } );\n     *    } );\n     */\n    \"fnStateSaveCallback\": function (settings, data) {\n      try {\n        (settings.iStateDuration === -1 ? sessionStorage : localStorage).setItem('DataTables_' + settings.sInstance + '_' + location.pathname, JSON.stringify(data));\n      } catch (e) {}\n    },\n\n    /**\n     * Callback which allows modification of the state to be saved. Called when the table\n     * has changed state a new state save is required. This method allows modification of\n     * the state saving object prior to actually doing the save, including addition or\n     * other state properties or modification. Note that for plug-in authors, you should\n     * use the `stateSaveParams` event to save parameters for a plug-in.\n     *  @type function\n     *  @param {object} settings DataTables settings object\n     *  @param {object} data The state object to be saved\n     *\n     *  @dtopt Callbacks\n     *  @name DataTable.defaults.stateSaveParams\n     *\n     *  @example\n     *    // Remove a saved filter, so filtering is never saved\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"stateSave\": true,\n     *        \"stateSaveParams\": function (settings, data) {\n     *          data.oSearch.sSearch = \"\";\n     *        }\n     *      } );\n     *    } );\n     */\n    \"fnStateSaveParams\": null,\n\n    /**\n     * Duration for which the saved state information is considered valid. After this period\n     * has elapsed the state will be returned to the default.\n     * Value is given in seconds.\n     *  @type int\n     *  @default 7200 <i>(2 hours)</i>\n     *\n     *  @dtopt Options\n     *  @name DataTable.defaults.stateDuration\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"stateDuration\": 60*60*24; // 1 day\n     *      } );\n     *    } )\n     */\n    \"iStateDuration\": 7200,\n\n    /**\n     * When enabled DataTables will not make a request to the server for the first\n     * page draw - rather it will use the data already on the page (no sorting etc\n     * will be applied to it), thus saving on an XHR at load time. `deferLoading`\n     * is used to indicate that deferred loading is required, but it is also used\n     * to tell DataTables how many records there are in the full table (allowing\n     * the information element and pagination to be displayed correctly). In the case\n     * where a filtering is applied to the table on initial load, this can be\n     * indicated by giving the parameter as an array, where the first element is\n     * the number of records available after filtering and the second element is the\n     * number of records without filtering (allowing the table information element\n     * to be shown correctly).\n     *  @type int | array\n     *  @default null\n     *\n     *  @dtopt Options\n     *  @name DataTable.defaults.deferLoading\n     *\n     *  @example\n     *    // 57 records available in the table, no filtering applied\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"serverSide\": true,\n     *        \"ajax\": \"scripts/server_processing.php\",\n     *        \"deferLoading\": 57\n     *      } );\n     *    } );\n     *\n     *  @example\n     *    // 57 records after filtering, 100 without filtering (an initial filter applied)\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"serverSide\": true,\n     *        \"ajax\": \"scripts/server_processing.php\",\n     *        \"deferLoading\": [ 57, 100 ],\n     *        \"search\": {\n     *          \"search\": \"my_filter\"\n     *        }\n     *      } );\n     *    } );\n     */\n    \"iDeferLoading\": null,\n\n    /**\n     * Number of rows to display on a single page when using pagination. If\n     * feature enabled (`lengthChange`) then the end user will be able to override\n     * this to a custom setting using a pop-up menu.\n     *  @type int\n     *  @default 10\n     *\n     *  @dtopt Options\n     *  @name DataTable.defaults.pageLength\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"pageLength\": 50\n     *      } );\n     *    } )\n     */\n    \"iDisplayLength\": 10,\n\n    /**\n     * Define the starting point for data display when using DataTables with\n     * pagination. Note that this parameter is the number of records, rather than\n     * the page number, so if you have 10 records per page and want to start on\n     * the third page, it should be \"20\".\n     *  @type int\n     *  @default 0\n     *\n     *  @dtopt Options\n     *  @name DataTable.defaults.displayStart\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"displayStart\": 20\n     *      } );\n     *    } )\n     */\n    \"iDisplayStart\": 0,\n\n    /**\n     * By default DataTables allows keyboard navigation of the table (sorting, paging,\n     * and filtering) by adding a `tabindex` attribute to the required elements. This\n     * allows you to tab through the controls and press the enter key to activate them.\n     * The tabindex is default 0, meaning that the tab follows the flow of the document.\n     * You can overrule this using this parameter if you wish. Use a value of -1 to\n     * disable built-in keyboard navigation.\n     *  @type int\n     *  @default 0\n     *\n     *  @dtopt Options\n     *  @name DataTable.defaults.tabIndex\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"tabIndex\": 1\n     *      } );\n     *    } );\n     */\n    \"iTabIndex\": 0,\n\n    /**\n     * Classes that DataTables assigns to the various components and features\n     * that it adds to the HTML table. This allows classes to be configured\n     * during initialisation in addition to through the static\n     * {@link DataTable.ext.oStdClasses} object).\n     *  @namespace\n     *  @name DataTable.defaults.classes\n     */\n    \"oClasses\": {},\n\n    /**\n     * All strings that DataTables uses in the user interface that it creates\n     * are defined in this object, allowing you to modified them individually or\n     * completely replace them all as required.\n     *  @namespace\n     *  @name DataTable.defaults.language\n     */\n    \"oLanguage\": {\n      /**\n       * Strings that are used for WAI-ARIA labels and controls only (these are not\n       * actually visible on the page, but will be read by screenreaders, and thus\n       * must be internationalised as well).\n       *  @namespace\n       *  @name DataTable.defaults.language.aria\n       */\n      \"oAria\": {\n        /**\n         * ARIA label that is added to the table headers when the column may be\n         * sorted ascending by activing the column (click or return when focused).\n         * Note that the column header is prefixed to this string.\n         *  @type string\n         *  @default : activate to sort column ascending\n         *\n         *  @dtopt Language\n         *  @name DataTable.defaults.language.aria.sortAscending\n         *\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"language\": {\n         *          \"aria\": {\n         *            \"sortAscending\": \" - click/return to sort ascending\"\n         *          }\n         *        }\n         *      } );\n         *    } );\n         */\n        \"sSortAscending\": \": activate to sort column ascending\",\n\n        /**\n         * ARIA label that is added to the table headers when the column may be\n         * sorted descending by activing the column (click or return when focused).\n         * Note that the column header is prefixed to this string.\n         *  @type string\n         *  @default : activate to sort column ascending\n         *\n         *  @dtopt Language\n         *  @name DataTable.defaults.language.aria.sortDescending\n         *\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"language\": {\n         *          \"aria\": {\n         *            \"sortDescending\": \" - click/return to sort descending\"\n         *          }\n         *        }\n         *      } );\n         *    } );\n         */\n        \"sSortDescending\": \": activate to sort column descending\"\n      },\n\n      /**\n       * Pagination string used by DataTables for the built-in pagination\n       * control types.\n       *  @namespace\n       *  @name DataTable.defaults.language.paginate\n       */\n      \"oPaginate\": {\n        /**\n         * Text to use when using the 'full_numbers' type of pagination for the\n         * button to take the user to the first page.\n         *  @type string\n         *  @default First\n         *\n         *  @dtopt Language\n         *  @name DataTable.defaults.language.paginate.first\n         *\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"language\": {\n         *          \"paginate\": {\n         *            \"first\": \"First page\"\n         *          }\n         *        }\n         *      } );\n         *    } );\n         */\n        \"sFirst\": \"First\",\n\n        /**\n         * Text to use when using the 'full_numbers' type of pagination for the\n         * button to take the user to the last page.\n         *  @type string\n         *  @default Last\n         *\n         *  @dtopt Language\n         *  @name DataTable.defaults.language.paginate.last\n         *\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"language\": {\n         *          \"paginate\": {\n         *            \"last\": \"Last page\"\n         *          }\n         *        }\n         *      } );\n         *    } );\n         */\n        \"sLast\": \"Last\",\n\n        /**\n         * Text to use for the 'next' pagination button (to take the user to the\n         * next page).\n         *  @type string\n         *  @default Next\n         *\n         *  @dtopt Language\n         *  @name DataTable.defaults.language.paginate.next\n         *\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"language\": {\n         *          \"paginate\": {\n         *            \"next\": \"Next page\"\n         *          }\n         *        }\n         *      } );\n         *    } );\n         */\n        \"sNext\": \"Next\",\n\n        /**\n         * Text to use for the 'previous' pagination button (to take the user to\n         * the previous page).\n         *  @type string\n         *  @default Previous\n         *\n         *  @dtopt Language\n         *  @name DataTable.defaults.language.paginate.previous\n         *\n         *  @example\n         *    $(document).ready( function() {\n         *      $('#example').dataTable( {\n         *        \"language\": {\n         *          \"paginate\": {\n         *            \"previous\": \"Previous page\"\n         *          }\n         *        }\n         *      } );\n         *    } );\n         */\n        \"sPrevious\": \"Previous\"\n      },\n\n      /**\n       * This string is shown in preference to `zeroRecords` when the table is\n       * empty of data (regardless of filtering). Note that this is an optional\n       * parameter - if it is not given, the value of `zeroRecords` will be used\n       * instead (either the default or given value).\n       *  @type string\n       *  @default No data available in table\n       *\n       *  @dtopt Language\n       *  @name DataTable.defaults.language.emptyTable\n       *\n       *  @example\n       *    $(document).ready( function() {\n       *      $('#example').dataTable( {\n       *        \"language\": {\n       *          \"emptyTable\": \"No data available in table\"\n       *        }\n       *      } );\n       *    } );\n       */\n      \"sEmptyTable\": \"No data available in table\",\n\n      /**\n       * This string gives information to the end user about the information\n       * that is current on display on the page. The following tokens can be\n       * used in the string and will be dynamically replaced as the table\n       * display updates. This tokens can be placed anywhere in the string, or\n       * removed as needed by the language requires:\n       *\n       * * `\\_START\\_` - Display index of the first record on the current page\n       * * `\\_END\\_` - Display index of the last record on the current page\n       * * `\\_TOTAL\\_` - Number of records in the table after filtering\n       * * `\\_MAX\\_` - Number of records in the table without filtering\n       * * `\\_PAGE\\_` - Current page number\n       * * `\\_PAGES\\_` - Total number of pages of data in the table\n       *\n       *  @type string\n       *  @default Showing _START_ to _END_ of _TOTAL_ entries\n       *\n       *  @dtopt Language\n       *  @name DataTable.defaults.language.info\n       *\n       *  @example\n       *    $(document).ready( function() {\n       *      $('#example').dataTable( {\n       *        \"language\": {\n       *          \"info\": \"Showing page _PAGE_ of _PAGES_\"\n       *        }\n       *      } );\n       *    } );\n       */\n      \"sInfo\": \"Showing _START_ to _END_ of _TOTAL_ entries\",\n\n      /**\n       * Display information string for when the table is empty. Typically the\n       * format of this string should match `info`.\n       *  @type string\n       *  @default Showing 0 to 0 of 0 entries\n       *\n       *  @dtopt Language\n       *  @name DataTable.defaults.language.infoEmpty\n       *\n       *  @example\n       *    $(document).ready( function() {\n       *      $('#example').dataTable( {\n       *        \"language\": {\n       *          \"infoEmpty\": \"No entries to show\"\n       *        }\n       *      } );\n       *    } );\n       */\n      \"sInfoEmpty\": \"Showing 0 to 0 of 0 entries\",\n\n      /**\n       * When a user filters the information in a table, this string is appended\n       * to the information (`info`) to give an idea of how strong the filtering\n       * is. The variable _MAX_ is dynamically updated.\n       *  @type string\n       *  @default (filtered from _MAX_ total entries)\n       *\n       *  @dtopt Language\n       *  @name DataTable.defaults.language.infoFiltered\n       *\n       *  @example\n       *    $(document).ready( function() {\n       *      $('#example').dataTable( {\n       *        \"language\": {\n       *          \"infoFiltered\": \" - filtering from _MAX_ records\"\n       *        }\n       *      } );\n       *    } );\n       */\n      \"sInfoFiltered\": \"(filtered from _MAX_ total entries)\",\n\n      /**\n       * If can be useful to append extra information to the info string at times,\n       * and this variable does exactly that. This information will be appended to\n       * the `info` (`infoEmpty` and `infoFiltered` in whatever combination they are\n       * being used) at all times.\n       *  @type string\n       *  @default <i>Empty string</i>\n       *\n       *  @dtopt Language\n       *  @name DataTable.defaults.language.infoPostFix\n       *\n       *  @example\n       *    $(document).ready( function() {\n       *      $('#example').dataTable( {\n       *        \"language\": {\n       *          \"infoPostFix\": \"All records shown are derived from real information.\"\n       *        }\n       *      } );\n       *    } );\n       */\n      \"sInfoPostFix\": \"\",\n\n      /**\n       * This decimal place operator is a little different from the other\n       * language options since DataTables doesn't output floating point\n       * numbers, so it won't ever use this for display of a number. Rather,\n       * what this parameter does is modify the sort methods of the table so\n       * that numbers which are in a format which has a character other than\n       * a period (`.`) as a decimal place will be sorted numerically.\n       *\n       * Note that numbers with different decimal places cannot be shown in\n       * the same table and still be sortable, the table must be consistent.\n       * However, multiple different tables on the page can use different\n       * decimal place characters.\n       *  @type string\n       *  @default \n       *\n       *  @dtopt Language\n       *  @name DataTable.defaults.language.decimal\n       *\n       *  @example\n       *    $(document).ready( function() {\n       *      $('#example').dataTable( {\n       *        \"language\": {\n       *          \"decimal\": \",\"\n       *          \"thousands\": \".\"\n       *        }\n       *      } );\n       *    } );\n       */\n      \"sDecimal\": \"\",\n\n      /**\n       * DataTables has a build in number formatter (`formatNumber`) which is\n       * used to format large numbers that are used in the table information.\n       * By default a comma is used, but this can be trivially changed to any\n       * character you wish with this parameter.\n       *  @type string\n       *  @default ,\n       *\n       *  @dtopt Language\n       *  @name DataTable.defaults.language.thousands\n       *\n       *  @example\n       *    $(document).ready( function() {\n       *      $('#example').dataTable( {\n       *        \"language\": {\n       *          \"thousands\": \"'\"\n       *        }\n       *      } );\n       *    } );\n       */\n      \"sThousands\": \",\",\n\n      /**\n       * Detail the action that will be taken when the drop down menu for the\n       * pagination length option is changed. The '_MENU_' variable is replaced\n       * with a default select list of 10, 25, 50 and 100, and can be replaced\n       * with a custom select box if required.\n       *  @type string\n       *  @default Show _MENU_ entries\n       *\n       *  @dtopt Language\n       *  @name DataTable.defaults.language.lengthMenu\n       *\n       *  @example\n       *    // Language change only\n       *    $(document).ready( function() {\n       *      $('#example').dataTable( {\n       *        \"language\": {\n       *          \"lengthMenu\": \"Display _MENU_ records\"\n       *        }\n       *      } );\n       *    } );\n       *\n       *  @example\n       *    // Language and options change\n       *    $(document).ready( function() {\n       *      $('#example').dataTable( {\n       *        \"language\": {\n       *          \"lengthMenu\": 'Display <select>'+\n       *            '<option value=\"10\">10</option>'+\n       *            '<option value=\"20\">20</option>'+\n       *            '<option value=\"30\">30</option>'+\n       *            '<option value=\"40\">40</option>'+\n       *            '<option value=\"50\">50</option>'+\n       *            '<option value=\"-1\">All</option>'+\n       *            '</select> records'\n       *        }\n       *      } );\n       *    } );\n       */\n      \"sLengthMenu\": \"Show _MENU_ entries\",\n\n      /**\n       * When using Ajax sourced data and during the first draw when DataTables is\n       * gathering the data, this message is shown in an empty row in the table to\n       * indicate to the end user the the data is being loaded. Note that this\n       * parameter is not used when loading data by server-side processing, just\n       * Ajax sourced data with client-side processing.\n       *  @type string\n       *  @default Loading...\n       *\n       *  @dtopt Language\n       *  @name DataTable.defaults.language.loadingRecords\n       *\n       *  @example\n       *    $(document).ready( function() {\n       *      $('#example').dataTable( {\n       *        \"language\": {\n       *          \"loadingRecords\": \"Please wait - loading...\"\n       *        }\n       *      } );\n       *    } );\n       */\n      \"sLoadingRecords\": \"Loading...\",\n\n      /**\n       * Text which is displayed when the table is processing a user action\n       * (usually a sort command or similar).\n       *  @type string\n       *  @default Processing...\n       *\n       *  @dtopt Language\n       *  @name DataTable.defaults.language.processing\n       *\n       *  @example\n       *    $(document).ready( function() {\n       *      $('#example').dataTable( {\n       *        \"language\": {\n       *          \"processing\": \"DataTables is currently busy\"\n       *        }\n       *      } );\n       *    } );\n       */\n      \"sProcessing\": \"Processing...\",\n\n      /**\n       * Details the actions that will be taken when the user types into the\n       * filtering input text box. The variable \"_INPUT_\", if used in the string,\n       * is replaced with the HTML text box for the filtering input allowing\n       * control over where it appears in the string. If \"_INPUT_\" is not given\n       * then the input box is appended to the string automatically.\n       *  @type string\n       *  @default Search:\n       *\n       *  @dtopt Language\n       *  @name DataTable.defaults.language.search\n       *\n       *  @example\n       *    // Input text box will be appended at the end automatically\n       *    $(document).ready( function() {\n       *      $('#example').dataTable( {\n       *        \"language\": {\n       *          \"search\": \"Filter records:\"\n       *        }\n       *      } );\n       *    } );\n       *\n       *  @example\n       *    // Specify where the filter should appear\n       *    $(document).ready( function() {\n       *      $('#example').dataTable( {\n       *        \"language\": {\n       *          \"search\": \"Apply filter _INPUT_ to table\"\n       *        }\n       *      } );\n       *    } );\n       */\n      \"sSearch\": \"Search:\",\n\n      /**\n       * Assign a `placeholder` attribute to the search `input` element\n       *  @type string\n       *  @default \n       *\n       *  @dtopt Language\n       *  @name DataTable.defaults.language.searchPlaceholder\n       */\n      \"sSearchPlaceholder\": \"\",\n\n      /**\n       * All of the language information can be stored in a file on the\n       * server-side, which DataTables will look up if this parameter is passed.\n       * It must store the URL of the language file, which is in a JSON format,\n       * and the object has the same properties as the oLanguage object in the\n       * initialiser object (i.e. the above parameters). Please refer to one of\n       * the example language files to see how this works in action.\n       *  @type string\n       *  @default <i>Empty string - i.e. disabled</i>\n       *\n       *  @dtopt Language\n       *  @name DataTable.defaults.language.url\n       *\n       *  @example\n       *    $(document).ready( function() {\n       *      $('#example').dataTable( {\n       *        \"language\": {\n       *          \"url\": \"http://www.sprymedia.co.uk/dataTables/lang.txt\"\n       *        }\n       *      } );\n       *    } );\n       */\n      \"sUrl\": \"\",\n\n      /**\n       * Text shown inside the table records when the is no information to be\n       * displayed after filtering. `emptyTable` is shown when there is simply no\n       * information in the table at all (regardless of filtering).\n       *  @type string\n       *  @default No matching records found\n       *\n       *  @dtopt Language\n       *  @name DataTable.defaults.language.zeroRecords\n       *\n       *  @example\n       *    $(document).ready( function() {\n       *      $('#example').dataTable( {\n       *        \"language\": {\n       *          \"zeroRecords\": \"No records to display\"\n       *        }\n       *      } );\n       *    } );\n       */\n      \"sZeroRecords\": \"No matching records found\"\n    },\n\n    /**\n     * This parameter allows you to have define the global filtering state at\n     * initialisation time. As an object the `search` parameter must be\n     * defined, but all other parameters are optional. When `regex` is true,\n     * the search string will be treated as a regular expression, when false\n     * (default) it will be treated as a straight string. When `smart`\n     * DataTables will use it's smart filtering methods (to word match at\n     * any point in the data), when false this will not be done.\n     *  @namespace\n     *  @extends DataTable.models.oSearch\n     *\n     *  @dtopt Options\n     *  @name DataTable.defaults.search\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"search\": {\"search\": \"Initial search\"}\n     *      } );\n     *    } )\n     */\n    \"oSearch\": $.extend({}, DataTable.models.oSearch),\n\n    /**\n     * __Deprecated__ The functionality provided by this parameter has now been\n     * superseded by that provided through `ajax`, which should be used instead.\n     *\n     * By default DataTables will look for the property `data` (or `aaData` for\n     * compatibility with DataTables 1.9-) when obtaining data from an Ajax\n     * source or for server-side processing - this parameter allows that\n     * property to be changed. You can use Javascript dotted object notation to\n     * get a data source for multiple levels of nesting.\n     *  @type string\n     *  @default data\n     *\n     *  @dtopt Options\n     *  @dtopt Server-side\n     *  @name DataTable.defaults.ajaxDataProp\n     *\n     *  @deprecated 1.10. Please use `ajax` for this functionality now.\n     */\n    \"sAjaxDataProp\": \"data\",\n\n    /**\n     * __Deprecated__ The functionality provided by this parameter has now been\n     * superseded by that provided through `ajax`, which should be used instead.\n     *\n     * You can instruct DataTables to load data from an external\n     * source using this parameter (use aData if you want to pass data in you\n     * already have). Simply provide a url a JSON object can be obtained from.\n     *  @type string\n     *  @default null\n     *\n     *  @dtopt Options\n     *  @dtopt Server-side\n     *  @name DataTable.defaults.ajaxSource\n     *\n     *  @deprecated 1.10. Please use `ajax` for this functionality now.\n     */\n    \"sAjaxSource\": null,\n\n    /**\n     * This initialisation variable allows you to specify exactly where in the\n     * DOM you want DataTables to inject the various controls it adds to the page\n     * (for example you might want the pagination controls at the top of the\n     * table). DIV elements (with or without a custom class) can also be added to\n     * aid styling. The follow syntax is used:\n     *   <ul>\n     *     <li>The following options are allowed:\n     *       <ul>\n     *         <li>'l' - Length changing</li>\n     *         <li>'f' - Filtering input</li>\n     *         <li>'t' - The table!</li>\n     *         <li>'i' - Information</li>\n     *         <li>'p' - Pagination</li>\n     *         <li>'r' - pRocessing</li>\n     *       </ul>\n     *     </li>\n     *     <li>The following constants are allowed:\n     *       <ul>\n     *         <li>'H' - jQueryUI theme \"header\" classes ('fg-toolbar ui-widget-header ui-corner-tl ui-corner-tr ui-helper-clearfix')</li>\n     *         <li>'F' - jQueryUI theme \"footer\" classes ('fg-toolbar ui-widget-header ui-corner-bl ui-corner-br ui-helper-clearfix')</li>\n     *       </ul>\n     *     </li>\n     *     <li>The following syntax is expected:\n     *       <ul>\n     *         <li>'&lt;' and '&gt;' - div elements</li>\n     *         <li>'&lt;\"class\" and '&gt;' - div with a class</li>\n     *         <li>'&lt;\"#id\" and '&gt;' - div with an ID</li>\n     *       </ul>\n     *     </li>\n     *     <li>Examples:\n     *       <ul>\n     *         <li>'&lt;\"wrapper\"flipt&gt;'</li>\n     *         <li>'&lt;lf&lt;t&gt;ip&gt;'</li>\n     *       </ul>\n     *     </li>\n     *   </ul>\n     *  @type string\n     *  @default lfrtip <i>(when `jQueryUI` is false)</i> <b>or</b>\n     *    <\"H\"lfr>t<\"F\"ip> <i>(when `jQueryUI` is true)</i>\n     *\n     *  @dtopt Options\n     *  @name DataTable.defaults.dom\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"dom\": '&lt;\"top\"i&gt;rt&lt;\"bottom\"flp&gt;&lt;\"clear\"&gt;'\n     *      } );\n     *    } );\n     */\n    \"sDom\": \"lfrtip\",\n\n    /**\n     * Search delay option. This will throttle full table searches that use the\n     * DataTables provided search input element (it does not effect calls to\n     * `dt-api search()`, providing a delay before the search is made.\n     *  @type integer\n     *  @default 0\n     *\n     *  @dtopt Options\n     *  @name DataTable.defaults.searchDelay\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"searchDelay\": 200\n     *      } );\n     *    } )\n     */\n    \"searchDelay\": null,\n\n    /**\n     * DataTables features six different built-in options for the buttons to\n     * display for pagination control:\n     *\n     * * `numbers` - Page number buttons only\n     * * `simple` - 'Previous' and 'Next' buttons only\n     * * 'simple_numbers` - 'Previous' and 'Next' buttons, plus page numbers\n     * * `full` - 'First', 'Previous', 'Next' and 'Last' buttons\n     * * `full_numbers` - 'First', 'Previous', 'Next' and 'Last' buttons, plus page numbers\n     * * `first_last_numbers` - 'First' and 'Last' buttons, plus page numbers\n     *  \n     * Further methods can be added using {@link DataTable.ext.oPagination}.\n     *  @type string\n     *  @default simple_numbers\n     *\n     *  @dtopt Options\n     *  @name DataTable.defaults.pagingType\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"pagingType\": \"full_numbers\"\n     *      } );\n     *    } )\n     */\n    \"sPaginationType\": \"simple_numbers\",\n\n    /**\n     * Enable horizontal scrolling. When a table is too wide to fit into a\n     * certain layout, or you have a large number of columns in the table, you\n     * can enable x-scrolling to show the table in a viewport, which can be\n     * scrolled. This property can be `true` which will allow the table to\n     * scroll horizontally when needed, or any CSS unit, or a number (in which\n     * case it will be treated as a pixel measurement). Setting as simply `true`\n     * is recommended.\n     *  @type boolean|string\n     *  @default <i>blank string - i.e. disabled</i>\n     *\n     *  @dtopt Features\n     *  @name DataTable.defaults.scrollX\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"scrollX\": true,\n     *        \"scrollCollapse\": true\n     *      } );\n     *    } );\n     */\n    \"sScrollX\": \"\",\n\n    /**\n     * This property can be used to force a DataTable to use more width than it\n     * might otherwise do when x-scrolling is enabled. For example if you have a\n     * table which requires to be well spaced, this parameter is useful for\n     * \"over-sizing\" the table, and thus forcing scrolling. This property can by\n     * any CSS unit, or a number (in which case it will be treated as a pixel\n     * measurement).\n     *  @type string\n     *  @default <i>blank string - i.e. disabled</i>\n     *\n     *  @dtopt Options\n     *  @name DataTable.defaults.scrollXInner\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"scrollX\": \"100%\",\n     *        \"scrollXInner\": \"110%\"\n     *      } );\n     *    } );\n     */\n    \"sScrollXInner\": \"\",\n\n    /**\n     * Enable vertical scrolling. Vertical scrolling will constrain the DataTable\n     * to the given height, and enable scrolling for any data which overflows the\n     * current viewport. This can be used as an alternative to paging to display\n     * a lot of data in a small area (although paging and scrolling can both be\n     * enabled at the same time). This property can be any CSS unit, or a number\n     * (in which case it will be treated as a pixel measurement).\n     *  @type string\n     *  @default <i>blank string - i.e. disabled</i>\n     *\n     *  @dtopt Features\n     *  @name DataTable.defaults.scrollY\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"scrollY\": \"200px\",\n     *        \"paginate\": false\n     *      } );\n     *    } );\n     */\n    \"sScrollY\": \"\",\n\n    /**\n     * __Deprecated__ The functionality provided by this parameter has now been\n     * superseded by that provided through `ajax`, which should be used instead.\n     *\n     * Set the HTTP method that is used to make the Ajax call for server-side\n     * processing or Ajax sourced data.\n     *  @type string\n     *  @default GET\n     *\n     *  @dtopt Options\n     *  @dtopt Server-side\n     *  @name DataTable.defaults.serverMethod\n     *\n     *  @deprecated 1.10. Please use `ajax` for this functionality now.\n     */\n    \"sServerMethod\": \"GET\",\n\n    /**\n     * DataTables makes use of renderers when displaying HTML elements for\n     * a table. These renderers can be added or modified by plug-ins to\n     * generate suitable mark-up for a site. For example the Bootstrap\n     * integration plug-in for DataTables uses a paging button renderer to\n     * display pagination buttons in the mark-up required by Bootstrap.\n     *\n     * For further information about the renderers available see\n     * DataTable.ext.renderer\n     *  @type string|object\n     *  @default null\n     *\n     *  @name DataTable.defaults.renderer\n     *\n     */\n    \"renderer\": null,\n\n    /**\n     * Set the data property name that DataTables should use to get a row's id\n     * to set as the `id` property in the node.\n     *  @type string\n     *  @default DT_RowId\n     *\n     *  @name DataTable.defaults.rowId\n     */\n    \"rowId\": \"DT_RowId\"\n  };\n\n  _fnHungarianMap(DataTable.defaults);\n  /*\n   * Developer note - See note in model.defaults.js about the use of Hungarian\n   * notation and camel case.\n   */\n\n  /**\n   * Column options that can be given to DataTables at initialisation time.\n   *  @namespace\n   */\n\n\n  DataTable.defaults.column = {\n    /**\n     * Define which column(s) an order will occur on for this column. This\n     * allows a column's ordering to take multiple columns into account when\n     * doing a sort or use the data from a different column. For example first\n     * name / last name columns make sense to do a multi-column sort over the\n     * two columns.\n     *  @type array|int\n     *  @default null <i>Takes the value of the column index automatically</i>\n     *\n     *  @name DataTable.defaults.column.orderData\n     *  @dtopt Columns\n     *\n     *  @example\n     *    // Using `columnDefs`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columnDefs\": [\n     *          { \"orderData\": [ 0, 1 ], \"targets\": [ 0 ] },\n     *          { \"orderData\": [ 1, 0 ], \"targets\": [ 1 ] },\n     *          { \"orderData\": 2, \"targets\": [ 2 ] }\n     *        ]\n     *      } );\n     *    } );\n     *\n     *  @example\n     *    // Using `columns`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columns\": [\n     *          { \"orderData\": [ 0, 1 ] },\n     *          { \"orderData\": [ 1, 0 ] },\n     *          { \"orderData\": 2 },\n     *          null,\n     *          null\n     *        ]\n     *      } );\n     *    } );\n     */\n    \"aDataSort\": null,\n    \"iDataSort\": -1,\n\n    /**\n     * You can control the default ordering direction, and even alter the\n     * behaviour of the sort handler (i.e. only allow ascending ordering etc)\n     * using this parameter.\n     *  @type array\n     *  @default [ 'asc', 'desc' ]\n     *\n     *  @name DataTable.defaults.column.orderSequence\n     *  @dtopt Columns\n     *\n     *  @example\n     *    // Using `columnDefs`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columnDefs\": [\n     *          { \"orderSequence\": [ \"asc\" ], \"targets\": [ 1 ] },\n     *          { \"orderSequence\": [ \"desc\", \"asc\", \"asc\" ], \"targets\": [ 2 ] },\n     *          { \"orderSequence\": [ \"desc\" ], \"targets\": [ 3 ] }\n     *        ]\n     *      } );\n     *    } );\n     *\n     *  @example\n     *    // Using `columns`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columns\": [\n     *          null,\n     *          { \"orderSequence\": [ \"asc\" ] },\n     *          { \"orderSequence\": [ \"desc\", \"asc\", \"asc\" ] },\n     *          { \"orderSequence\": [ \"desc\" ] },\n     *          null\n     *        ]\n     *      } );\n     *    } );\n     */\n    \"asSorting\": ['asc', 'desc'],\n\n    /**\n     * Enable or disable filtering on the data in this column.\n     *  @type boolean\n     *  @default true\n     *\n     *  @name DataTable.defaults.column.searchable\n     *  @dtopt Columns\n     *\n     *  @example\n     *    // Using `columnDefs`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columnDefs\": [\n     *          { \"searchable\": false, \"targets\": [ 0 ] }\n     *        ] } );\n     *    } );\n     *\n     *  @example\n     *    // Using `columns`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columns\": [\n     *          { \"searchable\": false },\n     *          null,\n     *          null,\n     *          null,\n     *          null\n     *        ] } );\n     *    } );\n     */\n    \"bSearchable\": true,\n\n    /**\n     * Enable or disable ordering on this column.\n     *  @type boolean\n     *  @default true\n     *\n     *  @name DataTable.defaults.column.orderable\n     *  @dtopt Columns\n     *\n     *  @example\n     *    // Using `columnDefs`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columnDefs\": [\n     *          { \"orderable\": false, \"targets\": [ 0 ] }\n     *        ] } );\n     *    } );\n     *\n     *  @example\n     *    // Using `columns`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columns\": [\n     *          { \"orderable\": false },\n     *          null,\n     *          null,\n     *          null,\n     *          null\n     *        ] } );\n     *    } );\n     */\n    \"bSortable\": true,\n\n    /**\n     * Enable or disable the display of this column.\n     *  @type boolean\n     *  @default true\n     *\n     *  @name DataTable.defaults.column.visible\n     *  @dtopt Columns\n     *\n     *  @example\n     *    // Using `columnDefs`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columnDefs\": [\n     *          { \"visible\": false, \"targets\": [ 0 ] }\n     *        ] } );\n     *    } );\n     *\n     *  @example\n     *    // Using `columns`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columns\": [\n     *          { \"visible\": false },\n     *          null,\n     *          null,\n     *          null,\n     *          null\n     *        ] } );\n     *    } );\n     */\n    \"bVisible\": true,\n\n    /**\n     * Developer definable function that is called whenever a cell is created (Ajax source,\n     * etc) or processed for input (DOM source). This can be used as a compliment to mRender\n     * allowing you to modify the DOM element (add background colour for example) when the\n     * element is available.\n     *  @type function\n     *  @param {element} td The TD node that has been created\n     *  @param {*} cellData The Data for the cell\n     *  @param {array|object} rowData The data for the whole row\n     *  @param {int} row The row index for the aoData data store\n     *  @param {int} col The column index for aoColumns\n     *\n     *  @name DataTable.defaults.column.createdCell\n     *  @dtopt Columns\n     *\n     *  @example\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columnDefs\": [ {\n     *          \"targets\": [3],\n     *          \"createdCell\": function (td, cellData, rowData, row, col) {\n     *            if ( cellData == \"1.7\" ) {\n     *              $(td).css('color', 'blue')\n     *            }\n     *          }\n     *        } ]\n     *      });\n     *    } );\n     */\n    \"fnCreatedCell\": null,\n\n    /**\n     * This parameter has been replaced by `data` in DataTables to ensure naming\n     * consistency. `dataProp` can still be used, as there is backwards\n     * compatibility in DataTables for this option, but it is strongly\n     * recommended that you use `data` in preference to `dataProp`.\n     *  @name DataTable.defaults.column.dataProp\n     */\n\n    /**\n     * This property can be used to read data from any data source property,\n     * including deeply nested objects / properties. `data` can be given in a\n     * number of different ways which effect its behaviour:\n     *\n     * * `integer` - treated as an array index for the data source. This is the\n     *   default that DataTables uses (incrementally increased for each column).\n     * * `string` - read an object property from the data source. There are\n     *   three 'special' options that can be used in the string to alter how\n     *   DataTables reads the data from the source object:\n     *    * `.` - Dotted Javascript notation. Just as you use a `.` in\n     *      Javascript to read from nested objects, so to can the options\n     *      specified in `data`. For example: `browser.version` or\n     *      `browser.name`. If your object parameter name contains a period, use\n     *      `\\\\` to escape it - i.e. `first\\\\.name`.\n     *    * `[]` - Array notation. DataTables can automatically combine data\n     *      from and array source, joining the data with the characters provided\n     *      between the two brackets. For example: `name[, ]` would provide a\n     *      comma-space separated list from the source array. If no characters\n     *      are provided between the brackets, the original array source is\n     *      returned.\n     *    * `()` - Function notation. Adding `()` to the end of a parameter will\n     *      execute a function of the name given. For example: `browser()` for a\n     *      simple function on the data source, `browser.version()` for a\n     *      function in a nested property or even `browser().version` to get an\n     *      object property if the function called returns an object. Note that\n     *      function notation is recommended for use in `render` rather than\n     *      `data` as it is much simpler to use as a renderer.\n     * * `null` - use the original data source for the row rather than plucking\n     *   data directly from it. This action has effects on two other\n     *   initialisation options:\n     *    * `defaultContent` - When null is given as the `data` option and\n     *      `defaultContent` is specified for the column, the value defined by\n     *      `defaultContent` will be used for the cell.\n     *    * `render` - When null is used for the `data` option and the `render`\n     *      option is specified for the column, the whole data source for the\n     *      row is used for the renderer.\n     * * `function` - the function given will be executed whenever DataTables\n     *   needs to set or get the data for a cell in the column. The function\n     *   takes three parameters:\n     *    * Parameters:\n     *      * `{array|object}` The data source for the row\n     *      * `{string}` The type call data requested - this will be 'set' when\n     *        setting data or 'filter', 'display', 'type', 'sort' or undefined\n     *        when gathering data. Note that when `undefined` is given for the\n     *        type DataTables expects to get the raw data for the object back<\n     *      * `{*}` Data to set when the second parameter is 'set'.\n     *    * Return:\n     *      * The return value from the function is not required when 'set' is\n     *        the type of call, but otherwise the return is what will be used\n     *        for the data requested.\n     *\n     * Note that `data` is a getter and setter option. If you just require\n     * formatting of data for output, you will likely want to use `render` which\n     * is simply a getter and thus simpler to use.\n     *\n     * Note that prior to DataTables 1.9.2 `data` was called `mDataProp`. The\n     * name change reflects the flexibility of this property and is consistent\n     * with the naming of mRender. If 'mDataProp' is given, then it will still\n     * be used by DataTables, as it automatically maps the old name to the new\n     * if required.\n     *\n     *  @type string|int|function|null\n     *  @default null <i>Use automatically calculated column index</i>\n     *\n     *  @name DataTable.defaults.column.data\n     *  @dtopt Columns\n     *\n     *  @example\n     *    // Read table data from objects\n     *    // JSON structure for each row:\n     *    //   {\n     *    //      \"engine\": {value},\n     *    //      \"browser\": {value},\n     *    //      \"platform\": {value},\n     *    //      \"version\": {value},\n     *    //      \"grade\": {value}\n     *    //   }\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"ajaxSource\": \"sources/objects.txt\",\n     *        \"columns\": [\n     *          { \"data\": \"engine\" },\n     *          { \"data\": \"browser\" },\n     *          { \"data\": \"platform\" },\n     *          { \"data\": \"version\" },\n     *          { \"data\": \"grade\" }\n     *        ]\n     *      } );\n     *    } );\n     *\n     *  @example\n     *    // Read information from deeply nested objects\n     *    // JSON structure for each row:\n     *    //   {\n     *    //      \"engine\": {value},\n     *    //      \"browser\": {value},\n     *    //      \"platform\": {\n     *    //         \"inner\": {value}\n     *    //      },\n     *    //      \"details\": [\n     *    //         {value}, {value}\n     *    //      ]\n     *    //   }\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"ajaxSource\": \"sources/deep.txt\",\n     *        \"columns\": [\n     *          { \"data\": \"engine\" },\n     *          { \"data\": \"browser\" },\n     *          { \"data\": \"platform.inner\" },\n     *          { \"data\": \"details.0\" },\n     *          { \"data\": \"details.1\" }\n     *        ]\n     *      } );\n     *    } );\n     *\n     *  @example\n     *    // Using `data` as a function to provide different information for\n     *    // sorting, filtering and display. In this case, currency (price)\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columnDefs\": [ {\n     *          \"targets\": [ 0 ],\n     *          \"data\": function ( source, type, val ) {\n     *            if (type === 'set') {\n     *              source.price = val;\n     *              // Store the computed dislay and filter values for efficiency\n     *              source.price_display = val==\"\" ? \"\" : \"$\"+numberFormat(val);\n     *              source.price_filter  = val==\"\" ? \"\" : \"$\"+numberFormat(val)+\" \"+val;\n     *              return;\n     *            }\n     *            else if (type === 'display') {\n     *              return source.price_display;\n     *            }\n     *            else if (type === 'filter') {\n     *              return source.price_filter;\n     *            }\n     *            // 'sort', 'type' and undefined all just use the integer\n     *            return source.price;\n     *          }\n     *        } ]\n     *      } );\n     *    } );\n     *\n     *  @example\n     *    // Using default content\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columnDefs\": [ {\n     *          \"targets\": [ 0 ],\n     *          \"data\": null,\n     *          \"defaultContent\": \"Click to edit\"\n     *        } ]\n     *      } );\n     *    } );\n     *\n     *  @example\n     *    // Using array notation - outputting a list from an array\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columnDefs\": [ {\n     *          \"targets\": [ 0 ],\n     *          \"data\": \"name[, ]\"\n     *        } ]\n     *      } );\n     *    } );\n     *\n     */\n    \"mData\": null,\n\n    /**\n     * This property is the rendering partner to `data` and it is suggested that\n     * when you want to manipulate data for display (including filtering,\n     * sorting etc) without altering the underlying data for the table, use this\n     * property. `render` can be considered to be the the read only companion to\n     * `data` which is read / write (then as such more complex). Like `data`\n     * this option can be given in a number of different ways to effect its\n     * behaviour:\n     *\n     * * `integer` - treated as an array index for the data source. This is the\n     *   default that DataTables uses (incrementally increased for each column).\n     * * `string` - read an object property from the data source. There are\n     *   three 'special' options that can be used in the string to alter how\n     *   DataTables reads the data from the source object:\n     *    * `.` - Dotted Javascript notation. Just as you use a `.` in\n     *      Javascript to read from nested objects, so to can the options\n     *      specified in `data`. For example: `browser.version` or\n     *      `browser.name`. If your object parameter name contains a period, use\n     *      `\\\\` to escape it - i.e. `first\\\\.name`.\n     *    * `[]` - Array notation. DataTables can automatically combine data\n     *      from and array source, joining the data with the characters provided\n     *      between the two brackets. For example: `name[, ]` would provide a\n     *      comma-space separated list from the source array. If no characters\n     *      are provided between the brackets, the original array source is\n     *      returned.\n     *    * `()` - Function notation. Adding `()` to the end of a parameter will\n     *      execute a function of the name given. For example: `browser()` for a\n     *      simple function on the data source, `browser.version()` for a\n     *      function in a nested property or even `browser().version` to get an\n     *      object property if the function called returns an object.\n     * * `object` - use different data for the different data types requested by\n     *   DataTables ('filter', 'display', 'type' or 'sort'). The property names\n     *   of the object is the data type the property refers to and the value can\n     *   defined using an integer, string or function using the same rules as\n     *   `render` normally does. Note that an `_` option _must_ be specified.\n     *   This is the default value to use if you haven't specified a value for\n     *   the data type requested by DataTables.\n     * * `function` - the function given will be executed whenever DataTables\n     *   needs to set or get the data for a cell in the column. The function\n     *   takes three parameters:\n     *    * Parameters:\n     *      * {array|object} The data source for the row (based on `data`)\n     *      * {string} The type call data requested - this will be 'filter',\n     *        'display', 'type' or 'sort'.\n     *      * {array|object} The full data source for the row (not based on\n     *        `data`)\n     *    * Return:\n     *      * The return value from the function is what will be used for the\n     *        data requested.\n     *\n     *  @type string|int|function|object|null\n     *  @default null Use the data source value.\n     *\n     *  @name DataTable.defaults.column.render\n     *  @dtopt Columns\n     *\n     *  @example\n     *    // Create a comma separated list from an array of objects\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"ajaxSource\": \"sources/deep.txt\",\n     *        \"columns\": [\n     *          { \"data\": \"engine\" },\n     *          { \"data\": \"browser\" },\n     *          {\n     *            \"data\": \"platform\",\n     *            \"render\": \"[, ].name\"\n     *          }\n     *        ]\n     *      } );\n     *    } );\n     *\n     *  @example\n     *    // Execute a function to obtain data\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columnDefs\": [ {\n     *          \"targets\": [ 0 ],\n     *          \"data\": null, // Use the full data source object for the renderer's source\n     *          \"render\": \"browserName()\"\n     *        } ]\n     *      } );\n     *    } );\n     *\n     *  @example\n     *    // As an object, extracting different data for the different types\n     *    // This would be used with a data source such as:\n     *    //   { \"phone\": 5552368, \"phone_filter\": \"5552368 555-2368\", \"phone_display\": \"555-2368\" }\n     *    // Here the `phone` integer is used for sorting and type detection, while `phone_filter`\n     *    // (which has both forms) is used for filtering for if a user inputs either format, while\n     *    // the formatted phone number is the one that is shown in the table.\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columnDefs\": [ {\n     *          \"targets\": [ 0 ],\n     *          \"data\": null, // Use the full data source object for the renderer's source\n     *          \"render\": {\n     *            \"_\": \"phone\",\n     *            \"filter\": \"phone_filter\",\n     *            \"display\": \"phone_display\"\n     *          }\n     *        } ]\n     *      } );\n     *    } );\n     *\n     *  @example\n     *    // Use as a function to create a link from the data source\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columnDefs\": [ {\n     *          \"targets\": [ 0 ],\n     *          \"data\": \"download_link\",\n     *          \"render\": function ( data, type, full ) {\n     *            return '<a href=\"'+data+'\">Download</a>';\n     *          }\n     *        } ]\n     *      } );\n     *    } );\n     */\n    \"mRender\": null,\n\n    /**\n     * Change the cell type created for the column - either TD cells or TH cells. This\n     * can be useful as TH cells have semantic meaning in the table body, allowing them\n     * to act as a header for a row (you may wish to add scope='row' to the TH elements).\n     *  @type string\n     *  @default td\n     *\n     *  @name DataTable.defaults.column.cellType\n     *  @dtopt Columns\n     *\n     *  @example\n     *    // Make the first column use TH cells\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columnDefs\": [ {\n     *          \"targets\": [ 0 ],\n     *          \"cellType\": \"th\"\n     *        } ]\n     *      } );\n     *    } );\n     */\n    \"sCellType\": \"td\",\n\n    /**\n     * Class to give to each cell in this column.\n     *  @type string\n     *  @default <i>Empty string</i>\n     *\n     *  @name DataTable.defaults.column.class\n     *  @dtopt Columns\n     *\n     *  @example\n     *    // Using `columnDefs`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columnDefs\": [\n     *          { \"class\": \"my_class\", \"targets\": [ 0 ] }\n     *        ]\n     *      } );\n     *    } );\n     *\n     *  @example\n     *    // Using `columns`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columns\": [\n     *          { \"class\": \"my_class\" },\n     *          null,\n     *          null,\n     *          null,\n     *          null\n     *        ]\n     *      } );\n     *    } );\n     */\n    \"sClass\": \"\",\n\n    /**\n     * When DataTables calculates the column widths to assign to each column,\n     * it finds the longest string in each column and then constructs a\n     * temporary table and reads the widths from that. The problem with this\n     * is that \"mmm\" is much wider then \"iiii\", but the latter is a longer\n     * string - thus the calculation can go wrong (doing it properly and putting\n     * it into an DOM object and measuring that is horribly(!) slow). Thus as\n     * a \"work around\" we provide this option. It will append its value to the\n     * text that is found to be the longest string for the column - i.e. padding.\n     * Generally you shouldn't need this!\n     *  @type string\n     *  @default <i>Empty string<i>\n     *\n     *  @name DataTable.defaults.column.contentPadding\n     *  @dtopt Columns\n     *\n     *  @example\n     *    // Using `columns`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columns\": [\n     *          null,\n     *          null,\n     *          null,\n     *          {\n     *            \"contentPadding\": \"mmm\"\n     *          }\n     *        ]\n     *      } );\n     *    } );\n     */\n    \"sContentPadding\": \"\",\n\n    /**\n     * Allows a default value to be given for a column's data, and will be used\n     * whenever a null data source is encountered (this can be because `data`\n     * is set to null, or because the data source itself is null).\n     *  @type string\n     *  @default null\n     *\n     *  @name DataTable.defaults.column.defaultContent\n     *  @dtopt Columns\n     *\n     *  @example\n     *    // Using `columnDefs`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columnDefs\": [\n     *          {\n     *            \"data\": null,\n     *            \"defaultContent\": \"Edit\",\n     *            \"targets\": [ -1 ]\n     *          }\n     *        ]\n     *      } );\n     *    } );\n     *\n     *  @example\n     *    // Using `columns`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columns\": [\n     *          null,\n     *          null,\n     *          null,\n     *          {\n     *            \"data\": null,\n     *            \"defaultContent\": \"Edit\"\n     *          }\n     *        ]\n     *      } );\n     *    } );\n     */\n    \"sDefaultContent\": null,\n\n    /**\n     * This parameter is only used in DataTables' server-side processing. It can\n     * be exceptionally useful to know what columns are being displayed on the\n     * client side, and to map these to database fields. When defined, the names\n     * also allow DataTables to reorder information from the server if it comes\n     * back in an unexpected order (i.e. if you switch your columns around on the\n     * client-side, your server-side code does not also need updating).\n     *  @type string\n     *  @default <i>Empty string</i>\n     *\n     *  @name DataTable.defaults.column.name\n     *  @dtopt Columns\n     *\n     *  @example\n     *    // Using `columnDefs`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columnDefs\": [\n     *          { \"name\": \"engine\", \"targets\": [ 0 ] },\n     *          { \"name\": \"browser\", \"targets\": [ 1 ] },\n     *          { \"name\": \"platform\", \"targets\": [ 2 ] },\n     *          { \"name\": \"version\", \"targets\": [ 3 ] },\n     *          { \"name\": \"grade\", \"targets\": [ 4 ] }\n     *        ]\n     *      } );\n     *    } );\n     *\n     *  @example\n     *    // Using `columns`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columns\": [\n     *          { \"name\": \"engine\" },\n     *          { \"name\": \"browser\" },\n     *          { \"name\": \"platform\" },\n     *          { \"name\": \"version\" },\n     *          { \"name\": \"grade\" }\n     *        ]\n     *      } );\n     *    } );\n     */\n    \"sName\": \"\",\n\n    /**\n     * Defines a data source type for the ordering which can be used to read\n     * real-time information from the table (updating the internally cached\n     * version) prior to ordering. This allows ordering to occur on user\n     * editable elements such as form inputs.\n     *  @type string\n     *  @default std\n     *\n     *  @name DataTable.defaults.column.orderDataType\n     *  @dtopt Columns\n     *\n     *  @example\n     *    // Using `columnDefs`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columnDefs\": [\n     *          { \"orderDataType\": \"dom-text\", \"targets\": [ 2, 3 ] },\n     *          { \"type\": \"numeric\", \"targets\": [ 3 ] },\n     *          { \"orderDataType\": \"dom-select\", \"targets\": [ 4 ] },\n     *          { \"orderDataType\": \"dom-checkbox\", \"targets\": [ 5 ] }\n     *        ]\n     *      } );\n     *    } );\n     *\n     *  @example\n     *    // Using `columns`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columns\": [\n     *          null,\n     *          null,\n     *          { \"orderDataType\": \"dom-text\" },\n     *          { \"orderDataType\": \"dom-text\", \"type\": \"numeric\" },\n     *          { \"orderDataType\": \"dom-select\" },\n     *          { \"orderDataType\": \"dom-checkbox\" }\n     *        ]\n     *      } );\n     *    } );\n     */\n    \"sSortDataType\": \"std\",\n\n    /**\n     * The title of this column.\n     *  @type string\n     *  @default null <i>Derived from the 'TH' value for this column in the\n     *    original HTML table.</i>\n     *\n     *  @name DataTable.defaults.column.title\n     *  @dtopt Columns\n     *\n     *  @example\n     *    // Using `columnDefs`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columnDefs\": [\n     *          { \"title\": \"My column title\", \"targets\": [ 0 ] }\n     *        ]\n     *      } );\n     *    } );\n     *\n     *  @example\n     *    // Using `columns`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columns\": [\n     *          { \"title\": \"My column title\" },\n     *          null,\n     *          null,\n     *          null,\n     *          null\n     *        ]\n     *      } );\n     *    } );\n     */\n    \"sTitle\": null,\n\n    /**\n     * The type allows you to specify how the data for this column will be\n     * ordered. Four types (string, numeric, date and html (which will strip\n     * HTML tags before ordering)) are currently available. Note that only date\n     * formats understood by Javascript's Date() object will be accepted as type\n     * date. For example: \"Mar 26, 2008 5:03 PM\". May take the values: 'string',\n     * 'numeric', 'date' or 'html' (by default). Further types can be adding\n     * through plug-ins.\n     *  @type string\n     *  @default null <i>Auto-detected from raw data</i>\n     *\n     *  @name DataTable.defaults.column.type\n     *  @dtopt Columns\n     *\n     *  @example\n     *    // Using `columnDefs`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columnDefs\": [\n     *          { \"type\": \"html\", \"targets\": [ 0 ] }\n     *        ]\n     *      } );\n     *    } );\n     *\n     *  @example\n     *    // Using `columns`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columns\": [\n     *          { \"type\": \"html\" },\n     *          null,\n     *          null,\n     *          null,\n     *          null\n     *        ]\n     *      } );\n     *    } );\n     */\n    \"sType\": null,\n\n    /**\n     * Defining the width of the column, this parameter may take any CSS value\n     * (3em, 20px etc). DataTables applies 'smart' widths to columns which have not\n     * been given a specific width through this interface ensuring that the table\n     * remains readable.\n     *  @type string\n     *  @default null <i>Automatic</i>\n     *\n     *  @name DataTable.defaults.column.width\n     *  @dtopt Columns\n     *\n     *  @example\n     *    // Using `columnDefs`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columnDefs\": [\n     *          { \"width\": \"20%\", \"targets\": [ 0 ] }\n     *        ]\n     *      } );\n     *    } );\n     *\n     *  @example\n     *    // Using `columns`\n     *    $(document).ready( function() {\n     *      $('#example').dataTable( {\n     *        \"columns\": [\n     *          { \"width\": \"20%\" },\n     *          null,\n     *          null,\n     *          null,\n     *          null\n     *        ]\n     *      } );\n     *    } );\n     */\n    \"sWidth\": null\n  };\n\n  _fnHungarianMap(DataTable.defaults.column);\n  /**\n   * DataTables settings object - this holds all the information needed for a\n   * given table, including configuration, data and current application of the\n   * table options. DataTables does not have a single instance for each DataTable\n   * with the settings attached to that instance, but rather instances of the\n   * DataTable \"class\" are created on-the-fly as needed (typically by a\n   * $().dataTable() call) and the settings object is then applied to that\n   * instance.\n   *\n   * Note that this object is related to {@link DataTable.defaults} but this\n   * one is the internal data store for DataTables's cache of columns. It should\n   * NOT be manipulated outside of DataTables. Any configuration should be done\n   * through the initialisation options.\n   *  @namespace\n   *  @todo Really should attach the settings object to individual instances so we\n   *    don't need to create new instances on each $().dataTable() call (if the\n   *    table already exists). It would also save passing oSettings around and\n   *    into every single function. However, this is a very significant\n   *    architecture change for DataTables and will almost certainly break\n   *    backwards compatibility with older installations. This is something that\n   *    will be done in 2.0.\n   */\n\n\n  DataTable.models.oSettings = {\n    /**\n     * Primary features of DataTables and their enablement state.\n     *  @namespace\n     */\n    \"oFeatures\": {\n      /**\n       * Flag to say if DataTables should automatically try to calculate the\n       * optimum table and columns widths (true) or not (false).\n       * Note that this parameter will be set by the initialisation routine. To\n       * set a default use {@link DataTable.defaults}.\n       *  @type boolean\n       */\n      \"bAutoWidth\": null,\n\n      /**\n       * Delay the creation of TR and TD elements until they are actually\n       * needed by a driven page draw. This can give a significant speed\n       * increase for Ajax source and Javascript source data, but makes no\n       * difference at all fro DOM and server-side processing tables.\n       * Note that this parameter will be set by the initialisation routine. To\n       * set a default use {@link DataTable.defaults}.\n       *  @type boolean\n       */\n      \"bDeferRender\": null,\n\n      /**\n       * Enable filtering on the table or not. Note that if this is disabled\n       * then there is no filtering at all on the table, including fnFilter.\n       * To just remove the filtering input use sDom and remove the 'f' option.\n       * Note that this parameter will be set by the initialisation routine. To\n       * set a default use {@link DataTable.defaults}.\n       *  @type boolean\n       */\n      \"bFilter\": null,\n\n      /**\n       * Table information element (the 'Showing x of y records' div) enable\n       * flag.\n       * Note that this parameter will be set by the initialisation routine. To\n       * set a default use {@link DataTable.defaults}.\n       *  @type boolean\n       */\n      \"bInfo\": null,\n\n      /**\n       * Present a user control allowing the end user to change the page size\n       * when pagination is enabled.\n       * Note that this parameter will be set by the initialisation routine. To\n       * set a default use {@link DataTable.defaults}.\n       *  @type boolean\n       */\n      \"bLengthChange\": null,\n\n      /**\n       * Pagination enabled or not. Note that if this is disabled then length\n       * changing must also be disabled.\n       * Note that this parameter will be set by the initialisation routine. To\n       * set a default use {@link DataTable.defaults}.\n       *  @type boolean\n       */\n      \"bPaginate\": null,\n\n      /**\n       * Processing indicator enable flag whenever DataTables is enacting a\n       * user request - typically an Ajax request for server-side processing.\n       * Note that this parameter will be set by the initialisation routine. To\n       * set a default use {@link DataTable.defaults}.\n       *  @type boolean\n       */\n      \"bProcessing\": null,\n\n      /**\n       * Server-side processing enabled flag - when enabled DataTables will\n       * get all data from the server for every draw - there is no filtering,\n       * sorting or paging done on the client-side.\n       * Note that this parameter will be set by the initialisation routine. To\n       * set a default use {@link DataTable.defaults}.\n       *  @type boolean\n       */\n      \"bServerSide\": null,\n\n      /**\n       * Sorting enablement flag.\n       * Note that this parameter will be set by the initialisation routine. To\n       * set a default use {@link DataTable.defaults}.\n       *  @type boolean\n       */\n      \"bSort\": null,\n\n      /**\n       * Multi-column sorting\n       * Note that this parameter will be set by the initialisation routine. To\n       * set a default use {@link DataTable.defaults}.\n       *  @type boolean\n       */\n      \"bSortMulti\": null,\n\n      /**\n       * Apply a class to the columns which are being sorted to provide a\n       * visual highlight or not. This can slow things down when enabled since\n       * there is a lot of DOM interaction.\n       * Note that this parameter will be set by the initialisation routine. To\n       * set a default use {@link DataTable.defaults}.\n       *  @type boolean\n       */\n      \"bSortClasses\": null,\n\n      /**\n       * State saving enablement flag.\n       * Note that this parameter will be set by the initialisation routine. To\n       * set a default use {@link DataTable.defaults}.\n       *  @type boolean\n       */\n      \"bStateSave\": null\n    },\n\n    /**\n     * Scrolling settings for a table.\n     *  @namespace\n     */\n    \"oScroll\": {\n      /**\n       * When the table is shorter in height than sScrollY, collapse the\n       * table container down to the height of the table (when true).\n       * Note that this parameter will be set by the initialisation routine. To\n       * set a default use {@link DataTable.defaults}.\n       *  @type boolean\n       */\n      \"bCollapse\": null,\n\n      /**\n       * Width of the scrollbar for the web-browser's platform. Calculated\n       * during table initialisation.\n       *  @type int\n       *  @default 0\n       */\n      \"iBarWidth\": 0,\n\n      /**\n       * Viewport width for horizontal scrolling. Horizontal scrolling is\n       * disabled if an empty string.\n       * Note that this parameter will be set by the initialisation routine. To\n       * set a default use {@link DataTable.defaults}.\n       *  @type string\n       */\n      \"sX\": null,\n\n      /**\n       * Width to expand the table to when using x-scrolling. Typically you\n       * should not need to use this.\n       * Note that this parameter will be set by the initialisation routine. To\n       * set a default use {@link DataTable.defaults}.\n       *  @type string\n       *  @deprecated\n       */\n      \"sXInner\": null,\n\n      /**\n       * Viewport height for vertical scrolling. Vertical scrolling is disabled\n       * if an empty string.\n       * Note that this parameter will be set by the initialisation routine. To\n       * set a default use {@link DataTable.defaults}.\n       *  @type string\n       */\n      \"sY\": null\n    },\n\n    /**\n     * Language information for the table.\n     *  @namespace\n     *  @extends DataTable.defaults.oLanguage\n     */\n    \"oLanguage\": {\n      /**\n       * Information callback function. See\n       * {@link DataTable.defaults.fnInfoCallback}\n       *  @type function\n       *  @default null\n       */\n      \"fnInfoCallback\": null\n    },\n\n    /**\n     * Browser support parameters\n     *  @namespace\n     */\n    \"oBrowser\": {\n      /**\n       * Indicate if the browser incorrectly calculates width:100% inside a\n       * scrolling element (IE6/7)\n       *  @type boolean\n       *  @default false\n       */\n      \"bScrollOversize\": false,\n\n      /**\n       * Determine if the vertical scrollbar is on the right or left of the\n       * scrolling container - needed for rtl language layout, although not\n       * all browsers move the scrollbar (Safari).\n       *  @type boolean\n       *  @default false\n       */\n      \"bScrollbarLeft\": false,\n\n      /**\n       * Flag for if `getBoundingClientRect` is fully supported or not\n       *  @type boolean\n       *  @default false\n       */\n      \"bBounding\": false,\n\n      /**\n       * Browser scrollbar width\n       *  @type integer\n       *  @default 0\n       */\n      \"barWidth\": 0\n    },\n    \"ajax\": null,\n\n    /**\n     * Array referencing the nodes which are used for the features. The\n     * parameters of this object match what is allowed by sDom - i.e.\n     *   <ul>\n     *     <li>'l' - Length changing</li>\n     *     <li>'f' - Filtering input</li>\n     *     <li>'t' - The table!</li>\n     *     <li>'i' - Information</li>\n     *     <li>'p' - Pagination</li>\n     *     <li>'r' - pRocessing</li>\n     *   </ul>\n     *  @type array\n     *  @default []\n     */\n    \"aanFeatures\": [],\n\n    /**\n     * Store data information - see {@link DataTable.models.oRow} for detailed\n     * information.\n     *  @type array\n     *  @default []\n     */\n    \"aoData\": [],\n\n    /**\n     * Array of indexes which are in the current display (after filtering etc)\n     *  @type array\n     *  @default []\n     */\n    \"aiDisplay\": [],\n\n    /**\n     * Array of indexes for display - no filtering\n     *  @type array\n     *  @default []\n     */\n    \"aiDisplayMaster\": [],\n\n    /**\n     * Map of row ids to data indexes\n     *  @type object\n     *  @default {}\n     */\n    \"aIds\": {},\n\n    /**\n     * Store information about each column that is in use\n     *  @type array\n     *  @default []\n     */\n    \"aoColumns\": [],\n\n    /**\n     * Store information about the table's header\n     *  @type array\n     *  @default []\n     */\n    \"aoHeader\": [],\n\n    /**\n     * Store information about the table's footer\n     *  @type array\n     *  @default []\n     */\n    \"aoFooter\": [],\n\n    /**\n     * Store the applied global search information in case we want to force a\n     * research or compare the old search to a new one.\n     * Note that this parameter will be set by the initialisation routine. To\n     * set a default use {@link DataTable.defaults}.\n     *  @namespace\n     *  @extends DataTable.models.oSearch\n     */\n    \"oPreviousSearch\": {},\n\n    /**\n     * Store the applied search for each column - see\n     * {@link DataTable.models.oSearch} for the format that is used for the\n     * filtering information for each column.\n     *  @type array\n     *  @default []\n     */\n    \"aoPreSearchCols\": [],\n\n    /**\n     * Sorting that is applied to the table. Note that the inner arrays are\n     * used in the following manner:\n     * <ul>\n     *   <li>Index 0 - column number</li>\n     *   <li>Index 1 - current sorting direction</li>\n     * </ul>\n     * Note that this parameter will be set by the initialisation routine. To\n     * set a default use {@link DataTable.defaults}.\n     *  @type array\n     *  @todo These inner arrays should really be objects\n     */\n    \"aaSorting\": null,\n\n    /**\n     * Sorting that is always applied to the table (i.e. prefixed in front of\n     * aaSorting).\n     * Note that this parameter will be set by the initialisation routine. To\n     * set a default use {@link DataTable.defaults}.\n     *  @type array\n     *  @default []\n     */\n    \"aaSortingFixed\": [],\n\n    /**\n     * Classes to use for the striping of a table.\n     * Note that this parameter will be set by the initialisation routine. To\n     * set a default use {@link DataTable.defaults}.\n     *  @type array\n     *  @default []\n     */\n    \"asStripeClasses\": null,\n\n    /**\n     * If restoring a table - we should restore its striping classes as well\n     *  @type array\n     *  @default []\n     */\n    \"asDestroyStripes\": [],\n\n    /**\n     * If restoring a table - we should restore its width\n     *  @type int\n     *  @default 0\n     */\n    \"sDestroyWidth\": 0,\n\n    /**\n     * Callback functions array for every time a row is inserted (i.e. on a draw).\n     *  @type array\n     *  @default []\n     */\n    \"aoRowCallback\": [],\n\n    /**\n     * Callback functions for the header on each draw.\n     *  @type array\n     *  @default []\n     */\n    \"aoHeaderCallback\": [],\n\n    /**\n     * Callback function for the footer on each draw.\n     *  @type array\n     *  @default []\n     */\n    \"aoFooterCallback\": [],\n\n    /**\n     * Array of callback functions for draw callback functions\n     *  @type array\n     *  @default []\n     */\n    \"aoDrawCallback\": [],\n\n    /**\n     * Array of callback functions for row created function\n     *  @type array\n     *  @default []\n     */\n    \"aoRowCreatedCallback\": [],\n\n    /**\n     * Callback functions for just before the table is redrawn. A return of\n     * false will be used to cancel the draw.\n     *  @type array\n     *  @default []\n     */\n    \"aoPreDrawCallback\": [],\n\n    /**\n     * Callback functions for when the table has been initialised.\n     *  @type array\n     *  @default []\n     */\n    \"aoInitComplete\": [],\n\n    /**\n     * Callbacks for modifying the settings to be stored for state saving, prior to\n     * saving state.\n     *  @type array\n     *  @default []\n     */\n    \"aoStateSaveParams\": [],\n\n    /**\n     * Callbacks for modifying the settings that have been stored for state saving\n     * prior to using the stored values to restore the state.\n     *  @type array\n     *  @default []\n     */\n    \"aoStateLoadParams\": [],\n\n    /**\n     * Callbacks for operating on the settings object once the saved state has been\n     * loaded\n     *  @type array\n     *  @default []\n     */\n    \"aoStateLoaded\": [],\n\n    /**\n     * Cache the table ID for quick access\n     *  @type string\n     *  @default <i>Empty string</i>\n     */\n    \"sTableId\": \"\",\n\n    /**\n     * The TABLE node for the main table\n     *  @type node\n     *  @default null\n     */\n    \"nTable\": null,\n\n    /**\n     * Permanent ref to the thead element\n     *  @type node\n     *  @default null\n     */\n    \"nTHead\": null,\n\n    /**\n     * Permanent ref to the tfoot element - if it exists\n     *  @type node\n     *  @default null\n     */\n    \"nTFoot\": null,\n\n    /**\n     * Permanent ref to the tbody element\n     *  @type node\n     *  @default null\n     */\n    \"nTBody\": null,\n\n    /**\n     * Cache the wrapper node (contains all DataTables controlled elements)\n     *  @type node\n     *  @default null\n     */\n    \"nTableWrapper\": null,\n\n    /**\n     * Indicate if when using server-side processing the loading of data\n     * should be deferred until the second draw.\n     * Note that this parameter will be set by the initialisation routine. To\n     * set a default use {@link DataTable.defaults}.\n     *  @type boolean\n     *  @default false\n     */\n    \"bDeferLoading\": false,\n\n    /**\n     * Indicate if all required information has been read in\n     *  @type boolean\n     *  @default false\n     */\n    \"bInitialised\": false,\n\n    /**\n     * Information about open rows. Each object in the array has the parameters\n     * 'nTr' and 'nParent'\n     *  @type array\n     *  @default []\n     */\n    \"aoOpenRows\": [],\n\n    /**\n     * Dictate the positioning of DataTables' control elements - see\n     * {@link DataTable.model.oInit.sDom}.\n     * Note that this parameter will be set by the initialisation routine. To\n     * set a default use {@link DataTable.defaults}.\n     *  @type string\n     *  @default null\n     */\n    \"sDom\": null,\n\n    /**\n     * Search delay (in mS)\n     *  @type integer\n     *  @default null\n     */\n    \"searchDelay\": null,\n\n    /**\n     * Which type of pagination should be used.\n     * Note that this parameter will be set by the initialisation routine. To\n     * set a default use {@link DataTable.defaults}.\n     *  @type string\n     *  @default two_button\n     */\n    \"sPaginationType\": \"two_button\",\n\n    /**\n     * The state duration (for `stateSave`) in seconds.\n     * Note that this parameter will be set by the initialisation routine. To\n     * set a default use {@link DataTable.defaults}.\n     *  @type int\n     *  @default 0\n     */\n    \"iStateDuration\": 0,\n\n    /**\n     * Array of callback functions for state saving. Each array element is an\n     * object with the following parameters:\n     *   <ul>\n     *     <li>function:fn - function to call. Takes two parameters, oSettings\n     *       and the JSON string to save that has been thus far created. Returns\n     *       a JSON string to be inserted into a json object\n     *       (i.e. '\"param\": [ 0, 1, 2]')</li>\n     *     <li>string:sName - name of callback</li>\n     *   </ul>\n     *  @type array\n     *  @default []\n     */\n    \"aoStateSave\": [],\n\n    /**\n     * Array of callback functions for state loading. Each array element is an\n     * object with the following parameters:\n     *   <ul>\n     *     <li>function:fn - function to call. Takes two parameters, oSettings\n     *       and the object stored. May return false to cancel state loading</li>\n     *     <li>string:sName - name of callback</li>\n     *   </ul>\n     *  @type array\n     *  @default []\n     */\n    \"aoStateLoad\": [],\n\n    /**\n     * State that was saved. Useful for back reference\n     *  @type object\n     *  @default null\n     */\n    \"oSavedState\": null,\n\n    /**\n     * State that was loaded. Useful for back reference\n     *  @type object\n     *  @default null\n     */\n    \"oLoadedState\": null,\n\n    /**\n     * Source url for AJAX data for the table.\n     * Note that this parameter will be set by the initialisation routine. To\n     * set a default use {@link DataTable.defaults}.\n     *  @type string\n     *  @default null\n     */\n    \"sAjaxSource\": null,\n\n    /**\n     * Property from a given object from which to read the table data from. This\n     * can be an empty string (when not server-side processing), in which case\n     * it is  assumed an an array is given directly.\n     * Note that this parameter will be set by the initialisation routine. To\n     * set a default use {@link DataTable.defaults}.\n     *  @type string\n     */\n    \"sAjaxDataProp\": null,\n\n    /**\n     * Note if draw should be blocked while getting data\n     *  @type boolean\n     *  @default true\n     */\n    \"bAjaxDataGet\": true,\n\n    /**\n     * The last jQuery XHR object that was used for server-side data gathering.\n     * This can be used for working with the XHR information in one of the\n     * callbacks\n     *  @type object\n     *  @default null\n     */\n    \"jqXHR\": null,\n\n    /**\n     * JSON returned from the server in the last Ajax request\n     *  @type object\n     *  @default undefined\n     */\n    \"json\": undefined,\n\n    /**\n     * Data submitted as part of the last Ajax request\n     *  @type object\n     *  @default undefined\n     */\n    \"oAjaxData\": undefined,\n\n    /**\n     * Function to get the server-side data.\n     * Note that this parameter will be set by the initialisation routine. To\n     * set a default use {@link DataTable.defaults}.\n     *  @type function\n     */\n    \"fnServerData\": null,\n\n    /**\n     * Functions which are called prior to sending an Ajax request so extra\n     * parameters can easily be sent to the server\n     *  @type array\n     *  @default []\n     */\n    \"aoServerParams\": [],\n\n    /**\n     * Send the XHR HTTP method - GET or POST (could be PUT or DELETE if\n     * required).\n     * Note that this parameter will be set by the initialisation routine. To\n     * set a default use {@link DataTable.defaults}.\n     *  @type string\n     */\n    \"sServerMethod\": null,\n\n    /**\n     * Format numbers for display.\n     * Note that this parameter will be set by the initialisation routine. To\n     * set a default use {@link DataTable.defaults}.\n     *  @type function\n     */\n    \"fnFormatNumber\": null,\n\n    /**\n     * List of options that can be used for the user selectable length menu.\n     * Note that this parameter will be set by the initialisation routine. To\n     * set a default use {@link DataTable.defaults}.\n     *  @type array\n     *  @default []\n     */\n    \"aLengthMenu\": null,\n\n    /**\n     * Counter for the draws that the table does. Also used as a tracker for\n     * server-side processing\n     *  @type int\n     *  @default 0\n     */\n    \"iDraw\": 0,\n\n    /**\n     * Indicate if a redraw is being done - useful for Ajax\n     *  @type boolean\n     *  @default false\n     */\n    \"bDrawing\": false,\n\n    /**\n     * Draw index (iDraw) of the last error when parsing the returned data\n     *  @type int\n     *  @default -1\n     */\n    \"iDrawError\": -1,\n\n    /**\n     * Paging display length\n     *  @type int\n     *  @default 10\n     */\n    \"_iDisplayLength\": 10,\n\n    /**\n     * Paging start point - aiDisplay index\n     *  @type int\n     *  @default 0\n     */\n    \"_iDisplayStart\": 0,\n\n    /**\n     * Server-side processing - number of records in the result set\n     * (i.e. before filtering), Use fnRecordsTotal rather than\n     * this property to get the value of the number of records, regardless of\n     * the server-side processing setting.\n     *  @type int\n     *  @default 0\n     *  @private\n     */\n    \"_iRecordsTotal\": 0,\n\n    /**\n     * Server-side processing - number of records in the current display set\n     * (i.e. after filtering). Use fnRecordsDisplay rather than\n     * this property to get the value of the number of records, regardless of\n     * the server-side processing setting.\n     *  @type boolean\n     *  @default 0\n     *  @private\n     */\n    \"_iRecordsDisplay\": 0,\n\n    /**\n     * The classes to use for the table\n     *  @type object\n     *  @default {}\n     */\n    \"oClasses\": {},\n\n    /**\n     * Flag attached to the settings object so you can check in the draw\n     * callback if filtering has been done in the draw. Deprecated in favour of\n     * events.\n     *  @type boolean\n     *  @default false\n     *  @deprecated\n     */\n    \"bFiltered\": false,\n\n    /**\n     * Flag attached to the settings object so you can check in the draw\n     * callback if sorting has been done in the draw. Deprecated in favour of\n     * events.\n     *  @type boolean\n     *  @default false\n     *  @deprecated\n     */\n    \"bSorted\": false,\n\n    /**\n     * Indicate that if multiple rows are in the header and there is more than\n     * one unique cell per column, if the top one (true) or bottom one (false)\n     * should be used for sorting / title by DataTables.\n     * Note that this parameter will be set by the initialisation routine. To\n     * set a default use {@link DataTable.defaults}.\n     *  @type boolean\n     */\n    \"bSortCellsTop\": null,\n\n    /**\n     * Initialisation object that is used for the table\n     *  @type object\n     *  @default null\n     */\n    \"oInit\": null,\n\n    /**\n     * Destroy callback functions - for plug-ins to attach themselves to the\n     * destroy so they can clean up markup and events.\n     *  @type array\n     *  @default []\n     */\n    \"aoDestroyCallback\": [],\n\n    /**\n     * Get the number of records in the current record set, before filtering\n     *  @type function\n     */\n    \"fnRecordsTotal\": function () {\n      return _fnDataSource(this) == 'ssp' ? this._iRecordsTotal * 1 : this.aiDisplayMaster.length;\n    },\n\n    /**\n     * Get the number of records in the current record set, after filtering\n     *  @type function\n     */\n    \"fnRecordsDisplay\": function () {\n      return _fnDataSource(this) == 'ssp' ? this._iRecordsDisplay * 1 : this.aiDisplay.length;\n    },\n\n    /**\n     * Get the display end point - aiDisplay index\n     *  @type function\n     */\n    \"fnDisplayEnd\": function () {\n      var len = this._iDisplayLength,\n          start = this._iDisplayStart,\n          calc = start + len,\n          records = this.aiDisplay.length,\n          features = this.oFeatures,\n          paginate = features.bPaginate;\n\n      if (features.bServerSide) {\n        return paginate === false || len === -1 ? start + records : Math.min(start + len, this._iRecordsDisplay);\n      } else {\n        return !paginate || calc > records || len === -1 ? records : calc;\n      }\n    },\n\n    /**\n     * The DataTables object for this table\n     *  @type object\n     *  @default null\n     */\n    \"oInstance\": null,\n\n    /**\n     * Unique identifier for each instance of the DataTables object. If there\n     * is an ID on the table node, then it takes that value, otherwise an\n     * incrementing internal counter is used.\n     *  @type string\n     *  @default null\n     */\n    \"sInstance\": null,\n\n    /**\n     * tabindex attribute value that is added to DataTables control elements, allowing\n     * keyboard navigation of the table and its controls.\n     */\n    \"iTabIndex\": 0,\n\n    /**\n     * DIV container for the footer scrolling table if scrolling\n     */\n    \"nScrollHead\": null,\n\n    /**\n     * DIV container for the footer scrolling table if scrolling\n     */\n    \"nScrollFoot\": null,\n\n    /**\n     * Last applied sort\n     *  @type array\n     *  @default []\n     */\n    \"aLastSort\": [],\n\n    /**\n     * Stored plug-in instances\n     *  @type object\n     *  @default {}\n     */\n    \"oPlugins\": {},\n\n    /**\n     * Function used to get a row's id from the row's data\n     *  @type function\n     *  @default null\n     */\n    \"rowIdFn\": null,\n\n    /**\n     * Data location where to store a row's id\n     *  @type string\n     *  @default null\n     */\n    \"rowId\": null\n  };\n  /**\n   * Extension object for DataTables that is used to provide all extension\n   * options.\n   *\n   * Note that the `DataTable.ext` object is available through\n   * `jQuery.fn.dataTable.ext` where it may be accessed and manipulated. It is\n   * also aliased to `jQuery.fn.dataTableExt` for historic reasons.\n   *  @namespace\n   *  @extends DataTable.models.ext\n   */\n\n  /**\n   * DataTables extensions\n   * \n   * This namespace acts as a collection area for plug-ins that can be used to\n   * extend DataTables capabilities. Indeed many of the build in methods\n   * use this method to provide their own capabilities (sorting methods for\n   * example).\n   *\n   * Note that this namespace is aliased to `jQuery.fn.dataTableExt` for legacy\n   * reasons\n   *\n   *  @namespace\n   */\n\n  DataTable.ext = _ext = {\n    /**\n     * Buttons. For use with the Buttons extension for DataTables. This is\n     * defined here so other extensions can define buttons regardless of load\n     * order. It is _not_ used by DataTables core.\n     *\n     *  @type object\n     *  @default {}\n     */\n    buttons: {},\n\n    /**\n     * Element class names\n     *\n     *  @type object\n     *  @default {}\n     */\n    classes: {},\n\n    /**\n     * DataTables build type (expanded by the download builder)\n     *\n     *  @type string\n     */\n    builder: \"-source-\",\n\n    /**\n     * Error reporting.\n     * \n     * How should DataTables report an error. Can take the value 'alert',\n     * 'throw', 'none' or a function.\n     *\n     *  @type string|function\n     *  @default alert\n     */\n    errMode: \"alert\",\n\n    /**\n     * Feature plug-ins.\n     * \n     * This is an array of objects which describe the feature plug-ins that are\n     * available to DataTables. These feature plug-ins are then available for\n     * use through the `dom` initialisation option.\n     * \n     * Each feature plug-in is described by an object which must have the\n     * following properties:\n     * \n     * * `fnInit` - function that is used to initialise the plug-in,\n     * * `cFeature` - a character so the feature can be enabled by the `dom`\n     *   instillation option. This is case sensitive.\n     *\n     * The `fnInit` function has the following input parameters:\n     *\n     * 1. `{object}` DataTables settings object: see\n     *    {@link DataTable.models.oSettings}\n     *\n     * And the following return is expected:\n     * \n     * * {node|null} The element which contains your feature. Note that the\n     *   return may also be void if your plug-in does not require to inject any\n     *   DOM elements into DataTables control (`dom`) - for example this might\n     *   be useful when developing a plug-in which allows table control via\n     *   keyboard entry\n     *\n     *  @type array\n     *\n     *  @example\n     *    $.fn.dataTable.ext.features.push( {\n     *      \"fnInit\": function( oSettings ) {\n     *        return new TableTools( { \"oDTSettings\": oSettings } );\n     *      },\n     *      \"cFeature\": \"T\"\n     *    } );\n     */\n    feature: [],\n\n    /**\n     * Row searching.\n     * \n     * This method of searching is complimentary to the default type based\n     * searching, and a lot more comprehensive as it allows you complete control\n     * over the searching logic. Each element in this array is a function\n     * (parameters described below) that is called for every row in the table,\n     * and your logic decides if it should be included in the searching data set\n     * or not.\n     *\n     * Searching functions have the following input parameters:\n     *\n     * 1. `{object}` DataTables settings object: see\n     *    {@link DataTable.models.oSettings}\n     * 2. `{array|object}` Data for the row to be processed (same as the\n     *    original format that was passed in as the data source, or an array\n     *    from a DOM data source\n     * 3. `{int}` Row index ({@link DataTable.models.oSettings.aoData}), which\n     *    can be useful to retrieve the `TR` element if you need DOM interaction.\n     *\n     * And the following return is expected:\n     *\n     * * {boolean} Include the row in the searched result set (true) or not\n     *   (false)\n     *\n     * Note that as with the main search ability in DataTables, technically this\n     * is \"filtering\", since it is subtractive. However, for consistency in\n     * naming we call it searching here.\n     *\n     *  @type array\n     *  @default []\n     *\n     *  @example\n     *    // The following example shows custom search being applied to the\n     *    // fourth column (i.e. the data[3] index) based on two input values\n     *    // from the end-user, matching the data in a certain range.\n     *    $.fn.dataTable.ext.search.push(\n     *      function( settings, data, dataIndex ) {\n     *        var min = document.getElementById('min').value * 1;\n     *        var max = document.getElementById('max').value * 1;\n     *        var version = data[3] == \"-\" ? 0 : data[3]*1;\n     *\n     *        if ( min == \"\" && max == \"\" ) {\n     *          return true;\n     *        }\n     *        else if ( min == \"\" && version < max ) {\n     *          return true;\n     *        }\n     *        else if ( min < version && \"\" == max ) {\n     *          return true;\n     *        }\n     *        else if ( min < version && version < max ) {\n     *          return true;\n     *        }\n     *        return false;\n     *      }\n     *    );\n     */\n    search: [],\n\n    /**\n     * Selector extensions\n     *\n     * The `selector` option can be used to extend the options available for the\n     * selector modifier options (`selector-modifier` object data type) that\n     * each of the three built in selector types offer (row, column and cell +\n     * their plural counterparts). For example the Select extension uses this\n     * mechanism to provide an option to select only rows, columns and cells\n     * that have been marked as selected by the end user (`{selected: true}`),\n     * which can be used in conjunction with the existing built in selector\n     * options.\n     *\n     * Each property is an array to which functions can be pushed. The functions\n     * take three attributes:\n     *\n     * * Settings object for the host table\n     * * Options object (`selector-modifier` object type)\n     * * Array of selected item indexes\n     *\n     * The return is an array of the resulting item indexes after the custom\n     * selector has been applied.\n     *\n     *  @type object\n     */\n    selector: {\n      cell: [],\n      column: [],\n      row: []\n    },\n\n    /**\n     * Internal functions, exposed for used in plug-ins.\n     * \n     * Please note that you should not need to use the internal methods for\n     * anything other than a plug-in (and even then, try to avoid if possible).\n     * The internal function may change between releases.\n     *\n     *  @type object\n     *  @default {}\n     */\n    internal: {},\n\n    /**\n     * Legacy configuration options. Enable and disable legacy options that\n     * are available in DataTables.\n     *\n     *  @type object\n     */\n    legacy: {\n      /**\n       * Enable / disable DataTables 1.9 compatible server-side processing\n       * requests\n       *\n       *  @type boolean\n       *  @default null\n       */\n      ajax: null\n    },\n\n    /**\n     * Pagination plug-in methods.\n     * \n     * Each entry in this object is a function and defines which buttons should\n     * be shown by the pagination rendering method that is used for the table:\n     * {@link DataTable.ext.renderer.pageButton}. The renderer addresses how the\n     * buttons are displayed in the document, while the functions here tell it\n     * what buttons to display. This is done by returning an array of button\n     * descriptions (what each button will do).\n     *\n     * Pagination types (the four built in options and any additional plug-in\n     * options defined here) can be used through the `paginationType`\n     * initialisation parameter.\n     *\n     * The functions defined take two parameters:\n     *\n     * 1. `{int} page` The current page index\n     * 2. `{int} pages` The number of pages in the table\n     *\n     * Each function is expected to return an array where each element of the\n     * array can be one of:\n     *\n     * * `first` - Jump to first page when activated\n     * * `last` - Jump to last page when activated\n     * * `previous` - Show previous page when activated\n     * * `next` - Show next page when activated\n     * * `{int}` - Show page of the index given\n     * * `{array}` - A nested array containing the above elements to add a\n     *   containing 'DIV' element (might be useful for styling).\n     *\n     * Note that DataTables v1.9- used this object slightly differently whereby\n     * an object with two functions would be defined for each plug-in. That\n     * ability is still supported by DataTables 1.10+ to provide backwards\n     * compatibility, but this option of use is now decremented and no longer\n     * documented in DataTables 1.10+.\n     *\n     *  @type object\n     *  @default {}\n     *\n     *  @example\n     *    // Show previous, next and current page buttons only\n     *    $.fn.dataTableExt.oPagination.current = function ( page, pages ) {\n     *      return [ 'previous', page, 'next' ];\n     *    };\n     */\n    pager: {},\n    renderer: {\n      pageButton: {},\n      header: {}\n    },\n\n    /**\n     * Ordering plug-ins - custom data source\n     * \n     * The extension options for ordering of data available here is complimentary\n     * to the default type based ordering that DataTables typically uses. It\n     * allows much greater control over the the data that is being used to\n     * order a column, but is necessarily therefore more complex.\n     * \n     * This type of ordering is useful if you want to do ordering based on data\n     * live from the DOM (for example the contents of an 'input' element) rather\n     * than just the static string that DataTables knows of.\n     * \n     * The way these plug-ins work is that you create an array of the values you\n     * wish to be ordering for the column in question and then return that\n     * array. The data in the array much be in the index order of the rows in\n     * the table (not the currently ordering order!). Which order data gathering\n     * function is run here depends on the `dt-init columns.orderDataType`\n     * parameter that is used for the column (if any).\n     *\n     * The functions defined take two parameters:\n     *\n     * 1. `{object}` DataTables settings object: see\n     *    {@link DataTable.models.oSettings}\n     * 2. `{int}` Target column index\n     *\n     * Each function is expected to return an array:\n     *\n     * * `{array}` Data for the column to be ordering upon\n     *\n     *  @type array\n     *\n     *  @example\n     *    // Ordering using `input` node values\n     *    $.fn.dataTable.ext.order['dom-text'] = function  ( settings, col )\n     *    {\n     *      return this.api().column( col, {order:'index'} ).nodes().map( function ( td, i ) {\n     *        return $('input', td).val();\n     *      } );\n     *    }\n     */\n    order: {},\n\n    /**\n     * Type based plug-ins.\n     *\n     * Each column in DataTables has a type assigned to it, either by automatic\n     * detection or by direct assignment using the `type` option for the column.\n     * The type of a column will effect how it is ordering and search (plug-ins\n     * can also make use of the column type if required).\n     *\n     * @namespace\n     */\n    type: {\n      /**\n       * Type detection functions.\n       *\n       * The functions defined in this object are used to automatically detect\n       * a column's type, making initialisation of DataTables super easy, even\n       * when complex data is in the table.\n       *\n       * The functions defined take two parameters:\n       *\n          *  1. `{*}` Data from the column cell to be analysed\n          *  2. `{settings}` DataTables settings object. This can be used to\n          *     perform context specific type detection - for example detection\n          *     based on language settings such as using a comma for a decimal\n          *     place. Generally speaking the options from the settings will not\n          *     be required\n       *\n       * Each function is expected to return:\n       *\n       * * `{string|null}` Data type detected, or null if unknown (and thus\n       *   pass it on to the other type detection functions.\n       *\n       *  @type array\n       *\n       *  @example\n       *    // Currency type detection plug-in:\n       *    $.fn.dataTable.ext.type.detect.push(\n       *      function ( data, settings ) {\n       *        // Check the numeric part\n       *        if ( ! data.substring(1).match(/[0-9]/) ) {\n       *          return null;\n       *        }\n       *\n       *        // Check prefixed by currency\n       *        if ( data.charAt(0) == '$' || data.charAt(0) == '&pound;' ) {\n       *          return 'currency';\n       *        }\n       *        return null;\n       *      }\n       *    );\n       */\n      detect: [],\n\n      /**\n       * Type based search formatting.\n       *\n       * The type based searching functions can be used to pre-format the\n       * data to be search on. For example, it can be used to strip HTML\n       * tags or to de-format telephone numbers for numeric only searching.\n       *\n       * Note that is a search is not defined for a column of a given type,\n       * no search formatting will be performed.\n       * \n       * Pre-processing of searching data plug-ins - When you assign the sType\n       * for a column (or have it automatically detected for you by DataTables\n       * or a type detection plug-in), you will typically be using this for\n       * custom sorting, but it can also be used to provide custom searching\n       * by allowing you to pre-processing the data and returning the data in\n       * the format that should be searched upon. This is done by adding\n       * functions this object with a parameter name which matches the sType\n       * for that target column. This is the corollary of <i>afnSortData</i>\n       * for searching data.\n       *\n       * The functions defined take a single parameter:\n       *\n          *  1. `{*}` Data from the column cell to be prepared for searching\n       *\n       * Each function is expected to return:\n       *\n       * * `{string|null}` Formatted string that will be used for the searching.\n       *\n       *  @type object\n       *  @default {}\n       *\n       *  @example\n       *    $.fn.dataTable.ext.type.search['title-numeric'] = function ( d ) {\n       *      return d.replace(/\\n/g,\" \").replace( /<.*?>/g, \"\" );\n       *    }\n       */\n      search: {},\n\n      /**\n       * Type based ordering.\n       *\n       * The column type tells DataTables what ordering to apply to the table\n       * when a column is sorted upon. The order for each type that is defined,\n       * is defined by the functions available in this object.\n       *\n       * Each ordering option can be described by three properties added to\n       * this object:\n       *\n       * * `{type}-pre` - Pre-formatting function\n       * * `{type}-asc` - Ascending order function\n       * * `{type}-desc` - Descending order function\n       *\n       * All three can be used together, only `{type}-pre` or only\n       * `{type}-asc` and `{type}-desc` together. It is generally recommended\n       * that only `{type}-pre` is used, as this provides the optimal\n       * implementation in terms of speed, although the others are provided\n       * for compatibility with existing Javascript sort functions.\n       *\n       * `{type}-pre`: Functions defined take a single parameter:\n       *\n          *  1. `{*}` Data from the column cell to be prepared for ordering\n       *\n       * And return:\n       *\n       * * `{*}` Data to be sorted upon\n       *\n       * `{type}-asc` and `{type}-desc`: Functions are typical Javascript sort\n       * functions, taking two parameters:\n       *\n          *  1. `{*}` Data to compare to the second parameter\n          *  2. `{*}` Data to compare to the first parameter\n       *\n       * And returning:\n       *\n       * * `{*}` Ordering match: <0 if first parameter should be sorted lower\n       *   than the second parameter, ===0 if the two parameters are equal and\n       *   >0 if the first parameter should be sorted height than the second\n       *   parameter.\n       * \n       *  @type object\n       *  @default {}\n       *\n       *  @example\n       *    // Numeric ordering of formatted numbers with a pre-formatter\n       *    $.extend( $.fn.dataTable.ext.type.order, {\n       *      \"string-pre\": function(x) {\n       *        a = (a === \"-\" || a === \"\") ? 0 : a.replace( /[^\\d\\-\\.]/g, \"\" );\n       *        return parseFloat( a );\n       *      }\n       *    } );\n       *\n       *  @example\n       *    // Case-sensitive string ordering, with no pre-formatting method\n       *    $.extend( $.fn.dataTable.ext.order, {\n       *      \"string-case-asc\": function(x,y) {\n       *        return ((x < y) ? -1 : ((x > y) ? 1 : 0));\n       *      },\n       *      \"string-case-desc\": function(x,y) {\n       *        return ((x < y) ? 1 : ((x > y) ? -1 : 0));\n       *      }\n       *    } );\n       */\n      order: {}\n    },\n\n    /**\n     * Unique DataTables instance counter\n     *\n     * @type int\n     * @private\n     */\n    _unique: 0,\n    //\n    // Depreciated\n    // The following properties are retained for backwards compatiblity only.\n    // The should not be used in new projects and will be removed in a future\n    // version\n    //\n\n    /**\n     * Version check function.\n     *  @type function\n     *  @depreciated Since 1.10\n     */\n    fnVersionCheck: DataTable.fnVersionCheck,\n\n    /**\n     * Index for what 'this' index API functions should use\n     *  @type int\n     *  @deprecated Since v1.10\n     */\n    iApiIndex: 0,\n\n    /**\n     * jQuery UI class container\n     *  @type object\n     *  @deprecated Since v1.10\n     */\n    oJUIClasses: {},\n\n    /**\n     * Software version\n     *  @type string\n     *  @deprecated Since v1.10\n     */\n    sVersion: DataTable.version\n  }; //\n  // Backwards compatibility. Alias to pre 1.10 Hungarian notation counter parts\n  //\n\n  $.extend(_ext, {\n    afnFiltering: _ext.search,\n    aTypes: _ext.type.detect,\n    ofnSearch: _ext.type.search,\n    oSort: _ext.type.order,\n    afnSortData: _ext.order,\n    aoFeatures: _ext.feature,\n    oApi: _ext.internal,\n    oStdClasses: _ext.classes,\n    oPagination: _ext.pager\n  });\n  $.extend(DataTable.ext.classes, {\n    \"sTable\": \"dataTable\",\n    \"sNoFooter\": \"no-footer\",\n\n    /* Paging buttons */\n    \"sPageButton\": \"paginate_button\",\n    \"sPageButtonActive\": \"current\",\n    \"sPageButtonDisabled\": \"disabled\",\n\n    /* Striping classes */\n    \"sStripeOdd\": \"odd\",\n    \"sStripeEven\": \"even\",\n\n    /* Empty row */\n    \"sRowEmpty\": \"dataTables_empty\",\n\n    /* Features */\n    \"sWrapper\": \"dataTables_wrapper\",\n    \"sFilter\": \"dataTables_filter\",\n    \"sInfo\": \"dataTables_info\",\n    \"sPaging\": \"dataTables_paginate paging_\",\n\n    /* Note that the type is postfixed */\n    \"sLength\": \"dataTables_length\",\n    \"sProcessing\": \"dataTables_processing\",\n\n    /* Sorting */\n    \"sSortAsc\": \"sorting_asc\",\n    \"sSortDesc\": \"sorting_desc\",\n    \"sSortable\": \"sorting\",\n\n    /* Sortable in both directions */\n    \"sSortableAsc\": \"sorting_asc_disabled\",\n    \"sSortableDesc\": \"sorting_desc_disabled\",\n    \"sSortableNone\": \"sorting_disabled\",\n    \"sSortColumn\": \"sorting_\",\n\n    /* Note that an int is postfixed for the sorting order */\n\n    /* Filtering */\n    \"sFilterInput\": \"\",\n\n    /* Page length */\n    \"sLengthSelect\": \"\",\n\n    /* Scrolling */\n    \"sScrollWrapper\": \"dataTables_scroll\",\n    \"sScrollHead\": \"dataTables_scrollHead\",\n    \"sScrollHeadInner\": \"dataTables_scrollHeadInner\",\n    \"sScrollBody\": \"dataTables_scrollBody\",\n    \"sScrollFoot\": \"dataTables_scrollFoot\",\n    \"sScrollFootInner\": \"dataTables_scrollFootInner\",\n\n    /* Misc */\n    \"sHeaderTH\": \"\",\n    \"sFooterTH\": \"\",\n    // Deprecated\n    \"sSortJUIAsc\": \"\",\n    \"sSortJUIDesc\": \"\",\n    \"sSortJUI\": \"\",\n    \"sSortJUIAscAllowed\": \"\",\n    \"sSortJUIDescAllowed\": \"\",\n    \"sSortJUIWrapper\": \"\",\n    \"sSortIcon\": \"\",\n    \"sJUIHeader\": \"\",\n    \"sJUIFooter\": \"\"\n  });\n  var extPagination = DataTable.ext.pager;\n\n  function _numbers(page, pages) {\n    var numbers = [],\n        buttons = extPagination.numbers_length,\n        half = Math.floor(buttons / 2),\n        i = 1;\n\n    if (pages <= buttons) {\n      numbers = _range(0, pages);\n    } else if (page <= half) {\n      numbers = _range(0, buttons - 2);\n      numbers.push('ellipsis');\n      numbers.push(pages - 1);\n    } else if (page >= pages - 1 - half) {\n      numbers = _range(pages - (buttons - 2), pages);\n      numbers.splice(0, 0, 'ellipsis'); // no unshift in ie6\n\n      numbers.splice(0, 0, 0);\n    } else {\n      numbers = _range(page - half + 2, page + half - 1);\n      numbers.push('ellipsis');\n      numbers.push(pages - 1);\n      numbers.splice(0, 0, 'ellipsis');\n      numbers.splice(0, 0, 0);\n    }\n\n    numbers.DT_el = 'span';\n    return numbers;\n  }\n\n  $.extend(extPagination, {\n    simple: function (page, pages) {\n      return ['previous', 'next'];\n    },\n    full: function (page, pages) {\n      return ['first', 'previous', 'next', 'last'];\n    },\n    numbers: function (page, pages) {\n      return [_numbers(page, pages)];\n    },\n    simple_numbers: function (page, pages) {\n      return ['previous', _numbers(page, pages), 'next'];\n    },\n    full_numbers: function (page, pages) {\n      return ['first', 'previous', _numbers(page, pages), 'next', 'last'];\n    },\n    first_last_numbers: function (page, pages) {\n      return ['first', _numbers(page, pages), 'last'];\n    },\n    // For testing and plug-ins to use\n    _numbers: _numbers,\n    // Number of number buttons (including ellipsis) to show. _Must be odd!_\n    numbers_length: 7\n  });\n  $.extend(true, DataTable.ext.renderer, {\n    pageButton: {\n      _: function (settings, host, idx, buttons, page, pages) {\n        var classes = settings.oClasses;\n        var lang = settings.oLanguage.oPaginate;\n        var aria = settings.oLanguage.oAria.paginate || {};\n        var btnDisplay,\n            btnClass,\n            counter = 0;\n\n        var attach = function (container, buttons) {\n          var i, ien, node, button, tabIndex;\n          var disabledClass = classes.sPageButtonDisabled;\n\n          var clickHandler = function (e) {\n            _fnPageChange(settings, e.data.action, true);\n          };\n\n          for (i = 0, ien = buttons.length; i < ien; i++) {\n            button = buttons[i];\n\n            if ($.isArray(button)) {\n              var inner = $('<' + (button.DT_el || 'div') + '/>').appendTo(container);\n              attach(inner, button);\n            } else {\n              btnDisplay = null;\n              btnClass = button;\n              tabIndex = settings.iTabIndex;\n\n              switch (button) {\n                case 'ellipsis':\n                  container.append('<span class=\"ellipsis\">&#x2026;</span>');\n                  break;\n\n                case 'first':\n                  btnDisplay = lang.sFirst;\n\n                  if (page === 0) {\n                    tabIndex = -1;\n                    btnClass += ' ' + disabledClass;\n                  }\n\n                  break;\n\n                case 'previous':\n                  btnDisplay = lang.sPrevious;\n\n                  if (page === 0) {\n                    tabIndex = -1;\n                    btnClass += ' ' + disabledClass;\n                  }\n\n                  break;\n\n                case 'next':\n                  btnDisplay = lang.sNext;\n\n                  if (pages === 0 || page === pages - 1) {\n                    tabIndex = -1;\n                    btnClass += ' ' + disabledClass;\n                  }\n\n                  break;\n\n                case 'last':\n                  btnDisplay = lang.sLast;\n\n                  if (page === pages - 1) {\n                    tabIndex = -1;\n                    btnClass += ' ' + disabledClass;\n                  }\n\n                  break;\n\n                default:\n                  btnDisplay = button + 1;\n                  btnClass = page === button ? classes.sPageButtonActive : '';\n                  break;\n              }\n\n              if (btnDisplay !== null) {\n                node = $('<a>', {\n                  'class': classes.sPageButton + ' ' + btnClass,\n                  'aria-controls': settings.sTableId,\n                  'aria-label': aria[button],\n                  'data-dt-idx': counter,\n                  'tabindex': tabIndex,\n                  'id': idx === 0 && typeof button === 'string' ? settings.sTableId + '_' + button : null\n                }).html(btnDisplay).appendTo(container);\n\n                _fnBindAction(node, {\n                  action: button\n                }, clickHandler);\n\n                counter++;\n              }\n            }\n          }\n        }; // IE9 throws an 'unknown error' if document.activeElement is used\n        // inside an iframe or frame. Try / catch the error. Not good for\n        // accessibility, but neither are frames.\n\n\n        var activeEl;\n\n        try {\n          // Because this approach is destroying and recreating the paging\n          // elements, focus is lost on the select button which is bad for\n          // accessibility. So we want to restore focus once the draw has\n          // completed\n          activeEl = $(host).find(document.activeElement).data('dt-idx');\n        } catch (e) {}\n\n        attach($(host).empty(), buttons);\n\n        if (activeEl !== undefined) {\n          $(host).find('[data-dt-idx=' + activeEl + ']').trigger('focus');\n        }\n      }\n    }\n  }); // Built in type detection. See model.ext.aTypes for information about\n  // what is required from this methods.\n\n  $.extend(DataTable.ext.type.detect, [// Plain numbers - first since V8 detects some plain numbers as dates\n  // e.g. Date.parse('55') (but not all, e.g. Date.parse('22')...).\n  function (d, settings) {\n    var decimal = settings.oLanguage.sDecimal;\n    return _isNumber(d, decimal) ? 'num' + decimal : null;\n  }, // Dates (only those recognised by the browser's Date.parse)\n  function (d, settings) {\n    // V8 tries _very_ hard to make a string passed into `Date.parse()`\n    // valid, so we need to use a regex to restrict date formats. Use a\n    // plug-in for anything other than ISO8601 style strings\n    if (d && !(d instanceof Date) && !_re_date.test(d)) {\n      return null;\n    }\n\n    var parsed = Date.parse(d);\n    return parsed !== null && !isNaN(parsed) || _empty(d) ? 'date' : null;\n  }, // Formatted numbers\n  function (d, settings) {\n    var decimal = settings.oLanguage.sDecimal;\n    return _isNumber(d, decimal, true) ? 'num-fmt' + decimal : null;\n  }, // HTML numeric\n  function (d, settings) {\n    var decimal = settings.oLanguage.sDecimal;\n    return _htmlNumeric(d, decimal) ? 'html-num' + decimal : null;\n  }, // HTML numeric, formatted\n  function (d, settings) {\n    var decimal = settings.oLanguage.sDecimal;\n    return _htmlNumeric(d, decimal, true) ? 'html-num-fmt' + decimal : null;\n  }, // HTML (this is strict checking - there must be html)\n  function (d, settings) {\n    return _empty(d) || typeof d === 'string' && d.indexOf('<') !== -1 ? 'html' : null;\n  }]); // Filter formatting functions. See model.ext.ofnSearch for information about\n  // what is required from these methods.\n  // \n  // Note that additional search methods are added for the html numbers and\n  // html formatted numbers by `_addNumericSort()` when we know what the decimal\n  // place is\n\n  $.extend(DataTable.ext.type.search, {\n    html: function (data) {\n      return _empty(data) ? data : typeof data === 'string' ? data.replace(_re_new_lines, \" \").replace(_re_html, \"\") : '';\n    },\n    string: function (data) {\n      return _empty(data) ? data : typeof data === 'string' ? data.replace(_re_new_lines, \" \") : data;\n    }\n  });\n\n  var __numericReplace = function (d, decimalPlace, re1, re2) {\n    if (d !== 0 && (!d || d === '-')) {\n      return -Infinity;\n    } // If a decimal place other than `.` is used, it needs to be given to the\n    // function so we can detect it and replace with a `.` which is the only\n    // decimal place Javascript recognises - it is not locale aware.\n\n\n    if (decimalPlace) {\n      d = _numToDecimal(d, decimalPlace);\n    }\n\n    if (d.replace) {\n      if (re1) {\n        d = d.replace(re1, '');\n      }\n\n      if (re2) {\n        d = d.replace(re2, '');\n      }\n    }\n\n    return d * 1;\n  }; // Add the numeric 'deformatting' functions for sorting and search. This is done\n  // in a function to provide an easy ability for the language options to add\n  // additional methods if a non-period decimal place is used.\n\n\n  function _addNumericSort(decimalPlace) {\n    $.each({\n      // Plain numbers\n      \"num\": function (d) {\n        return __numericReplace(d, decimalPlace);\n      },\n      // Formatted numbers\n      \"num-fmt\": function (d) {\n        return __numericReplace(d, decimalPlace, _re_formatted_numeric);\n      },\n      // HTML numeric\n      \"html-num\": function (d) {\n        return __numericReplace(d, decimalPlace, _re_html);\n      },\n      // HTML numeric, formatted\n      \"html-num-fmt\": function (d) {\n        return __numericReplace(d, decimalPlace, _re_html, _re_formatted_numeric);\n      }\n    }, function (key, fn) {\n      // Add the ordering method\n      _ext.type.order[key + decimalPlace + '-pre'] = fn; // For HTML types add a search formatter that will strip the HTML\n\n      if (key.match(/^html\\-/)) {\n        _ext.type.search[key + decimalPlace] = _ext.type.search.html;\n      }\n    });\n  } // Default sort methods\n\n\n  $.extend(_ext.type.order, {\n    // Dates\n    \"date-pre\": function (d) {\n      var ts = Date.parse(d);\n      return isNaN(ts) ? -Infinity : ts;\n    },\n    // html\n    \"html-pre\": function (a) {\n      return _empty(a) ? '' : a.replace ? a.replace(/<.*?>/g, \"\").toLowerCase() : a + '';\n    },\n    // string\n    \"string-pre\": function (a) {\n      // This is a little complex, but faster than always calling toString,\n      // http://jsperf.com/tostring-v-check\n      return _empty(a) ? '' : typeof a === 'string' ? a.toLowerCase() : !a.toString ? '' : a.toString();\n    },\n    // string-asc and -desc are retained only for compatibility with the old\n    // sort methods\n    \"string-asc\": function (x, y) {\n      return x < y ? -1 : x > y ? 1 : 0;\n    },\n    \"string-desc\": function (x, y) {\n      return x < y ? 1 : x > y ? -1 : 0;\n    }\n  }); // Numeric sorting types - order doesn't matter here\n\n  _addNumericSort('');\n\n  $.extend(true, DataTable.ext.renderer, {\n    header: {\n      _: function (settings, cell, column, classes) {\n        // No additional mark-up required\n        // Attach a sort listener to update on sort - note that using the\n        // `DT` namespace will allow the event to be removed automatically\n        // on destroy, while the `dt` namespaced event is the one we are\n        // listening for\n        $(settings.nTable).on('order.dt.DT', function (e, ctx, sorting, columns) {\n          if (settings !== ctx) {\n            // need to check this this is the host\n            return; // table, not a nested one\n          }\n\n          var colIdx = column.idx;\n          cell.removeClass(column.sSortingClass + ' ' + classes.sSortAsc + ' ' + classes.sSortDesc).addClass(columns[colIdx] == 'asc' ? classes.sSortAsc : columns[colIdx] == 'desc' ? classes.sSortDesc : column.sSortingClass);\n        });\n      },\n      jqueryui: function (settings, cell, column, classes) {\n        $('<div/>').addClass(classes.sSortJUIWrapper).append(cell.contents()).append($('<span/>').addClass(classes.sSortIcon + ' ' + column.sSortingClassJUI)).appendTo(cell); // Attach a sort listener to update on sort\n\n        $(settings.nTable).on('order.dt.DT', function (e, ctx, sorting, columns) {\n          if (settings !== ctx) {\n            return;\n          }\n\n          var colIdx = column.idx;\n          cell.removeClass(classes.sSortAsc + \" \" + classes.sSortDesc).addClass(columns[colIdx] == 'asc' ? classes.sSortAsc : columns[colIdx] == 'desc' ? classes.sSortDesc : column.sSortingClass);\n          cell.find('span.' + classes.sSortIcon).removeClass(classes.sSortJUIAsc + \" \" + classes.sSortJUIDesc + \" \" + classes.sSortJUI + \" \" + classes.sSortJUIAscAllowed + \" \" + classes.sSortJUIDescAllowed).addClass(columns[colIdx] == 'asc' ? classes.sSortJUIAsc : columns[colIdx] == 'desc' ? classes.sSortJUIDesc : column.sSortingClassJUI);\n        });\n      }\n    }\n  });\n  /*\n   * Public helper functions. These aren't used internally by DataTables, or\n   * called by any of the options passed into DataTables, but they can be used\n   * externally by developers working with DataTables. They are helper functions\n   * to make working with DataTables a little bit easier.\n   */\n\n  var __htmlEscapeEntities = function (d) {\n    return typeof d === 'string' ? d.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;') : d;\n  };\n  /**\n   * Helpers for `columns.render`.\n   *\n   * The options defined here can be used with the `columns.render` initialisation\n   * option to provide a display renderer. The following functions are defined:\n   *\n   * * `number` - Will format numeric data (defined by `columns.data`) for\n   *   display, retaining the original unformatted data for sorting and filtering.\n   *   It takes 5 parameters:\n   *   * `string` - Thousands grouping separator\n   *   * `string` - Decimal point indicator\n   *   * `integer` - Number of decimal points to show\n   *   * `string` (optional) - Prefix.\n   *   * `string` (optional) - Postfix (/suffix).\n   * * `text` - Escape HTML to help prevent XSS attacks. It has no optional\n   *   parameters.\n   *\n   * @example\n   *   // Column definition using the number renderer\n   *   {\n   *     data: \"salary\",\n   *     render: $.fn.dataTable.render.number( '\\'', '.', 0, '$' )\n   *   }\n   *\n   * @namespace\n   */\n\n\n  DataTable.render = {\n    number: function (thousands, decimal, precision, prefix, postfix) {\n      return {\n        display: function (d) {\n          if (typeof d !== 'number' && typeof d !== 'string') {\n            return d;\n          }\n\n          var negative = d < 0 ? '-' : '';\n          var flo = parseFloat(d); // If NaN then there isn't much formatting that we can do - just\n          // return immediately, escaping any HTML (this was supposed to\n          // be a number after all)\n\n          if (isNaN(flo)) {\n            return __htmlEscapeEntities(d);\n          }\n\n          flo = flo.toFixed(precision);\n          d = Math.abs(flo);\n          var intPart = parseInt(d, 10);\n          var floatPart = precision ? decimal + (d - intPart).toFixed(precision).substring(2) : '';\n          return negative + (prefix || '') + intPart.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, thousands) + floatPart + (postfix || '');\n        }\n      };\n    },\n    text: function () {\n      return {\n        display: __htmlEscapeEntities,\n        filter: __htmlEscapeEntities\n      };\n    }\n  };\n  /*\n   * This is really a good bit rubbish this method of exposing the internal methods\n   * publicly... - To be fixed in 2.0 using methods on the prototype\n   */\n\n  /**\n   * Create a wrapper function for exporting an internal functions to an external API.\n   *  @param {string} fn API function name\n   *  @returns {function} wrapped function\n   *  @memberof DataTable#internal\n   */\n\n  function _fnExternApiFunc(fn) {\n    return function () {\n      var args = [_fnSettingsFromNode(this[DataTable.ext.iApiIndex])].concat(Array.prototype.slice.call(arguments));\n      return DataTable.ext.internal[fn].apply(this, args);\n    };\n  }\n  /**\n   * Reference to internal functions for use by plug-in developers. Note that\n   * these methods are references to internal functions and are considered to be\n   * private. If you use these methods, be aware that they are liable to change\n   * between versions.\n   *  @namespace\n   */\n\n\n  $.extend(DataTable.ext.internal, {\n    _fnExternApiFunc: _fnExternApiFunc,\n    _fnBuildAjax: _fnBuildAjax,\n    _fnAjaxUpdate: _fnAjaxUpdate,\n    _fnAjaxParameters: _fnAjaxParameters,\n    _fnAjaxUpdateDraw: _fnAjaxUpdateDraw,\n    _fnAjaxDataSrc: _fnAjaxDataSrc,\n    _fnAddColumn: _fnAddColumn,\n    _fnColumnOptions: _fnColumnOptions,\n    _fnAdjustColumnSizing: _fnAdjustColumnSizing,\n    _fnVisibleToColumnIndex: _fnVisibleToColumnIndex,\n    _fnColumnIndexToVisible: _fnColumnIndexToVisible,\n    _fnVisbleColumns: _fnVisbleColumns,\n    _fnGetColumns: _fnGetColumns,\n    _fnColumnTypes: _fnColumnTypes,\n    _fnApplyColumnDefs: _fnApplyColumnDefs,\n    _fnHungarianMap: _fnHungarianMap,\n    _fnCamelToHungarian: _fnCamelToHungarian,\n    _fnLanguageCompat: _fnLanguageCompat,\n    _fnBrowserDetect: _fnBrowserDetect,\n    _fnAddData: _fnAddData,\n    _fnAddTr: _fnAddTr,\n    _fnNodeToDataIndex: _fnNodeToDataIndex,\n    _fnNodeToColumnIndex: _fnNodeToColumnIndex,\n    _fnGetCellData: _fnGetCellData,\n    _fnSetCellData: _fnSetCellData,\n    _fnSplitObjNotation: _fnSplitObjNotation,\n    _fnGetObjectDataFn: _fnGetObjectDataFn,\n    _fnSetObjectDataFn: _fnSetObjectDataFn,\n    _fnGetDataMaster: _fnGetDataMaster,\n    _fnClearTable: _fnClearTable,\n    _fnDeleteIndex: _fnDeleteIndex,\n    _fnInvalidate: _fnInvalidate,\n    _fnGetRowElements: _fnGetRowElements,\n    _fnCreateTr: _fnCreateTr,\n    _fnBuildHead: _fnBuildHead,\n    _fnDrawHead: _fnDrawHead,\n    _fnDraw: _fnDraw,\n    _fnReDraw: _fnReDraw,\n    _fnAddOptionsHtml: _fnAddOptionsHtml,\n    _fnDetectHeader: _fnDetectHeader,\n    _fnGetUniqueThs: _fnGetUniqueThs,\n    _fnFeatureHtmlFilter: _fnFeatureHtmlFilter,\n    _fnFilterComplete: _fnFilterComplete,\n    _fnFilterCustom: _fnFilterCustom,\n    _fnFilterColumn: _fnFilterColumn,\n    _fnFilter: _fnFilter,\n    _fnFilterCreateSearch: _fnFilterCreateSearch,\n    _fnEscapeRegex: _fnEscapeRegex,\n    _fnFilterData: _fnFilterData,\n    _fnFeatureHtmlInfo: _fnFeatureHtmlInfo,\n    _fnUpdateInfo: _fnUpdateInfo,\n    _fnInfoMacros: _fnInfoMacros,\n    _fnInitialise: _fnInitialise,\n    _fnInitComplete: _fnInitComplete,\n    _fnLengthChange: _fnLengthChange,\n    _fnFeatureHtmlLength: _fnFeatureHtmlLength,\n    _fnFeatureHtmlPaginate: _fnFeatureHtmlPaginate,\n    _fnPageChange: _fnPageChange,\n    _fnFeatureHtmlProcessing: _fnFeatureHtmlProcessing,\n    _fnProcessingDisplay: _fnProcessingDisplay,\n    _fnFeatureHtmlTable: _fnFeatureHtmlTable,\n    _fnScrollDraw: _fnScrollDraw,\n    _fnApplyToChildren: _fnApplyToChildren,\n    _fnCalculateColumnWidths: _fnCalculateColumnWidths,\n    _fnThrottle: _fnThrottle,\n    _fnConvertToWidth: _fnConvertToWidth,\n    _fnGetWidestNode: _fnGetWidestNode,\n    _fnGetMaxLenString: _fnGetMaxLenString,\n    _fnStringToCss: _fnStringToCss,\n    _fnSortFlatten: _fnSortFlatten,\n    _fnSort: _fnSort,\n    _fnSortAria: _fnSortAria,\n    _fnSortListener: _fnSortListener,\n    _fnSortAttachListener: _fnSortAttachListener,\n    _fnSortingClasses: _fnSortingClasses,\n    _fnSortData: _fnSortData,\n    _fnSaveState: _fnSaveState,\n    _fnLoadState: _fnLoadState,\n    _fnSettingsFromNode: _fnSettingsFromNode,\n    _fnLog: _fnLog,\n    _fnMap: _fnMap,\n    _fnBindAction: _fnBindAction,\n    _fnCallbackReg: _fnCallbackReg,\n    _fnCallbackFire: _fnCallbackFire,\n    _fnLengthOverflow: _fnLengthOverflow,\n    _fnRenderer: _fnRenderer,\n    _fnDataSource: _fnDataSource,\n    _fnRowAttributes: _fnRowAttributes,\n    _fnExtend: _fnExtend,\n    _fnCalculateEnd: function () {} // Used by a lot of plug-ins, but redundant\n    // in 1.10, so this dead-end function is\n    // added to prevent errors\n\n  }); // jQuery access\n\n  $.fn.dataTable = DataTable; // Provide access to the host jQuery object (circular reference)\n\n  DataTable.$ = $; // Legacy aliases\n\n  $.fn.dataTableSettings = DataTable.settings;\n  $.fn.dataTableExt = DataTable.ext; // With a capital `D` we return a DataTables API instance rather than a\n  // jQuery object\n\n  $.fn.DataTable = function (opts) {\n    return $(this).dataTable(opts).api();\n  }; // All properties that are available to $.fn.dataTable should also be\n  // available on $.fn.DataTable\n\n\n  $.each(DataTable, function (prop, val) {\n    $.fn.DataTable[prop] = val;\n  }); // Information about events fired by DataTables - for documentation.\n\n  /**\n   * Draw event, fired whenever the table is redrawn on the page, at the same\n   * point as fnDrawCallback. This may be useful for binding events or\n   * performing calculations when the table is altered at all.\n   *  @name DataTable#draw.dt\n   *  @event\n   *  @param {event} e jQuery event object\n   *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n   */\n\n  /**\n   * Search event, fired when the searching applied to the table (using the\n   * built-in global search, or column filters) is altered.\n   *  @name DataTable#search.dt\n   *  @event\n   *  @param {event} e jQuery event object\n   *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n   */\n\n  /**\n   * Page change event, fired when the paging of the table is altered.\n   *  @name DataTable#page.dt\n   *  @event\n   *  @param {event} e jQuery event object\n   *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n   */\n\n  /**\n   * Order event, fired when the ordering applied to the table is altered.\n   *  @name DataTable#order.dt\n   *  @event\n   *  @param {event} e jQuery event object\n   *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n   */\n\n  /**\n   * DataTables initialisation complete event, fired when the table is fully\n   * drawn, including Ajax data loaded, if Ajax data is required.\n   *  @name DataTable#init.dt\n   *  @event\n   *  @param {event} e jQuery event object\n   *  @param {object} oSettings DataTables settings object\n   *  @param {object} json The JSON object request from the server - only\n   *    present if client-side Ajax sourced data is used</li></ol>\n   */\n\n  /**\n   * State save event, fired when the table has changed state a new state save\n   * is required. This event allows modification of the state saving object\n   * prior to actually doing the save, including addition or other state\n   * properties (for plug-ins) or modification of a DataTables core property.\n   *  @name DataTable#stateSaveParams.dt\n   *  @event\n   *  @param {event} e jQuery event object\n   *  @param {object} oSettings DataTables settings object\n   *  @param {object} json The state information to be saved\n   */\n\n  /**\n   * State load event, fired when the table is loading state from the stored\n   * data, but prior to the settings object being modified by the saved state\n   * - allowing modification of the saved state is required or loading of\n   * state for a plug-in.\n   *  @name DataTable#stateLoadParams.dt\n   *  @event\n   *  @param {event} e jQuery event object\n   *  @param {object} oSettings DataTables settings object\n   *  @param {object} json The saved state information\n   */\n\n  /**\n   * State loaded event, fired when state has been loaded from stored data and\n   * the settings object has been modified by the loaded data.\n   *  @name DataTable#stateLoaded.dt\n   *  @event\n   *  @param {event} e jQuery event object\n   *  @param {object} oSettings DataTables settings object\n   *  @param {object} json The saved state information\n   */\n\n  /**\n   * Processing event, fired when DataTables is doing some kind of processing\n   * (be it, order, search or anything else). It can be used to indicate to\n   * the end user that there is something happening, or that something has\n   * finished.\n   *  @name DataTable#processing.dt\n   *  @event\n   *  @param {event} e jQuery event object\n   *  @param {object} oSettings DataTables settings object\n   *  @param {boolean} bShow Flag for if DataTables is doing processing or not\n   */\n\n  /**\n   * Ajax (XHR) event, fired whenever an Ajax request is completed from a\n   * request to made to the server for new data. This event is called before\n   * DataTables processed the returned data, so it can also be used to pre-\n   * process the data returned from the server, if needed.\n   *\n   * Note that this trigger is called in `fnServerData`, if you override\n   * `fnServerData` and which to use this event, you need to trigger it in you\n   * success function.\n   *  @name DataTable#xhr.dt\n   *  @event\n   *  @param {event} e jQuery event object\n   *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n   *  @param {object} json JSON returned from the server\n   *\n   *  @example\n   *     // Use a custom property returned from the server in another DOM element\n   *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {\n   *       $('#status').html( json.status );\n   *     } );\n   *\n   *  @example\n   *     // Pre-process the data returned from the server\n   *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {\n   *       for ( var i=0, ien=json.aaData.length ; i<ien ; i++ ) {\n   *         json.aaData[i].sum = json.aaData[i].one + json.aaData[i].two;\n   *       }\n   *       // Note no return - manipulate the data directly in the JSON object.\n   *     } );\n   */\n\n  /**\n   * Destroy event, fired when the DataTable is destroyed by calling fnDestroy\n   * or passing the bDestroy:true parameter in the initialisation object. This\n   * can be used to remove bound events, added DOM nodes, etc.\n   *  @name DataTable#destroy.dt\n   *  @event\n   *  @param {event} e jQuery event object\n   *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n   */\n\n  /**\n   * Page length change event, fired when number of records to show on each\n   * page (the length) is changed.\n   *  @name DataTable#length.dt\n   *  @event\n   *  @param {event} e jQuery event object\n   *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n   *  @param {integer} len New length\n   */\n\n  /**\n   * Column sizing has changed.\n   *  @name DataTable#column-sizing.dt\n   *  @event\n   *  @param {event} e jQuery event object\n   *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n   */\n\n  /**\n   * Column visibility has changed.\n   *  @name DataTable#column-visibility.dt\n   *  @event\n   *  @param {event} e jQuery event object\n   *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n   *  @param {int} column Column index\n   *  @param {bool} vis `false` if column now hidden, or `true` if visible\n   */\n\n  return $.fn.dataTable;\n});","map":{"version":3,"sources":["C:/Users/pc/Downloads/admin-template/node_modules/datatables.net/js/jquery.dataTables.js"],"names":["factory","define","amd","$","window","document","exports","module","root","require","jQuery","undefined","DataTable","options","sSelector","oOpts","api","_","rows","data","traditional","_Api","_fnSettingsFromNode","_ext","iApiIndex","fnAddData","redraw","isArray","isPlainObject","add","row","draw","flatten","toArray","fnAdjustColumnSizing","bRedraw","columns","adjust","settings","scroll","oScroll","sX","sY","_fnScrollDraw","fnClearTable","clear","fnClose","nTr","child","hide","fnDeleteRow","target","callback","aoData","remove","call","fnDestroy","destroy","fnDraw","complete","fnFilter","sInput","iColumn","bRegex","bSmart","bShowGlobal","bCaseInsensitive","search","column","fnGetData","src","col","type","nodeName","toLowerCase","cell","fnGetNodes","iRow","node","nodes","fnGetPosition","toUpperCase","index","columnVisible","fnIsOpen","isShown","fnOpen","mHtml","sClass","show","fnPageChange","mAction","page","fnSetColumnVis","iCol","bShow","visible","fnSettings","fnSort","aaSort","order","fnSortListener","nNode","fnCallback","listener","fnUpdate","mData","mRow","bAction","fnVersionCheck","_that","emptyInit","len","length","oApi","internal","fn","ext","_fnExternApiFunc","each","o","oInit","_fnExtend","i","iLen","j","jLen","k","kLen","sId","getAttribute","bInitHandedOff","defaults","$this","_fnLog","_fnCompatOpts","_fnCompatCols","_fnCamelToHungarian","extend","allSettings","s","nTable","nTHead","parentNode","nTFoot","bRetrieve","bDestroy","oInstance","sTableId","id","splice","_unique","oSettings","models","style","width","push","dataTable","_fnLanguageCompat","oLanguage","aLengthMenu","iDisplayLength","_fnMap","oFeatures","_fnCallbackReg","fnDrawCallback","fnServerParams","fnStateSaveParams","fnStateLoadParams","fnStateLoaded","fnRowCallback","fnCreatedRow","fnHeaderCallback","fnFooterCallback","fnInitComplete","fnPreDrawCallback","rowIdFn","_fnGetObjectDataFn","rowId","_fnBrowserDetect","oClasses","classes","addClass","sTable","iInitDisplayStart","iDisplayStart","_iDisplayStart","iDeferLoading","bDeferLoading","tmp","_iRecordsDisplay","_iRecordsTotal","sUrl","ajax","dataType","url","success","json","_fnInitialise","error","asStripeClasses","sStripeOdd","sStripeEven","stripeClasses","rowOne","children","find","eq","inArray","map","el","hasClass","removeClass","join","asDestroyStripes","slice","anThs","aoColumnsInit","nThead","getElementsByTagName","_fnDetectHeader","aoHeader","_fnGetUniqueThs","aoColumns","_fnAddColumn","_fnApplyColumnDefs","aoColumnDefs","oDef","_fnColumnOptions","a","name","sort","filter","features","loadedInit","aaSorting","sorting","asSorting","_fnSortingClasses","bSort","bSorted","aSort","_fnSortFlatten","sortedColumns","val","dir","_fnCallbackFire","_fnSortAria","_fnDataSource","bDeferRender","captions","_captionSide","css","thead","appendTo","tbody","nTBody","tfoot","sNoFooter","aoFooter","aaData","_fnAddData","_fnAddTr","aiDisplay","aiDisplayMaster","bInitialised","bStateSave","_fnSaveState","_fnLoadState","_api_register","_api_registerPlural","_re_dic","_re_new_lines","_re_html","_re_date","_re_escape_regex","RegExp","_re_formatted_numeric","_empty","d","_intVal","integer","parseInt","isNaN","isFinite","_numToDecimal","num","decimalPoint","_fnEscapeRegex","replace","_isNumber","formatted","strType","parseFloat","_isHtml","_htmlNumeric","html","_stripHtml","_pluck","prop","prop2","out","ien","_pluck_order","_range","start","end","_removeEmpty","_areAllUnique","sorted","last","again","util","throttle","freq","frequency","timer","that","now","Date","args","arguments","clearTimeout","setTimeout","apply","escapeRegex","_fnHungarianMap","hungarian","match","newKey","key","indexOf","_hungarianMap","user","force","hungarianKey","charAt","lang","defaultDecimal","sDecimal","_addNumericSort","zeroRecords","sZeroRecords","sEmptyTable","sLoadingRecords","sInfoThousands","sThousands","decimal","_fnCompatMap","knew","old","init","sScrollX","scrollX","searchCols","aoSearchCols","oSearch","dataSort","aDataSort","__browser","browser","n","position","top","left","scrollLeft","height","overflow","append","outer","inner","barWidth","offsetWidth","clientWidth","bScrollOversize","bScrollbarLeft","Math","round","offset","bBounding","getBoundingClientRect","oBrowser","iBarWidth","_fnReduce","inc","value","isSet","hasOwnProperty","nTh","oDefaults","oCol","oColumn","createElement","sTitle","innerHTML","idx","aoPreSearchCols","oOptions","th","sWidthOrig","attr","t","mDataProp","sType","_sManualType","className","iDataSort","mDataSrc","mRender","attrTest","_bAttrSrc","_setter","rowData","meta","innerData","fnSetData","_fnSetObjectDataFn","_rowReadObject","bSortable","sSortableNone","bAsc","bDesc","sSortingClass","sSortingClassJUI","sSortableAsc","sSortJUIAscAllowed","sSortableDesc","sSortJUIDescAllowed","sSortable","sSortJUI","_fnAdjustColumnSizing","bAutoWidth","_fnCalculateColumnWidths","sWidth","_fnVisibleToColumnIndex","iMatch","aiVis","_fnGetColumns","_fnColumnIndexToVisible","iPos","_fnVisbleColumns","vis","bVisible","sParam","_fnColumnTypes","types","detect","jen","ken","detectedType","cache","_fnGetCellData","aoColDefs","aoCols","def","aTargets","targets","aDataIn","anTds","oData","oRow","_aData","nTd","sThisType","aIds","_fnCreateTr","trs","_fnGetRowElements","cells","_fnNodeToDataIndex","_DT_RowIndex","_fnNodeToColumnIndex","anCells","rowIdx","colIdx","iDraw","defaultContent","sDefaultContent","cellData","iDrawError","_fnSetCellData","__reArray","__reFn","_fnSplitObjNotation","str","mSource","fetchData","arrayNotation","funcNotation","innerSrc","substring","setData","b","aLast","_fnGetDataMaster","_fnClearTable","_fnDeleteIndex","iTarget","iTargetIndex","_fnInvalidate","cellWrite","childNodes","removeChild","firstChild","_aSortData","_aFilterData","cols","_fnRowAttributes","tds","td","contents","objectRead","setter","cellProcess","trim","nextSibling","rowNode","nTrIn","create","sCellType","_DT_CellIndex","appendChild","fnCreatedCell","setAttribute","tr","DT_RowClass","split","__rowc","concat","DT_RowAttr","DT_RowData","_fnBuildHead","createHeader","iTabIndex","_fnSortAttachListener","_fnRenderer","sHeaderTH","sFooterTH","nTf","_fnDrawHead","aoSource","bIncludeHidden","nLocalTr","aoLocal","aApplied","iColumns","iRowspan","iColspan","_fnDraw","aPreDraw","_fnProcessingDisplay","anRows","iRowCount","iStripes","iOpenRows","aoOpenRows","oLang","bServerSide","bDrawing","fnRecordsDisplay","iDisplayEnd","fnDisplayEnd","bDestroying","_fnAjaxUpdate","iStart","iEnd","iDataIndex","nRow","sStripe","_sRowStripe","sZero","fnRecordsTotal","sRowEmpty","body","detach","bFiltered","_fnReDraw","holdPosition","bFilter","_fnSort","_fnFilterComplete","oPreviousSearch","_drawHold","_fnAddOptionsHtml","table","holding","insertBefore","insert","sWrapper","nHolding","nTableWrapper","nTableReinsertBefore","aDom","sDom","featureNode","cOption","nNewNode","cNext","sAttr","sJUIHeader","sJUIFooter","aSplit","substr","parent","bPaginate","bLengthChange","_fnFeatureHtmlLength","_fnFeatureHtmlFilter","bProcessing","_fnFeatureHtmlProcessing","_fnFeatureHtmlTable","bInfo","_fnFeatureHtmlInfo","_fnFeatureHtmlPaginate","feature","aoFeatures","cFeature","fnInit","aanFeatures","replaceWith","aLayout","nTrs","nCell","l","iColShifted","bUnique","fnShiftCol","nHeader","aReturn","unique","bSortCellsTop","_fnBuildAjax","rbracket","ajaxData","instance","jqXHR","newData","baseAjax","sError","sServerMethod","xhr","thrown","ret","readyState","oAjaxData","fnServerData","sAjaxSource","bAjaxDataGet","_fnAjaxParameters","_fnAjaxUpdateDraw","columnCount","preSearch","preColSearch","dataProp","columnSearch","displayStart","displayLength","_iDisplayLength","param","sSearch","regex","sName","searchable","bSearchable","orderable","legacy","compat","modern","_fnAjaxDataSrc","recordsTotal","recordsFiltered","_bInitComplete","_fnInitComplete","dataSrc","sAjaxDataProp","tableId","language","previousSearch","input","sFilterInput","f","sFilter","searchFn","searchDelay","jqFilter","sSearchPlaceholder","on","_fnThrottle","e","keyCode","ev","activeElement","oInput","iForce","oPrevSearch","aoPrevSearch","fnSaveFilter","oFilter","fnRegex","bEscapeRegex","_fnFilter","_fnFilterColumn","_fnFilterCustom","filters","displayRows","merge","searchStr","smart","caseInsensitive","display","rpSearch","_fnFilterCreateSearch","test","prevSearch","displayMaster","invalidated","filtered","_fnFilterData","_sFilterRow","word","m","__filter_div","__filter_div_textContent","textContent","filterData","fomatters","wasInvalidated","toString","innerText","_fnSearchToCamel","obj","_fnSearchToHung","tid","sInfo","aoDrawCallback","_fnUpdateInfo","max","total","sInfoEmpty","sInfoFiltered","sInfoPostFix","_fnInfoMacros","fnInfoCallback","formatter","fnFormatNumber","all","ceil","iAjaxStart","deferLoading","_fnStringToCss","aData","_fnLengthChange","_fnLengthOverflow","menu","d2","lengths","select","sLengthSelect","Option","div","sLength","sLengthMenu","outerHTML","sPaginationType","plugin","pager","sPaging","p","visRecords","pages","buttons","_fnPageChange","action","records","floor","changed","r","sProcessing","scrollY","caption","captionSide","headerClone","cloneNode","footerClone","footer","_div","size","scroller","sScrollWrapper","sScrollHead","border","sScrollHeadInner","sXInner","removeAttr","sScrollBody","sScrollFoot","sScrollFootInner","scrollHead","scrollBody","scrollFoot","bCollapse","nScrollHead","nScrollBody","nScrollFoot","scrollXInner","divHeader","divHeaderStyle","divHeaderInner","divHeaderInnerStyle","divHeaderTable","divBodyEl","divBody","divBodyStyle","divFooter","divFooterInner","divFooterTable","header","tableEl","tableStyle","ie67","dtHeaderCells","headerTrgEls","footerTrgEls","headerSrcEls","footerSrcEls","headerCopy","footerCopy","headerWidths","footerWidths","headerContent","footerContent","correction","sanityWidth","zeroOut","nSizer","paddingTop","paddingBottom","borderTopWidth","borderBottomWidth","scrollBarVis","scrollHeight","clientHeight","clone","prependTo","_fnApplyToChildren","outerWidth","offsetHeight","nToSize","iOuterWidth","bScrolling","padding","trigger","scrollTop","an1","an2","nNode1","nNode2","nodeType","__re_html_remove","visibleColumns","headerCells","tableWidthAttr","tableContainer","userInputs","columnIdx","styleWidth","_fnConvertToWidth","tmpTable","margin","_fnGetWidestNode","sContentPadding","holder","right","bounding","_reszEvt","bindResize","sInstance","_fnGetMaxLenString","maxIdx","aiOrig","srcCol","fixed","aaSortingFixed","fixedObj","nestedSort","pre","post","_idx","sDataType","oExtSort","oSort","formatters","sortCol","_fnSortData","x","y","dataA","dataB","label","nextSort","oAria","removeAttribute","sSortAscending","sSortDescending","_fnSortListener","nextSortIdx","next","bSortMulti","sortIdx","attachTo","_fnBindAction","shiftKey","oldSort","aLastSort","sortClass","sSortColumn","bSortClasses","customSort","sSortDataType","customData","state","time","oSavedState","fnStateSaveCallback","loaded","abStateLoad","duration","iStateDuration","oLoadedState","fnStateLoadCallback","level","msg","tn","sErrMode","errMode","alert","Error","console","log","mappedName","extender","breakRefs","which","preventDefault","sStore","callbackArr","eventName","reverse","Event","result","renderer","host","__apiStruct","__arrayProto","Array","prototype","_toSettings","mixed","jq","tables","context","ctxSettings","selector","opts","Api","any","count","ctx","iterator","alwaysNew","items","item","apiInst","_selector_row_indexes","apiSelector","lastIndexOf","pluck","pop","reduce","reduceRight","shift","to$","toJQuery","unshift","scope","__dt_wrapper","struct","methodScoping","struc","methodExt","propExt","register","heir","method","registerPlural","pluralName","singularName","__table_selector","paging","info","__reload","one","abort","resetPaging","_selector_run","selectFn","res","selectorType","_selector_opts","_selector_first","inst","displayFiltered","displayFilteredMap","__row_selector","run","sel","selInt","cellIdx","closest","rowObj","hash","thatIdx","loopRow","loopCells","newRows","modRows","__details_add","klass","addRow","created","colSpan","_details","_detailsShow","insertAfter","__details_remove","__details_display","__details_events","namespace","drawEvent","colvisEvent","destroyEvent","off","_emp","_child_obj","_child_mth","__re_column_selector","__columnData","r1","r2","__column_selector","names","visColumns","jqResult","__setColumnVis","calc","__cell_selector","allCells","fnSelector","rowSelector","columnSelector","internalOpts","cellsNoOpts","selected","set","caseInsen","versionCheck","version","aThis","aThat","iThis","iThat","isDataTable","fnIsDataTable","get","is","head","foot","fnTables","camelToHungarian","jqRows","orig","jqTable","jqTbody","jqWrapper","removedMethod","sDestroyWidth","arg1","arg2","arg3","arg4","token","plural","resolved","toFormat","JSON","parse","sessionStorage","localStorage","getItem","location","pathname","setItem","stringify","paginate","min","builder","pageButton","oJUIClasses","sVersion","afnFiltering","aTypes","ofnSearch","afnSortData","oStdClasses","oPagination","extPagination","_numbers","numbers","numbers_length","half","DT_el","simple","full","simple_numbers","full_numbers","first_last_numbers","oPaginate","aria","btnDisplay","btnClass","counter","attach","container","button","tabIndex","disabledClass","sPageButtonDisabled","clickHandler","sFirst","sPrevious","sNext","sLast","sPageButtonActive","sPageButton","activeEl","empty","parsed","string","__numericReplace","decimalPlace","re1","re2","Infinity","ts","sSortAsc","sSortDesc","jqueryui","sSortJUIWrapper","sSortIcon","sSortJUIAsc","sSortJUIDesc","__htmlEscapeEntities","render","number","thousands","precision","prefix","postfix","negative","flo","toFixed","abs","intPart","floatPart","text","_fnCalculateEnd","dataTableSettings","dataTableExt"],"mappings":"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","sourcesContent":["/*! DataTables 1.10.21\n * Â©2008-2020 SpryMedia Ltd - datatables.net/license\n */\n\n/**\n * @summary     DataTables\n * @description Paginate, search and order HTML tables\n * @version     1.10.21\n * @file        jquery.dataTables.js\n * @author      SpryMedia Ltd\n * @contact     www.datatables.net\n * @copyright   Copyright 2008-2020 SpryMedia Ltd.\n *\n * This source file is free software, available under the following license:\n *   MIT license - http://datatables.net/license\n *\n * This source file is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.\n *\n * For details please refer to: http://www.datatables.net\n */\n\n/*jslint evil: true, undef: true, browser: true */\n/*globals $,require,jQuery,define,_selector_run,_selector_opts,_selector_first,_selector_row_indexes,_ext,_Api,_api_register,_api_registerPlural,_re_new_lines,_re_html,_re_formatted_numeric,_re_escape_regex,_empty,_intVal,_numToDecimal,_isNumber,_isHtml,_htmlNumeric,_pluck,_pluck_order,_range,_stripHtml,_unique,_fnBuildAjax,_fnAjaxUpdate,_fnAjaxParameters,_fnAjaxUpdateDraw,_fnAjaxDataSrc,_fnAddColumn,_fnColumnOptions,_fnAdjustColumnSizing,_fnVisibleToColumnIndex,_fnColumnIndexToVisible,_fnVisbleColumns,_fnGetColumns,_fnColumnTypes,_fnApplyColumnDefs,_fnHungarianMap,_fnCamelToHungarian,_fnLanguageCompat,_fnBrowserDetect,_fnAddData,_fnAddTr,_fnNodeToDataIndex,_fnNodeToColumnIndex,_fnGetCellData,_fnSetCellData,_fnSplitObjNotation,_fnGetObjectDataFn,_fnSetObjectDataFn,_fnGetDataMaster,_fnClearTable,_fnDeleteIndex,_fnInvalidate,_fnGetRowElements,_fnCreateTr,_fnBuildHead,_fnDrawHead,_fnDraw,_fnReDraw,_fnAddOptionsHtml,_fnDetectHeader,_fnGetUniqueThs,_fnFeatureHtmlFilter,_fnFilterComplete,_fnFilterCustom,_fnFilterColumn,_fnFilter,_fnFilterCreateSearch,_fnEscapeRegex,_fnFilterData,_fnFeatureHtmlInfo,_fnUpdateInfo,_fnInfoMacros,_fnInitialise,_fnInitComplete,_fnLengthChange,_fnFeatureHtmlLength,_fnFeatureHtmlPaginate,_fnPageChange,_fnFeatureHtmlProcessing,_fnProcessingDisplay,_fnFeatureHtmlTable,_fnScrollDraw,_fnApplyToChildren,_fnCalculateColumnWidths,_fnThrottle,_fnConvertToWidth,_fnGetWidestNode,_fnGetMaxLenString,_fnStringToCss,_fnSortFlatten,_fnSort,_fnSortAria,_fnSortListener,_fnSortAttachListener,_fnSortingClasses,_fnSortData,_fnSaveState,_fnLoadState,_fnSettingsFromNode,_fnLog,_fnMap,_fnBindAction,_fnCallbackReg,_fnCallbackFire,_fnLengthOverflow,_fnRenderer,_fnDataSource,_fnRowAttributes*/\n\n(function( factory ) {\n\t\"use strict\";\n\n\tif ( typeof define === 'function' && define.amd ) {\n\t\t// AMD\n\t\tdefine( ['jquery'], function ( $ ) {\n\t\t\treturn factory( $, window, document );\n\t\t} );\n\t}\n\telse if ( typeof exports === 'object' ) {\n\t\t// CommonJS\n\t\tmodule.exports = function (root, $) {\n\t\t\tif ( ! root ) {\n\t\t\t\t// CommonJS environments without a window global must pass a\n\t\t\t\t// root. This will give an error otherwise\n\t\t\t\troot = window;\n\t\t\t}\n\n\t\t\tif ( ! $ ) {\n\t\t\t\t$ = typeof window !== 'undefined' ? // jQuery's factory checks for a global window\n\t\t\t\t\trequire('jquery') :\n\t\t\t\t\trequire('jquery')( root );\n\t\t\t}\n\n\t\t\treturn factory( $, root, root.document );\n\t\t};\n\t}\n\telse {\n\t\t// Browser\n\t\tfactory( jQuery, window, document );\n\t}\n}\n(function( $, window, document, undefined ) {\n\t\"use strict\";\n\n\t/**\n\t * DataTables is a plug-in for the jQuery Javascript library. It is a highly\n\t * flexible tool, based upon the foundations of progressive enhancement,\n\t * which will add advanced interaction controls to any HTML table. For a\n\t * full list of features please refer to\n\t * [DataTables.net](href=\"http://datatables.net).\n\t *\n\t * Note that the `DataTable` object is not a global variable but is aliased\n\t * to `jQuery.fn.DataTable` and `jQuery.fn.dataTable` through which it may\n\t * be  accessed.\n\t *\n\t *  @class\n\t *  @param {object} [init={}] Configuration object for DataTables. Options\n\t *    are defined by {@link DataTable.defaults}\n\t *  @requires jQuery 1.7+\n\t *\n\t *  @example\n\t *    // Basic initialisation\n\t *    $(document).ready( function {\n\t *      $('#example').dataTable();\n\t *    } );\n\t *\n\t *  @example\n\t *    // Initialisation with configuration options - in this case, disable\n\t *    // pagination and sorting.\n\t *    $(document).ready( function {\n\t *      $('#example').dataTable( {\n\t *        \"paginate\": false,\n\t *        \"sort\": false\n\t *      } );\n\t *    } );\n\t */\n\tvar DataTable = function ( options )\n\t{\n\t\t/**\n\t\t * Perform a jQuery selector action on the table's TR elements (from the tbody) and\n\t\t * return the resulting jQuery object.\n\t\t *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on\n\t\t *  @param {object} [oOpts] Optional parameters for modifying the rows to be included\n\t\t *  @param {string} [oOpts.filter=none] Select TR elements that meet the current filter\n\t\t *    criterion (\"applied\") or all TR elements (i.e. no filter).\n\t\t *  @param {string} [oOpts.order=current] Order of the TR elements in the processed array.\n\t\t *    Can be either 'current', whereby the current sorting of the table is used, or\n\t\t *    'original' whereby the original order the data was read into the table is used.\n\t\t *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page\n\t\t *    (\"current\") or not (\"all\"). If 'current' is given, then order is assumed to be\n\t\t *    'current' and filter is 'applied', regardless of what they might be given as.\n\t\t *  @returns {object} jQuery object, filtered by the given selector.\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *\n\t\t *      // Highlight every second row\n\t\t *      oTable.$('tr:odd').css('backgroundColor', 'blue');\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *\n\t\t *      // Filter to rows with 'Webkit' in them, add a background colour and then\n\t\t *      // remove the filter, thus highlighting the 'Webkit' rows only.\n\t\t *      oTable.fnFilter('Webkit');\n\t\t *      oTable.$('tr', {\"search\": \"applied\"}).css('backgroundColor', 'blue');\n\t\t *      oTable.fnFilter('');\n\t\t *    } );\n\t\t */\n\t\tthis.$ = function ( sSelector, oOpts )\n\t\t{\n\t\t\treturn this.api(true).$( sSelector, oOpts );\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * Almost identical to $ in operation, but in this case returns the data for the matched\n\t\t * rows - as such, the jQuery selector used should match TR row nodes or TD/TH cell nodes\n\t\t * rather than any descendants, so the data can be obtained for the row/cell. If matching\n\t\t * rows are found, the data returned is the original data array/object that was used to\n\t\t * create the row (or a generated array if from a DOM source).\n\t\t *\n\t\t * This method is often useful in-combination with $ where both functions are given the\n\t\t * same parameters and the array indexes will match identically.\n\t\t *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on\n\t\t *  @param {object} [oOpts] Optional parameters for modifying the rows to be included\n\t\t *  @param {string} [oOpts.filter=none] Select elements that meet the current filter\n\t\t *    criterion (\"applied\") or all elements (i.e. no filter).\n\t\t *  @param {string} [oOpts.order=current] Order of the data in the processed array.\n\t\t *    Can be either 'current', whereby the current sorting of the table is used, or\n\t\t *    'original' whereby the original order the data was read into the table is used.\n\t\t *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page\n\t\t *    (\"current\") or not (\"all\"). If 'current' is given, then order is assumed to be\n\t\t *    'current' and filter is 'applied', regardless of what they might be given as.\n\t\t *  @returns {array} Data for the matched elements. If any elements, as a result of the\n\t\t *    selector, were not TR, TD or TH elements in the DataTable, they will have a null\n\t\t *    entry in the array.\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *\n\t\t *      // Get the data from the first row in the table\n\t\t *      var data = oTable._('tr:first');\n\t\t *\n\t\t *      // Do something useful with the data\n\t\t *      alert( \"First cell is: \"+data[0] );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *\n\t\t *      // Filter to 'Webkit' and get all data for\n\t\t *      oTable.fnFilter('Webkit');\n\t\t *      var data = oTable._('tr', {\"search\": \"applied\"});\n\t\t *\n\t\t *      // Do something with the data\n\t\t *      alert( data.length+\" rows matched the search\" );\n\t\t *    } );\n\t\t */\n\t\tthis._ = function ( sSelector, oOpts )\n\t\t{\n\t\t\treturn this.api(true).rows( sSelector, oOpts ).data();\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * Create a DataTables Api instance, with the currently selected tables for\n\t\t * the Api's context.\n\t\t * @param {boolean} [traditional=false] Set the API instance's context to be\n\t\t *   only the table referred to by the `DataTable.ext.iApiIndex` option, as was\n\t\t *   used in the API presented by DataTables 1.9- (i.e. the traditional mode),\n\t\t *   or if all tables captured in the jQuery object should be used.\n\t\t * @return {DataTables.Api}\n\t\t */\n\t\tthis.api = function ( traditional )\n\t\t{\n\t\t\treturn traditional ?\n\t\t\t\tnew _Api(\n\t\t\t\t\t_fnSettingsFromNode( this[ _ext.iApiIndex ] )\n\t\t\t\t) :\n\t\t\t\tnew _Api( this );\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * Add a single new row or multiple rows of data to the table. Please note\n\t\t * that this is suitable for client-side processing only - if you are using\n\t\t * server-side processing (i.e. \"bServerSide\": true), then to add data, you\n\t\t * must add it to the data source, i.e. the server-side, through an Ajax call.\n\t\t *  @param {array|object} data The data to be added to the table. This can be:\n\t\t *    <ul>\n\t\t *      <li>1D array of data - add a single row with the data provided</li>\n\t\t *      <li>2D array of arrays - add multiple rows in a single call</li>\n\t\t *      <li>object - data object when using <i>mData</i></li>\n\t\t *      <li>array of objects - multiple data objects when using <i>mData</i></li>\n\t\t *    </ul>\n\t\t *  @param {bool} [redraw=true] redraw the table or not\n\t\t *  @returns {array} An array of integers, representing the list of indexes in\n\t\t *    <i>aoData</i> ({@link DataTable.models.oSettings}) that have been added to\n\t\t *    the table.\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    // Global var for counter\n\t\t *    var giCount = 2;\n\t\t *\n\t\t *    $(document).ready(function() {\n\t\t *      $('#example').dataTable();\n\t\t *    } );\n\t\t *\n\t\t *    function fnClickAddRow() {\n\t\t *      $('#example').dataTable().fnAddData( [\n\t\t *        giCount+\".1\",\n\t\t *        giCount+\".2\",\n\t\t *        giCount+\".3\",\n\t\t *        giCount+\".4\" ]\n\t\t *      );\n\t\t *\n\t\t *      giCount++;\n\t\t *    }\n\t\t */\n\t\tthis.fnAddData = function( data, redraw )\n\t\t{\n\t\t\tvar api = this.api( true );\n\t\t\n\t\t\t/* Check if we want to add multiple rows or not */\n\t\t\tvar rows = $.isArray(data) && ( $.isArray(data[0]) || $.isPlainObject(data[0]) ) ?\n\t\t\t\tapi.rows.add( data ) :\n\t\t\t\tapi.row.add( data );\n\t\t\n\t\t\tif ( redraw === undefined || redraw ) {\n\t\t\t\tapi.draw();\n\t\t\t}\n\t\t\n\t\t\treturn rows.flatten().toArray();\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * This function will make DataTables recalculate the column sizes, based on the data\n\t\t * contained in the table and the sizes applied to the columns (in the DOM, CSS or\n\t\t * through the sWidth parameter). This can be useful when the width of the table's\n\t\t * parent element changes (for example a window resize).\n\t\t *  @param {boolean} [bRedraw=true] Redraw the table or not, you will typically want to\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable( {\n\t\t *        \"sScrollY\": \"200px\",\n\t\t *        \"bPaginate\": false\n\t\t *      } );\n\t\t *\n\t\t *      $(window).on('resize', function () {\n\t\t *        oTable.fnAdjustColumnSizing();\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\tthis.fnAdjustColumnSizing = function ( bRedraw )\n\t\t{\n\t\t\tvar api = this.api( true ).columns.adjust();\n\t\t\tvar settings = api.settings()[0];\n\t\t\tvar scroll = settings.oScroll;\n\t\t\n\t\t\tif ( bRedraw === undefined || bRedraw ) {\n\t\t\t\tapi.draw( false );\n\t\t\t}\n\t\t\telse if ( scroll.sX !== \"\" || scroll.sY !== \"\" ) {\n\t\t\t\t/* If not redrawing, but scrolling, we want to apply the new column sizes anyway */\n\t\t\t\t_fnScrollDraw( settings );\n\t\t\t}\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * Quickly and simply clear a table\n\t\t *  @param {bool} [bRedraw=true] redraw the table or not\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *\n\t\t *      // Immediately 'nuke' the current rows (perhaps waiting for an Ajax callback...)\n\t\t *      oTable.fnClearTable();\n\t\t *    } );\n\t\t */\n\t\tthis.fnClearTable = function( bRedraw )\n\t\t{\n\t\t\tvar api = this.api( true ).clear();\n\t\t\n\t\t\tif ( bRedraw === undefined || bRedraw ) {\n\t\t\t\tapi.draw();\n\t\t\t}\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * The exact opposite of 'opening' a row, this function will close any rows which\n\t\t * are currently 'open'.\n\t\t *  @param {node} nTr the table row to 'close'\n\t\t *  @returns {int} 0 on success, or 1 if failed (can't find the row)\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable;\n\t\t *\n\t\t *      // 'open' an information row when a row is clicked on\n\t\t *      $('#example tbody tr').click( function () {\n\t\t *        if ( oTable.fnIsOpen(this) ) {\n\t\t *          oTable.fnClose( this );\n\t\t *        } else {\n\t\t *          oTable.fnOpen( this, \"Temporary row opened\", \"info_row\" );\n\t\t *        }\n\t\t *      } );\n\t\t *\n\t\t *      oTable = $('#example').dataTable();\n\t\t *    } );\n\t\t */\n\t\tthis.fnClose = function( nTr )\n\t\t{\n\t\t\tthis.api( true ).row( nTr ).child.hide();\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * Remove a row for the table\n\t\t *  @param {mixed} target The index of the row from aoData to be deleted, or\n\t\t *    the TR element you want to delete\n\t\t *  @param {function|null} [callBack] Callback function\n\t\t *  @param {bool} [redraw=true] Redraw the table or not\n\t\t *  @returns {array} The row that was deleted\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *\n\t\t *      // Immediately remove the first row\n\t\t *      oTable.fnDeleteRow( 0 );\n\t\t *    } );\n\t\t */\n\t\tthis.fnDeleteRow = function( target, callback, redraw )\n\t\t{\n\t\t\tvar api = this.api( true );\n\t\t\tvar rows = api.rows( target );\n\t\t\tvar settings = rows.settings()[0];\n\t\t\tvar data = settings.aoData[ rows[0][0] ];\n\t\t\n\t\t\trows.remove();\n\t\t\n\t\t\tif ( callback ) {\n\t\t\t\tcallback.call( this, settings, data );\n\t\t\t}\n\t\t\n\t\t\tif ( redraw === undefined || redraw ) {\n\t\t\t\tapi.draw();\n\t\t\t}\n\t\t\n\t\t\treturn data;\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * Restore the table to it's original state in the DOM by removing all of DataTables\n\t\t * enhancements, alterations to the DOM structure of the table and event listeners.\n\t\t *  @param {boolean} [remove=false] Completely remove the table from the DOM\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      // This example is fairly pointless in reality, but shows how fnDestroy can be used\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *      oTable.fnDestroy();\n\t\t *    } );\n\t\t */\n\t\tthis.fnDestroy = function ( remove )\n\t\t{\n\t\t\tthis.api( true ).destroy( remove );\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * Redraw the table\n\t\t *  @param {bool} [complete=true] Re-filter and resort (if enabled) the table before the draw.\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *\n\t\t *      // Re-draw the table - you wouldn't want to do it here, but it's an example :-)\n\t\t *      oTable.fnDraw();\n\t\t *    } );\n\t\t */\n\t\tthis.fnDraw = function( complete )\n\t\t{\n\t\t\t// Note that this isn't an exact match to the old call to _fnDraw - it takes\n\t\t\t// into account the new data, but can hold position.\n\t\t\tthis.api( true ).draw( complete );\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * Filter the input based on data\n\t\t *  @param {string} sInput String to filter the table on\n\t\t *  @param {int|null} [iColumn] Column to limit filtering to\n\t\t *  @param {bool} [bRegex=false] Treat as regular expression or not\n\t\t *  @param {bool} [bSmart=true] Perform smart filtering or not\n\t\t *  @param {bool} [bShowGlobal=true] Show the input global filter in it's input box(es)\n\t\t *  @param {bool} [bCaseInsensitive=true] Do case-insensitive matching (true) or not (false)\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *\n\t\t *      // Sometime later - filter...\n\t\t *      oTable.fnFilter( 'test string' );\n\t\t *    } );\n\t\t */\n\t\tthis.fnFilter = function( sInput, iColumn, bRegex, bSmart, bShowGlobal, bCaseInsensitive )\n\t\t{\n\t\t\tvar api = this.api( true );\n\t\t\n\t\t\tif ( iColumn === null || iColumn === undefined ) {\n\t\t\t\tapi.search( sInput, bRegex, bSmart, bCaseInsensitive );\n\t\t\t}\n\t\t\telse {\n\t\t\t\tapi.column( iColumn ).search( sInput, bRegex, bSmart, bCaseInsensitive );\n\t\t\t}\n\t\t\n\t\t\tapi.draw();\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * Get the data for the whole table, an individual row or an individual cell based on the\n\t\t * provided parameters.\n\t\t *  @param {int|node} [src] A TR row node, TD/TH cell node or an integer. If given as\n\t\t *    a TR node then the data source for the whole row will be returned. If given as a\n\t\t *    TD/TH cell node then iCol will be automatically calculated and the data for the\n\t\t *    cell returned. If given as an integer, then this is treated as the aoData internal\n\t\t *    data index for the row (see fnGetPosition) and the data for that row used.\n\t\t *  @param {int} [col] Optional column index that you want the data of.\n\t\t *  @returns {array|object|string} If mRow is undefined, then the data for all rows is\n\t\t *    returned. If mRow is defined, just data for that row, and is iCol is\n\t\t *    defined, only data for the designated cell is returned.\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    // Row data\n\t\t *    $(document).ready(function() {\n\t\t *      oTable = $('#example').dataTable();\n\t\t *\n\t\t *      oTable.$('tr').click( function () {\n\t\t *        var data = oTable.fnGetData( this );\n\t\t *        // ... do something with the array / object of data for the row\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Individual cell data\n\t\t *    $(document).ready(function() {\n\t\t *      oTable = $('#example').dataTable();\n\t\t *\n\t\t *      oTable.$('td').click( function () {\n\t\t *        var sData = oTable.fnGetData( this );\n\t\t *        alert( 'The cell clicked on had the value of '+sData );\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\tthis.fnGetData = function( src, col )\n\t\t{\n\t\t\tvar api = this.api( true );\n\t\t\n\t\t\tif ( src !== undefined ) {\n\t\t\t\tvar type = src.nodeName ? src.nodeName.toLowerCase() : '';\n\t\t\n\t\t\t\treturn col !== undefined || type == 'td' || type == 'th' ?\n\t\t\t\t\tapi.cell( src, col ).data() :\n\t\t\t\t\tapi.row( src ).data() || null;\n\t\t\t}\n\t\t\n\t\t\treturn api.data().toArray();\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * Get an array of the TR nodes that are used in the table's body. Note that you will\n\t\t * typically want to use the '$' API method in preference to this as it is more\n\t\t * flexible.\n\t\t *  @param {int} [iRow] Optional row index for the TR element you want\n\t\t *  @returns {array|node} If iRow is undefined, returns an array of all TR elements\n\t\t *    in the table's body, or iRow is defined, just the TR element requested.\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *\n\t\t *      // Get the nodes from the table\n\t\t *      var nNodes = oTable.fnGetNodes( );\n\t\t *    } );\n\t\t */\n\t\tthis.fnGetNodes = function( iRow )\n\t\t{\n\t\t\tvar api = this.api( true );\n\t\t\n\t\t\treturn iRow !== undefined ?\n\t\t\t\tapi.row( iRow ).node() :\n\t\t\t\tapi.rows().nodes().flatten().toArray();\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * Get the array indexes of a particular cell from it's DOM element\n\t\t * and column index including hidden columns\n\t\t *  @param {node} node this can either be a TR, TD or TH in the table's body\n\t\t *  @returns {int} If nNode is given as a TR, then a single index is returned, or\n\t\t *    if given as a cell, an array of [row index, column index (visible),\n\t\t *    column index (all)] is given.\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      $('#example tbody td').click( function () {\n\t\t *        // Get the position of the current data from the node\n\t\t *        var aPos = oTable.fnGetPosition( this );\n\t\t *\n\t\t *        // Get the data array for this row\n\t\t *        var aData = oTable.fnGetData( aPos[0] );\n\t\t *\n\t\t *        // Update the data array and return the value\n\t\t *        aData[ aPos[1] ] = 'clicked';\n\t\t *        this.innerHTML = 'clicked';\n\t\t *      } );\n\t\t *\n\t\t *      // Init DataTables\n\t\t *      oTable = $('#example').dataTable();\n\t\t *    } );\n\t\t */\n\t\tthis.fnGetPosition = function( node )\n\t\t{\n\t\t\tvar api = this.api( true );\n\t\t\tvar nodeName = node.nodeName.toUpperCase();\n\t\t\n\t\t\tif ( nodeName == 'TR' ) {\n\t\t\t\treturn api.row( node ).index();\n\t\t\t}\n\t\t\telse if ( nodeName == 'TD' || nodeName == 'TH' ) {\n\t\t\t\tvar cell = api.cell( node ).index();\n\t\t\n\t\t\t\treturn [\n\t\t\t\t\tcell.row,\n\t\t\t\t\tcell.columnVisible,\n\t\t\t\t\tcell.column\n\t\t\t\t];\n\t\t\t}\n\t\t\treturn null;\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * Check to see if a row is 'open' or not.\n\t\t *  @param {node} nTr the table row to check\n\t\t *  @returns {boolean} true if the row is currently open, false otherwise\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable;\n\t\t *\n\t\t *      // 'open' an information row when a row is clicked on\n\t\t *      $('#example tbody tr').click( function () {\n\t\t *        if ( oTable.fnIsOpen(this) ) {\n\t\t *          oTable.fnClose( this );\n\t\t *        } else {\n\t\t *          oTable.fnOpen( this, \"Temporary row opened\", \"info_row\" );\n\t\t *        }\n\t\t *      } );\n\t\t *\n\t\t *      oTable = $('#example').dataTable();\n\t\t *    } );\n\t\t */\n\t\tthis.fnIsOpen = function( nTr )\n\t\t{\n\t\t\treturn this.api( true ).row( nTr ).child.isShown();\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * This function will place a new row directly after a row which is currently\n\t\t * on display on the page, with the HTML contents that is passed into the\n\t\t * function. This can be used, for example, to ask for confirmation that a\n\t\t * particular record should be deleted.\n\t\t *  @param {node} nTr The table row to 'open'\n\t\t *  @param {string|node|jQuery} mHtml The HTML to put into the row\n\t\t *  @param {string} sClass Class to give the new TD cell\n\t\t *  @returns {node} The row opened. Note that if the table row passed in as the\n\t\t *    first parameter, is not found in the table, this method will silently\n\t\t *    return.\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable;\n\t\t *\n\t\t *      // 'open' an information row when a row is clicked on\n\t\t *      $('#example tbody tr').click( function () {\n\t\t *        if ( oTable.fnIsOpen(this) ) {\n\t\t *          oTable.fnClose( this );\n\t\t *        } else {\n\t\t *          oTable.fnOpen( this, \"Temporary row opened\", \"info_row\" );\n\t\t *        }\n\t\t *      } );\n\t\t *\n\t\t *      oTable = $('#example').dataTable();\n\t\t *    } );\n\t\t */\n\t\tthis.fnOpen = function( nTr, mHtml, sClass )\n\t\t{\n\t\t\treturn this.api( true )\n\t\t\t\t.row( nTr )\n\t\t\t\t.child( mHtml, sClass )\n\t\t\t\t.show()\n\t\t\t\t.child()[0];\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * Change the pagination - provides the internal logic for pagination in a simple API\n\t\t * function. With this function you can have a DataTables table go to the next,\n\t\t * previous, first or last pages.\n\t\t *  @param {string|int} mAction Paging action to take: \"first\", \"previous\", \"next\" or \"last\"\n\t\t *    or page number to jump to (integer), note that page 0 is the first page.\n\t\t *  @param {bool} [bRedraw=true] Redraw the table or not\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *      oTable.fnPageChange( 'next' );\n\t\t *    } );\n\t\t */\n\t\tthis.fnPageChange = function ( mAction, bRedraw )\n\t\t{\n\t\t\tvar api = this.api( true ).page( mAction );\n\t\t\n\t\t\tif ( bRedraw === undefined || bRedraw ) {\n\t\t\t\tapi.draw(false);\n\t\t\t}\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * Show a particular column\n\t\t *  @param {int} iCol The column whose display should be changed\n\t\t *  @param {bool} bShow Show (true) or hide (false) the column\n\t\t *  @param {bool} [bRedraw=true] Redraw the table or not\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *\n\t\t *      // Hide the second column after initialisation\n\t\t *      oTable.fnSetColumnVis( 1, false );\n\t\t *    } );\n\t\t */\n\t\tthis.fnSetColumnVis = function ( iCol, bShow, bRedraw )\n\t\t{\n\t\t\tvar api = this.api( true ).column( iCol ).visible( bShow );\n\t\t\n\t\t\tif ( bRedraw === undefined || bRedraw ) {\n\t\t\t\tapi.columns.adjust().draw();\n\t\t\t}\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * Get the settings for a particular table for external manipulation\n\t\t *  @returns {object} DataTables settings object. See\n\t\t *    {@link DataTable.models.oSettings}\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *      var oSettings = oTable.fnSettings();\n\t\t *\n\t\t *      // Show an example parameter from the settings\n\t\t *      alert( oSettings._iDisplayStart );\n\t\t *    } );\n\t\t */\n\t\tthis.fnSettings = function()\n\t\t{\n\t\t\treturn _fnSettingsFromNode( this[_ext.iApiIndex] );\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * Sort the table by a particular column\n\t\t *  @param {int} iCol the data index to sort on. Note that this will not match the\n\t\t *    'display index' if you have hidden data entries\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *\n\t\t *      // Sort immediately with columns 0 and 1\n\t\t *      oTable.fnSort( [ [0,'asc'], [1,'asc'] ] );\n\t\t *    } );\n\t\t */\n\t\tthis.fnSort = function( aaSort )\n\t\t{\n\t\t\tthis.api( true ).order( aaSort ).draw();\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * Attach a sort listener to an element for a given column\n\t\t *  @param {node} nNode the element to attach the sort listener to\n\t\t *  @param {int} iColumn the column that a click on this node will sort on\n\t\t *  @param {function} [fnCallback] callback function when sort is run\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *\n\t\t *      // Sort on column 1, when 'sorter' is clicked on\n\t\t *      oTable.fnSortListener( document.getElementById('sorter'), 1 );\n\t\t *    } );\n\t\t */\n\t\tthis.fnSortListener = function( nNode, iColumn, fnCallback )\n\t\t{\n\t\t\tthis.api( true ).order.listener( nNode, iColumn, fnCallback );\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * Update a table cell or row - this method will accept either a single value to\n\t\t * update the cell with, an array of values with one element for each column or\n\t\t * an object in the same format as the original data source. The function is\n\t\t * self-referencing in order to make the multi column updates easier.\n\t\t *  @param {object|array|string} mData Data to update the cell/row with\n\t\t *  @param {node|int} mRow TR element you want to update or the aoData index\n\t\t *  @param {int} [iColumn] The column to update, give as null or undefined to\n\t\t *    update a whole row.\n\t\t *  @param {bool} [bRedraw=true] Redraw the table or not\n\t\t *  @param {bool} [bAction=true] Perform pre-draw actions or not\n\t\t *  @returns {int} 0 on success, 1 on error\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *      oTable.fnUpdate( 'Example update', 0, 0 ); // Single cell\n\t\t *      oTable.fnUpdate( ['a', 'b', 'c', 'd', 'e'], $('tbody tr')[0] ); // Row\n\t\t *    } );\n\t\t */\n\t\tthis.fnUpdate = function( mData, mRow, iColumn, bRedraw, bAction )\n\t\t{\n\t\t\tvar api = this.api( true );\n\t\t\n\t\t\tif ( iColumn === undefined || iColumn === null ) {\n\t\t\t\tapi.row( mRow ).data( mData );\n\t\t\t}\n\t\t\telse {\n\t\t\t\tapi.cell( mRow, iColumn ).data( mData );\n\t\t\t}\n\t\t\n\t\t\tif ( bAction === undefined || bAction ) {\n\t\t\t\tapi.columns.adjust();\n\t\t\t}\n\t\t\n\t\t\tif ( bRedraw === undefined || bRedraw ) {\n\t\t\t\tapi.draw();\n\t\t\t}\n\t\t\treturn 0;\n\t\t};\n\t\t\n\t\t\n\t\t/**\n\t\t * Provide a common method for plug-ins to check the version of DataTables being used, in order\n\t\t * to ensure compatibility.\n\t\t *  @param {string} sVersion Version string to check for, in the format \"X.Y.Z\". Note that the\n\t\t *    formats \"X\" and \"X.Y\" are also acceptable.\n\t\t *  @returns {boolean} true if this version of DataTables is greater or equal to the required\n\t\t *    version, or false if this version of DataTales is not suitable\n\t\t *  @method\n\t\t *  @dtopt API\n\t\t *  @deprecated Since v1.10\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready(function() {\n\t\t *      var oTable = $('#example').dataTable();\n\t\t *      alert( oTable.fnVersionCheck( '1.9.0' ) );\n\t\t *    } );\n\t\t */\n\t\tthis.fnVersionCheck = _ext.fnVersionCheck;\n\t\t\n\n\t\tvar _that = this;\n\t\tvar emptyInit = options === undefined;\n\t\tvar len = this.length;\n\n\t\tif ( emptyInit ) {\n\t\t\toptions = {};\n\t\t}\n\n\t\tthis.oApi = this.internal = _ext.internal;\n\n\t\t// Extend with old style plug-in API methods\n\t\tfor ( var fn in DataTable.ext.internal ) {\n\t\t\tif ( fn ) {\n\t\t\t\tthis[fn] = _fnExternApiFunc(fn);\n\t\t\t}\n\t\t}\n\n\t\tthis.each(function() {\n\t\t\t// For each initialisation we want to give it a clean initialisation\n\t\t\t// object that can be bashed around\n\t\t\tvar o = {};\n\t\t\tvar oInit = len > 1 ? // optimisation for single table case\n\t\t\t\t_fnExtend( o, options, true ) :\n\t\t\t\toptions;\n\n\t\t\t/*global oInit,_that,emptyInit*/\n\t\t\tvar i=0, iLen, j, jLen, k, kLen;\n\t\t\tvar sId = this.getAttribute( 'id' );\n\t\t\tvar bInitHandedOff = false;\n\t\t\tvar defaults = DataTable.defaults;\n\t\t\tvar $this = $(this);\n\t\t\t\n\t\t\t\n\t\t\t/* Sanity check */\n\t\t\tif ( this.nodeName.toLowerCase() != 'table' )\n\t\t\t{\n\t\t\t\t_fnLog( null, 0, 'Non-table node initialisation ('+this.nodeName+')', 2 );\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\t/* Backwards compatibility for the defaults */\n\t\t\t_fnCompatOpts( defaults );\n\t\t\t_fnCompatCols( defaults.column );\n\t\t\t\n\t\t\t/* Convert the camel-case defaults to Hungarian */\n\t\t\t_fnCamelToHungarian( defaults, defaults, true );\n\t\t\t_fnCamelToHungarian( defaults.column, defaults.column, true );\n\t\t\t\n\t\t\t/* Setting up the initialisation object */\n\t\t\t_fnCamelToHungarian( defaults, $.extend( oInit, $this.data() ), true );\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t/* Check to see if we are re-initialising a table */\n\t\t\tvar allSettings = DataTable.settings;\n\t\t\tfor ( i=0, iLen=allSettings.length ; i<iLen ; i++ )\n\t\t\t{\n\t\t\t\tvar s = allSettings[i];\n\t\t\t\n\t\t\t\t/* Base check on table node */\n\t\t\t\tif (\n\t\t\t\t\ts.nTable == this ||\n\t\t\t\t\t(s.nTHead && s.nTHead.parentNode == this) ||\n\t\t\t\t\t(s.nTFoot && s.nTFoot.parentNode == this)\n\t\t\t\t) {\n\t\t\t\t\tvar bRetrieve = oInit.bRetrieve !== undefined ? oInit.bRetrieve : defaults.bRetrieve;\n\t\t\t\t\tvar bDestroy = oInit.bDestroy !== undefined ? oInit.bDestroy : defaults.bDestroy;\n\t\t\t\n\t\t\t\t\tif ( emptyInit || bRetrieve )\n\t\t\t\t\t{\n\t\t\t\t\t\treturn s.oInstance;\n\t\t\t\t\t}\n\t\t\t\t\telse if ( bDestroy )\n\t\t\t\t\t{\n\t\t\t\t\t\ts.oInstance.fnDestroy();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t_fnLog( s, 0, 'Cannot reinitialise DataTable', 3 );\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\n\t\t\t\t/* If the element we are initialising has the same ID as a table which was previously\n\t\t\t\t * initialised, but the table nodes don't match (from before) then we destroy the old\n\t\t\t\t * instance by simply deleting it. This is under the assumption that the table has been\n\t\t\t\t * destroyed by other methods. Anyone using non-id selectors will need to do this manually\n\t\t\t\t */\n\t\t\t\tif ( s.sTableId == this.id )\n\t\t\t\t{\n\t\t\t\t\tallSettings.splice( i, 1 );\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t/* Ensure the table has an ID - required for accessibility */\n\t\t\tif ( sId === null || sId === \"\" )\n\t\t\t{\n\t\t\t\tsId = \"DataTables_Table_\"+(DataTable.ext._unique++);\n\t\t\t\tthis.id = sId;\n\t\t\t}\n\t\t\t\n\t\t\t/* Create the settings object for this table and set some of the default parameters */\n\t\t\tvar oSettings = $.extend( true, {}, DataTable.models.oSettings, {\n\t\t\t\t\"sDestroyWidth\": $this[0].style.width,\n\t\t\t\t\"sInstance\":     sId,\n\t\t\t\t\"sTableId\":      sId\n\t\t\t} );\n\t\t\toSettings.nTable = this;\n\t\t\toSettings.oApi   = _that.internal;\n\t\t\toSettings.oInit  = oInit;\n\t\t\t\n\t\t\tallSettings.push( oSettings );\n\t\t\t\n\t\t\t// Need to add the instance after the instance after the settings object has been added\n\t\t\t// to the settings array, so we can self reference the table instance if more than one\n\t\t\toSettings.oInstance = (_that.length===1) ? _that : $this.dataTable();\n\t\t\t\n\t\t\t// Backwards compatibility, before we apply all the defaults\n\t\t\t_fnCompatOpts( oInit );\n\t\t\t_fnLanguageCompat( oInit.oLanguage );\n\t\t\t\n\t\t\t// If the length menu is given, but the init display length is not, use the length menu\n\t\t\tif ( oInit.aLengthMenu && ! oInit.iDisplayLength )\n\t\t\t{\n\t\t\t\toInit.iDisplayLength = $.isArray( oInit.aLengthMenu[0] ) ?\n\t\t\t\t\toInit.aLengthMenu[0][0] : oInit.aLengthMenu[0];\n\t\t\t}\n\t\t\t\n\t\t\t// Apply the defaults and init options to make a single init object will all\n\t\t\t// options defined from defaults and instance options.\n\t\t\toInit = _fnExtend( $.extend( true, {}, defaults ), oInit );\n\t\t\t\n\t\t\t\n\t\t\t// Map the initialisation options onto the settings object\n\t\t\t_fnMap( oSettings.oFeatures, oInit, [\n\t\t\t\t\"bPaginate\",\n\t\t\t\t\"bLengthChange\",\n\t\t\t\t\"bFilter\",\n\t\t\t\t\"bSort\",\n\t\t\t\t\"bSortMulti\",\n\t\t\t\t\"bInfo\",\n\t\t\t\t\"bProcessing\",\n\t\t\t\t\"bAutoWidth\",\n\t\t\t\t\"bSortClasses\",\n\t\t\t\t\"bServerSide\",\n\t\t\t\t\"bDeferRender\"\n\t\t\t] );\n\t\t\t_fnMap( oSettings, oInit, [\n\t\t\t\t\"asStripeClasses\",\n\t\t\t\t\"ajax\",\n\t\t\t\t\"fnServerData\",\n\t\t\t\t\"fnFormatNumber\",\n\t\t\t\t\"sServerMethod\",\n\t\t\t\t\"aaSorting\",\n\t\t\t\t\"aaSortingFixed\",\n\t\t\t\t\"aLengthMenu\",\n\t\t\t\t\"sPaginationType\",\n\t\t\t\t\"sAjaxSource\",\n\t\t\t\t\"sAjaxDataProp\",\n\t\t\t\t\"iStateDuration\",\n\t\t\t\t\"sDom\",\n\t\t\t\t\"bSortCellsTop\",\n\t\t\t\t\"iTabIndex\",\n\t\t\t\t\"fnStateLoadCallback\",\n\t\t\t\t\"fnStateSaveCallback\",\n\t\t\t\t\"renderer\",\n\t\t\t\t\"searchDelay\",\n\t\t\t\t\"rowId\",\n\t\t\t\t[ \"iCookieDuration\", \"iStateDuration\" ], // backwards compat\n\t\t\t\t[ \"oSearch\", \"oPreviousSearch\" ],\n\t\t\t\t[ \"aoSearchCols\", \"aoPreSearchCols\" ],\n\t\t\t\t[ \"iDisplayLength\", \"_iDisplayLength\" ]\n\t\t\t] );\n\t\t\t_fnMap( oSettings.oScroll, oInit, [\n\t\t\t\t[ \"sScrollX\", \"sX\" ],\n\t\t\t\t[ \"sScrollXInner\", \"sXInner\" ],\n\t\t\t\t[ \"sScrollY\", \"sY\" ],\n\t\t\t\t[ \"bScrollCollapse\", \"bCollapse\" ]\n\t\t\t] );\n\t\t\t_fnMap( oSettings.oLanguage, oInit, \"fnInfoCallback\" );\n\t\t\t\n\t\t\t/* Callback functions which are array driven */\n\t\t\t_fnCallbackReg( oSettings, 'aoDrawCallback',       oInit.fnDrawCallback,      'user' );\n\t\t\t_fnCallbackReg( oSettings, 'aoServerParams',       oInit.fnServerParams,      'user' );\n\t\t\t_fnCallbackReg( oSettings, 'aoStateSaveParams',    oInit.fnStateSaveParams,   'user' );\n\t\t\t_fnCallbackReg( oSettings, 'aoStateLoadParams',    oInit.fnStateLoadParams,   'user' );\n\t\t\t_fnCallbackReg( oSettings, 'aoStateLoaded',        oInit.fnStateLoaded,       'user' );\n\t\t\t_fnCallbackReg( oSettings, 'aoRowCallback',        oInit.fnRowCallback,       'user' );\n\t\t\t_fnCallbackReg( oSettings, 'aoRowCreatedCallback', oInit.fnCreatedRow,        'user' );\n\t\t\t_fnCallbackReg( oSettings, 'aoHeaderCallback',     oInit.fnHeaderCallback,    'user' );\n\t\t\t_fnCallbackReg( oSettings, 'aoFooterCallback',     oInit.fnFooterCallback,    'user' );\n\t\t\t_fnCallbackReg( oSettings, 'aoInitComplete',       oInit.fnInitComplete,      'user' );\n\t\t\t_fnCallbackReg( oSettings, 'aoPreDrawCallback',    oInit.fnPreDrawCallback,   'user' );\n\t\t\t\n\t\t\toSettings.rowIdFn = _fnGetObjectDataFn( oInit.rowId );\n\t\t\t\n\t\t\t/* Browser support detection */\n\t\t\t_fnBrowserDetect( oSettings );\n\t\t\t\n\t\t\tvar oClasses = oSettings.oClasses;\n\t\t\t\n\t\t\t$.extend( oClasses, DataTable.ext.classes, oInit.oClasses );\n\t\t\t$this.addClass( oClasses.sTable );\n\t\t\t\n\t\t\t\n\t\t\tif ( oSettings.iInitDisplayStart === undefined )\n\t\t\t{\n\t\t\t\t/* Display start point, taking into account the save saving */\n\t\t\t\toSettings.iInitDisplayStart = oInit.iDisplayStart;\n\t\t\t\toSettings._iDisplayStart = oInit.iDisplayStart;\n\t\t\t}\n\t\t\t\n\t\t\tif ( oInit.iDeferLoading !== null )\n\t\t\t{\n\t\t\t\toSettings.bDeferLoading = true;\n\t\t\t\tvar tmp = $.isArray( oInit.iDeferLoading );\n\t\t\t\toSettings._iRecordsDisplay = tmp ? oInit.iDeferLoading[0] : oInit.iDeferLoading;\n\t\t\t\toSettings._iRecordsTotal = tmp ? oInit.iDeferLoading[1] : oInit.iDeferLoading;\n\t\t\t}\n\t\t\t\n\t\t\t/* Language definitions */\n\t\t\tvar oLanguage = oSettings.oLanguage;\n\t\t\t$.extend( true, oLanguage, oInit.oLanguage );\n\t\t\t\n\t\t\tif ( oLanguage.sUrl )\n\t\t\t{\n\t\t\t\t/* Get the language definitions from a file - because this Ajax call makes the language\n\t\t\t\t * get async to the remainder of this function we use bInitHandedOff to indicate that\n\t\t\t\t * _fnInitialise will be fired by the returned Ajax handler, rather than the constructor\n\t\t\t\t */\n\t\t\t\t$.ajax( {\n\t\t\t\t\tdataType: 'json',\n\t\t\t\t\turl: oLanguage.sUrl,\n\t\t\t\t\tsuccess: function ( json ) {\n\t\t\t\t\t\t_fnLanguageCompat( json );\n\t\t\t\t\t\t_fnCamelToHungarian( defaults.oLanguage, json );\n\t\t\t\t\t\t$.extend( true, oLanguage, json );\n\t\t\t\t\t\t_fnInitialise( oSettings );\n\t\t\t\t\t},\n\t\t\t\t\terror: function () {\n\t\t\t\t\t\t// Error occurred loading language file, continue on as best we can\n\t\t\t\t\t\t_fnInitialise( oSettings );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\tbInitHandedOff = true;\n\t\t\t}\n\t\t\t\n\t\t\t/*\n\t\t\t * Stripes\n\t\t\t */\n\t\t\tif ( oInit.asStripeClasses === null )\n\t\t\t{\n\t\t\t\toSettings.asStripeClasses =[\n\t\t\t\t\toClasses.sStripeOdd,\n\t\t\t\t\toClasses.sStripeEven\n\t\t\t\t];\n\t\t\t}\n\t\t\t\n\t\t\t/* Remove row stripe classes if they are already on the table row */\n\t\t\tvar stripeClasses = oSettings.asStripeClasses;\n\t\t\tvar rowOne = $this.children('tbody').find('tr').eq(0);\n\t\t\tif ( $.inArray( true, $.map( stripeClasses, function(el, i) {\n\t\t\t\treturn rowOne.hasClass(el);\n\t\t\t} ) ) !== -1 ) {\n\t\t\t\t$('tbody tr', this).removeClass( stripeClasses.join(' ') );\n\t\t\t\toSettings.asDestroyStripes = stripeClasses.slice();\n\t\t\t}\n\t\t\t\n\t\t\t/*\n\t\t\t * Columns\n\t\t\t * See if we should load columns automatically or use defined ones\n\t\t\t */\n\t\t\tvar anThs = [];\n\t\t\tvar aoColumnsInit;\n\t\t\tvar nThead = this.getElementsByTagName('thead');\n\t\t\tif ( nThead.length !== 0 )\n\t\t\t{\n\t\t\t\t_fnDetectHeader( oSettings.aoHeader, nThead[0] );\n\t\t\t\tanThs = _fnGetUniqueThs( oSettings );\n\t\t\t}\n\t\t\t\n\t\t\t/* If not given a column array, generate one with nulls */\n\t\t\tif ( oInit.aoColumns === null )\n\t\t\t{\n\t\t\t\taoColumnsInit = [];\n\t\t\t\tfor ( i=0, iLen=anThs.length ; i<iLen ; i++ )\n\t\t\t\t{\n\t\t\t\t\taoColumnsInit.push( null );\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\taoColumnsInit = oInit.aoColumns;\n\t\t\t}\n\t\t\t\n\t\t\t/* Add the columns */\n\t\t\tfor ( i=0, iLen=aoColumnsInit.length ; i<iLen ; i++ )\n\t\t\t{\n\t\t\t\t_fnAddColumn( oSettings, anThs ? anThs[i] : null );\n\t\t\t}\n\t\t\t\n\t\t\t/* Apply the column definitions */\n\t\t\t_fnApplyColumnDefs( oSettings, oInit.aoColumnDefs, aoColumnsInit, function (iCol, oDef) {\n\t\t\t\t_fnColumnOptions( oSettings, iCol, oDef );\n\t\t\t} );\n\t\t\t\n\t\t\t/* HTML5 attribute detection - build an mData object automatically if the\n\t\t\t * attributes are found\n\t\t\t */\n\t\t\tif ( rowOne.length ) {\n\t\t\t\tvar a = function ( cell, name ) {\n\t\t\t\t\treturn cell.getAttribute( 'data-'+name ) !== null ? name : null;\n\t\t\t\t};\n\t\t\t\n\t\t\t\t$( rowOne[0] ).children('th, td').each( function (i, cell) {\n\t\t\t\t\tvar col = oSettings.aoColumns[i];\n\t\t\t\n\t\t\t\t\tif ( col.mData === i ) {\n\t\t\t\t\t\tvar sort = a( cell, 'sort' ) || a( cell, 'order' );\n\t\t\t\t\t\tvar filter = a( cell, 'filter' ) || a( cell, 'search' );\n\t\t\t\n\t\t\t\t\t\tif ( sort !== null || filter !== null ) {\n\t\t\t\t\t\t\tcol.mData = {\n\t\t\t\t\t\t\t\t_:      i+'.display',\n\t\t\t\t\t\t\t\tsort:   sort !== null   ? i+'.@data-'+sort   : undefined,\n\t\t\t\t\t\t\t\ttype:   sort !== null   ? i+'.@data-'+sort   : undefined,\n\t\t\t\t\t\t\t\tfilter: filter !== null ? i+'.@data-'+filter : undefined\n\t\t\t\t\t\t\t};\n\t\t\t\n\t\t\t\t\t\t\t_fnColumnOptions( oSettings, i );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\t\t\t\n\t\t\tvar features = oSettings.oFeatures;\n\t\t\tvar loadedInit = function () {\n\t\t\t\t/*\n\t\t\t\t * Sorting\n\t\t\t\t * @todo For modularisation (1.11) this needs to do into a sort start up handler\n\t\t\t\t */\n\t\t\t\n\t\t\t\t// If aaSorting is not defined, then we use the first indicator in asSorting\n\t\t\t\t// in case that has been altered, so the default sort reflects that option\n\t\t\t\tif ( oInit.aaSorting === undefined ) {\n\t\t\t\t\tvar sorting = oSettings.aaSorting;\n\t\t\t\t\tfor ( i=0, iLen=sorting.length ; i<iLen ; i++ ) {\n\t\t\t\t\t\tsorting[i][1] = oSettings.aoColumns[ i ].asSorting[0];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\n\t\t\t\t/* Do a first pass on the sorting classes (allows any size changes to be taken into\n\t\t\t\t * account, and also will apply sorting disabled classes if disabled\n\t\t\t\t */\n\t\t\t\t_fnSortingClasses( oSettings );\n\t\t\t\n\t\t\t\tif ( features.bSort ) {\n\t\t\t\t\t_fnCallbackReg( oSettings, 'aoDrawCallback', function () {\n\t\t\t\t\t\tif ( oSettings.bSorted ) {\n\t\t\t\t\t\t\tvar aSort = _fnSortFlatten( oSettings );\n\t\t\t\t\t\t\tvar sortedColumns = {};\n\t\t\t\n\t\t\t\t\t\t\t$.each( aSort, function (i, val) {\n\t\t\t\t\t\t\t\tsortedColumns[ val.src ] = val.dir;\n\t\t\t\t\t\t\t} );\n\t\t\t\n\t\t\t\t\t\t\t_fnCallbackFire( oSettings, null, 'order', [oSettings, aSort, sortedColumns] );\n\t\t\t\t\t\t\t_fnSortAria( oSettings );\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t\n\t\t\t\t_fnCallbackReg( oSettings, 'aoDrawCallback', function () {\n\t\t\t\t\tif ( oSettings.bSorted || _fnDataSource( oSettings ) === 'ssp' || features.bDeferRender ) {\n\t\t\t\t\t\t_fnSortingClasses( oSettings );\n\t\t\t\t\t}\n\t\t\t\t}, 'sc' );\n\t\t\t\n\t\t\t\n\t\t\t\t/*\n\t\t\t\t * Final init\n\t\t\t\t * Cache the header, body and footer as required, creating them if needed\n\t\t\t\t */\n\t\t\t\n\t\t\t\t// Work around for Webkit bug 83867 - store the caption-side before removing from doc\n\t\t\t\tvar captions = $this.children('caption').each( function () {\n\t\t\t\t\tthis._captionSide = $(this).css('caption-side');\n\t\t\t\t} );\n\t\t\t\n\t\t\t\tvar thead = $this.children('thead');\n\t\t\t\tif ( thead.length === 0 ) {\n\t\t\t\t\tthead = $('<thead/>').appendTo($this);\n\t\t\t\t}\n\t\t\t\toSettings.nTHead = thead[0];\n\t\t\t\n\t\t\t\tvar tbody = $this.children('tbody');\n\t\t\t\tif ( tbody.length === 0 ) {\n\t\t\t\t\ttbody = $('<tbody/>').appendTo($this);\n\t\t\t\t}\n\t\t\t\toSettings.nTBody = tbody[0];\n\t\t\t\n\t\t\t\tvar tfoot = $this.children('tfoot');\n\t\t\t\tif ( tfoot.length === 0 && captions.length > 0 && (oSettings.oScroll.sX !== \"\" || oSettings.oScroll.sY !== \"\") ) {\n\t\t\t\t\t// If we are a scrolling table, and no footer has been given, then we need to create\n\t\t\t\t\t// a tfoot element for the caption element to be appended to\n\t\t\t\t\ttfoot = $('<tfoot/>').appendTo($this);\n\t\t\t\t}\n\t\t\t\n\t\t\t\tif ( tfoot.length === 0 || tfoot.children().length === 0 ) {\n\t\t\t\t\t$this.addClass( oClasses.sNoFooter );\n\t\t\t\t}\n\t\t\t\telse if ( tfoot.length > 0 ) {\n\t\t\t\t\toSettings.nTFoot = tfoot[0];\n\t\t\t\t\t_fnDetectHeader( oSettings.aoFooter, oSettings.nTFoot );\n\t\t\t\t}\n\t\t\t\n\t\t\t\t/* Check if there is data passing into the constructor */\n\t\t\t\tif ( oInit.aaData ) {\n\t\t\t\t\tfor ( i=0 ; i<oInit.aaData.length ; i++ ) {\n\t\t\t\t\t\t_fnAddData( oSettings, oInit.aaData[ i ] );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if ( oSettings.bDeferLoading || _fnDataSource( oSettings ) == 'dom' ) {\n\t\t\t\t\t/* Grab the data from the page - only do this when deferred loading or no Ajax\n\t\t\t\t\t * source since there is no point in reading the DOM data if we are then going\n\t\t\t\t\t * to replace it with Ajax data\n\t\t\t\t\t */\n\t\t\t\t\t_fnAddTr( oSettings, $(oSettings.nTBody).children('tr') );\n\t\t\t\t}\n\t\t\t\n\t\t\t\t/* Copy the data index array */\n\t\t\t\toSettings.aiDisplay = oSettings.aiDisplayMaster.slice();\n\t\t\t\n\t\t\t\t/* Initialisation complete - table can be drawn */\n\t\t\t\toSettings.bInitialised = true;\n\t\t\t\n\t\t\t\t/* Check if we need to initialise the table (it might not have been handed off to the\n\t\t\t\t * language processor)\n\t\t\t\t */\n\t\t\t\tif ( bInitHandedOff === false ) {\n\t\t\t\t\t_fnInitialise( oSettings );\n\t\t\t\t}\n\t\t\t};\n\t\t\t\n\t\t\t/* Must be done after everything which can be overridden by the state saving! */\n\t\t\tif ( oInit.bStateSave )\n\t\t\t{\n\t\t\t\tfeatures.bStateSave = true;\n\t\t\t\t_fnCallbackReg( oSettings, 'aoDrawCallback', _fnSaveState, 'state_save' );\n\t\t\t\t_fnLoadState( oSettings, oInit, loadedInit );\n\t\t\t}\n\t\t\telse {\n\t\t\t\tloadedInit();\n\t\t\t}\n\t\t\t\n\t\t} );\n\t\t_that = null;\n\t\treturn this;\n\t};\n\n\t\n\t/*\n\t * It is useful to have variables which are scoped locally so only the\n\t * DataTables functions can access them and they don't leak into global space.\n\t * At the same time these functions are often useful over multiple files in the\n\t * core and API, so we list, or at least document, all variables which are used\n\t * by DataTables as private variables here. This also ensures that there is no\n\t * clashing of variable names and that they can easily referenced for reuse.\n\t */\n\t\n\t\n\t// Defined else where\n\t//  _selector_run\n\t//  _selector_opts\n\t//  _selector_first\n\t//  _selector_row_indexes\n\t\n\tvar _ext; // DataTable.ext\n\tvar _Api; // DataTable.Api\n\tvar _api_register; // DataTable.Api.register\n\tvar _api_registerPlural; // DataTable.Api.registerPlural\n\t\n\tvar _re_dic = {};\n\tvar _re_new_lines = /[\\r\\n\\u2028]/g;\n\tvar _re_html = /<.*?>/g;\n\t\n\t// This is not strict ISO8601 - Date.parse() is quite lax, although\n\t// implementations differ between browsers.\n\tvar _re_date = /^\\d{2,4}[\\.\\/\\-]\\d{1,2}[\\.\\/\\-]\\d{1,2}([T ]{1}\\d{1,2}[:\\.]\\d{2}([\\.:]\\d{2})?)?$/;\n\t\n\t// Escape regular expression special characters\n\tvar _re_escape_regex = new RegExp( '(\\\\' + [ '/', '.', '*', '+', '?', '|', '(', ')', '[', ']', '{', '}', '\\\\', '$', '^', '-' ].join('|\\\\') + ')', 'g' );\n\t\n\t// http://en.wikipedia.org/wiki/Foreign_exchange_market\n\t// - \\u20BD - Russian ruble.\n\t// - \\u20a9 - South Korean Won\n\t// - \\u20BA - Turkish Lira\n\t// - \\u20B9 - Indian Rupee\n\t// - R - Brazil (R$) and South Africa\n\t// - fr - Swiss Franc\n\t// - kr - Swedish krona, Norwegian krone and Danish krone\n\t// - \\u2009 is thin space and \\u202F is narrow no-break space, both used in many\n\t// - É - Bitcoin\n\t// - Î - Ethereum\n\t//   standards as thousands separators.\n\tvar _re_formatted_numeric = /[',$Â£â¬Â¥%\\u2009\\u202F\\u20BD\\u20a9\\u20BArfkÉÎ]/gi;\n\t\n\t\n\tvar _empty = function ( d ) {\n\t\treturn !d || d === true || d === '-' ? true : false;\n\t};\n\t\n\t\n\tvar _intVal = function ( s ) {\n\t\tvar integer = parseInt( s, 10 );\n\t\treturn !isNaN(integer) && isFinite(s) ? integer : null;\n\t};\n\t\n\t// Convert from a formatted number with characters other than `.` as the\n\t// decimal place, to a Javascript number\n\tvar _numToDecimal = function ( num, decimalPoint ) {\n\t\t// Cache created regular expressions for speed as this function is called often\n\t\tif ( ! _re_dic[ decimalPoint ] ) {\n\t\t\t_re_dic[ decimalPoint ] = new RegExp( _fnEscapeRegex( decimalPoint ), 'g' );\n\t\t}\n\t\treturn typeof num === 'string' && decimalPoint !== '.' ?\n\t\t\tnum.replace( /\\./g, '' ).replace( _re_dic[ decimalPoint ], '.' ) :\n\t\t\tnum;\n\t};\n\t\n\t\n\tvar _isNumber = function ( d, decimalPoint, formatted ) {\n\t\tvar strType = typeof d === 'string';\n\t\n\t\t// If empty return immediately so there must be a number if it is a\n\t\t// formatted string (this stops the string \"k\", or \"kr\", etc being detected\n\t\t// as a formatted number for currency\n\t\tif ( _empty( d ) ) {\n\t\t\treturn true;\n\t\t}\n\t\n\t\tif ( decimalPoint && strType ) {\n\t\t\td = _numToDecimal( d, decimalPoint );\n\t\t}\n\t\n\t\tif ( formatted && strType ) {\n\t\t\td = d.replace( _re_formatted_numeric, '' );\n\t\t}\n\t\n\t\treturn !isNaN( parseFloat(d) ) && isFinite( d );\n\t};\n\t\n\t\n\t// A string without HTML in it can be considered to be HTML still\n\tvar _isHtml = function ( d ) {\n\t\treturn _empty( d ) || typeof d === 'string';\n\t};\n\t\n\t\n\tvar _htmlNumeric = function ( d, decimalPoint, formatted ) {\n\t\tif ( _empty( d ) ) {\n\t\t\treturn true;\n\t\t}\n\t\n\t\tvar html = _isHtml( d );\n\t\treturn ! html ?\n\t\t\tnull :\n\t\t\t_isNumber( _stripHtml( d ), decimalPoint, formatted ) ?\n\t\t\t\ttrue :\n\t\t\t\tnull;\n\t};\n\t\n\t\n\tvar _pluck = function ( a, prop, prop2 ) {\n\t\tvar out = [];\n\t\tvar i=0, ien=a.length;\n\t\n\t\t// Could have the test in the loop for slightly smaller code, but speed\n\t\t// is essential here\n\t\tif ( prop2 !== undefined ) {\n\t\t\tfor ( ; i<ien ; i++ ) {\n\t\t\t\tif ( a[i] && a[i][ prop ] ) {\n\t\t\t\t\tout.push( a[i][ prop ][ prop2 ] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tfor ( ; i<ien ; i++ ) {\n\t\t\t\tif ( a[i] ) {\n\t\t\t\t\tout.push( a[i][ prop ] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\treturn out;\n\t};\n\t\n\t\n\t// Basically the same as _pluck, but rather than looping over `a` we use `order`\n\t// as the indexes to pick from `a`\n\tvar _pluck_order = function ( a, order, prop, prop2 )\n\t{\n\t\tvar out = [];\n\t\tvar i=0, ien=order.length;\n\t\n\t\t// Could have the test in the loop for slightly smaller code, but speed\n\t\t// is essential here\n\t\tif ( prop2 !== undefined ) {\n\t\t\tfor ( ; i<ien ; i++ ) {\n\t\t\t\tif ( a[ order[i] ][ prop ] ) {\n\t\t\t\t\tout.push( a[ order[i] ][ prop ][ prop2 ] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tfor ( ; i<ien ; i++ ) {\n\t\t\t\tout.push( a[ order[i] ][ prop ] );\n\t\t\t}\n\t\t}\n\t\n\t\treturn out;\n\t};\n\t\n\t\n\tvar _range = function ( len, start )\n\t{\n\t\tvar out = [];\n\t\tvar end;\n\t\n\t\tif ( start === undefined ) {\n\t\t\tstart = 0;\n\t\t\tend = len;\n\t\t}\n\t\telse {\n\t\t\tend = start;\n\t\t\tstart = len;\n\t\t}\n\t\n\t\tfor ( var i=start ; i<end ; i++ ) {\n\t\t\tout.push( i );\n\t\t}\n\t\n\t\treturn out;\n\t};\n\t\n\t\n\tvar _removeEmpty = function ( a )\n\t{\n\t\tvar out = [];\n\t\n\t\tfor ( var i=0, ien=a.length ; i<ien ; i++ ) {\n\t\t\tif ( a[i] ) { // careful - will remove all falsy values!\n\t\t\t\tout.push( a[i] );\n\t\t\t}\n\t\t}\n\t\n\t\treturn out;\n\t};\n\t\n\t\n\tvar _stripHtml = function ( d ) {\n\t\treturn d.replace( _re_html, '' );\n\t};\n\t\n\t\n\t/**\n\t * Determine if all values in the array are unique. This means we can short\n\t * cut the _unique method at the cost of a single loop. A sorted array is used\n\t * to easily check the values.\n\t *\n\t * @param  {array} src Source array\n\t * @return {boolean} true if all unique, false otherwise\n\t * @ignore\n\t */\n\tvar _areAllUnique = function ( src ) {\n\t\tif ( src.length < 2 ) {\n\t\t\treturn true;\n\t\t}\n\t\n\t\tvar sorted = src.slice().sort();\n\t\tvar last = sorted[0];\n\t\n\t\tfor ( var i=1, ien=sorted.length ; i<ien ; i++ ) {\n\t\t\tif ( sorted[i] === last ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\n\t\t\tlast = sorted[i];\n\t\t}\n\t\n\t\treturn true;\n\t};\n\t\n\t\n\t/**\n\t * Find the unique elements in a source array.\n\t *\n\t * @param  {array} src Source array\n\t * @return {array} Array of unique items\n\t * @ignore\n\t */\n\tvar _unique = function ( src )\n\t{\n\t\tif ( _areAllUnique( src ) ) {\n\t\t\treturn src.slice();\n\t\t}\n\t\n\t\t// A faster unique method is to use object keys to identify used values,\n\t\t// but this doesn't work with arrays or objects, which we must also\n\t\t// consider. See jsperf.com/compare-array-unique-versions/4 for more\n\t\t// information.\n\t\tvar\n\t\t\tout = [],\n\t\t\tval,\n\t\t\ti, ien=src.length,\n\t\t\tj, k=0;\n\t\n\t\tagain: for ( i=0 ; i<ien ; i++ ) {\n\t\t\tval = src[i];\n\t\n\t\t\tfor ( j=0 ; j<k ; j++ ) {\n\t\t\t\tif ( out[j] === val ) {\n\t\t\t\t\tcontinue again;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tout.push( val );\n\t\t\tk++;\n\t\t}\n\t\n\t\treturn out;\n\t};\n\t\n\t\n\t/**\n\t * DataTables utility methods\n\t * \n\t * This namespace provides helper methods that DataTables uses internally to\n\t * create a DataTable, but which are not exclusively used only for DataTables.\n\t * These methods can be used by extension authors to save the duplication of\n\t * code.\n\t *\n\t *  @namespace\n\t */\n\tDataTable.util = {\n\t\t/**\n\t\t * Throttle the calls to a function. Arguments and context are maintained\n\t\t * for the throttled function.\n\t\t *\n\t\t * @param {function} fn Function to be called\n\t\t * @param {integer} freq Call frequency in mS\n\t\t * @return {function} Wrapped function\n\t\t */\n\t\tthrottle: function ( fn, freq ) {\n\t\t\tvar\n\t\t\t\tfrequency = freq !== undefined ? freq : 200,\n\t\t\t\tlast,\n\t\t\t\ttimer;\n\t\n\t\t\treturn function () {\n\t\t\t\tvar\n\t\t\t\t\tthat = this,\n\t\t\t\t\tnow  = +new Date(),\n\t\t\t\t\targs = arguments;\n\t\n\t\t\t\tif ( last && now < last + frequency ) {\n\t\t\t\t\tclearTimeout( timer );\n\t\n\t\t\t\t\ttimer = setTimeout( function () {\n\t\t\t\t\t\tlast = undefined;\n\t\t\t\t\t\tfn.apply( that, args );\n\t\t\t\t\t}, frequency );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tlast = now;\n\t\t\t\t\tfn.apply( that, args );\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\t\n\t\n\t\t/**\n\t\t * Escape a string such that it can be used in a regular expression\n\t\t *\n\t\t *  @param {string} val string to escape\n\t\t *  @returns {string} escaped string\n\t\t */\n\t\tescapeRegex: function ( val ) {\n\t\t\treturn val.replace( _re_escape_regex, '\\\\$1' );\n\t\t}\n\t};\n\t\n\t\n\t\n\t/**\n\t * Create a mapping object that allows camel case parameters to be looked up\n\t * for their Hungarian counterparts. The mapping is stored in a private\n\t * parameter called `_hungarianMap` which can be accessed on the source object.\n\t *  @param {object} o\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnHungarianMap ( o )\n\t{\n\t\tvar\n\t\t\thungarian = 'a aa ai ao as b fn i m o s ',\n\t\t\tmatch,\n\t\t\tnewKey,\n\t\t\tmap = {};\n\t\n\t\t$.each( o, function (key, val) {\n\t\t\tmatch = key.match(/^([^A-Z]+?)([A-Z])/);\n\t\n\t\t\tif ( match && hungarian.indexOf(match[1]+' ') !== -1 )\n\t\t\t{\n\t\t\t\tnewKey = key.replace( match[0], match[2].toLowerCase() );\n\t\t\t\tmap[ newKey ] = key;\n\t\n\t\t\t\tif ( match[1] === 'o' )\n\t\t\t\t{\n\t\t\t\t\t_fnHungarianMap( o[key] );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t\n\t\to._hungarianMap = map;\n\t}\n\t\n\t\n\t/**\n\t * Convert from camel case parameters to Hungarian, based on a Hungarian map\n\t * created by _fnHungarianMap.\n\t *  @param {object} src The model object which holds all parameters that can be\n\t *    mapped.\n\t *  @param {object} user The object to convert from camel case to Hungarian.\n\t *  @param {boolean} force When set to `true`, properties which already have a\n\t *    Hungarian value in the `user` object will be overwritten. Otherwise they\n\t *    won't be.\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnCamelToHungarian ( src, user, force )\n\t{\n\t\tif ( ! src._hungarianMap ) {\n\t\t\t_fnHungarianMap( src );\n\t\t}\n\t\n\t\tvar hungarianKey;\n\t\n\t\t$.each( user, function (key, val) {\n\t\t\thungarianKey = src._hungarianMap[ key ];\n\t\n\t\t\tif ( hungarianKey !== undefined && (force || user[hungarianKey] === undefined) )\n\t\t\t{\n\t\t\t\t// For objects, we need to buzz down into the object to copy parameters\n\t\t\t\tif ( hungarianKey.charAt(0) === 'o' )\n\t\t\t\t{\n\t\t\t\t\t// Copy the camelCase options over to the hungarian\n\t\t\t\t\tif ( ! user[ hungarianKey ] ) {\n\t\t\t\t\t\tuser[ hungarianKey ] = {};\n\t\t\t\t\t}\n\t\t\t\t\t$.extend( true, user[hungarianKey], user[key] );\n\t\n\t\t\t\t\t_fnCamelToHungarian( src[hungarianKey], user[hungarianKey], force );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tuser[hungarianKey] = user[ key ];\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t}\n\t\n\t\n\t/**\n\t * Language compatibility - when certain options are given, and others aren't, we\n\t * need to duplicate the values over, in order to provide backwards compatibility\n\t * with older language files.\n\t *  @param {object} oSettings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnLanguageCompat( lang )\n\t{\n\t\t// Note the use of the Hungarian notation for the parameters in this method as\n\t\t// this is called after the mapping of camelCase to Hungarian\n\t\tvar defaults = DataTable.defaults.oLanguage;\n\t\n\t\t// Default mapping\n\t\tvar defaultDecimal = defaults.sDecimal;\n\t\tif ( defaultDecimal ) {\n\t\t\t_addNumericSort( defaultDecimal );\n\t\t}\n\t\n\t\tif ( lang ) {\n\t\t\tvar zeroRecords = lang.sZeroRecords;\n\t\n\t\t\t// Backwards compatibility - if there is no sEmptyTable given, then use the same as\n\t\t\t// sZeroRecords - assuming that is given.\n\t\t\tif ( ! lang.sEmptyTable && zeroRecords &&\n\t\t\t\tdefaults.sEmptyTable === \"No data available in table\" )\n\t\t\t{\n\t\t\t\t_fnMap( lang, lang, 'sZeroRecords', 'sEmptyTable' );\n\t\t\t}\n\t\n\t\t\t// Likewise with loading records\n\t\t\tif ( ! lang.sLoadingRecords && zeroRecords &&\n\t\t\t\tdefaults.sLoadingRecords === \"Loading...\" )\n\t\t\t{\n\t\t\t\t_fnMap( lang, lang, 'sZeroRecords', 'sLoadingRecords' );\n\t\t\t}\n\t\n\t\t\t// Old parameter name of the thousands separator mapped onto the new\n\t\t\tif ( lang.sInfoThousands ) {\n\t\t\t\tlang.sThousands = lang.sInfoThousands;\n\t\t\t}\n\t\n\t\t\tvar decimal = lang.sDecimal;\n\t\t\tif ( decimal && defaultDecimal !== decimal ) {\n\t\t\t\t_addNumericSort( decimal );\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Map one parameter onto another\n\t *  @param {object} o Object to map\n\t *  @param {*} knew The new parameter name\n\t *  @param {*} old The old parameter name\n\t */\n\tvar _fnCompatMap = function ( o, knew, old ) {\n\t\tif ( o[ knew ] !== undefined ) {\n\t\t\to[ old ] = o[ knew ];\n\t\t}\n\t};\n\t\n\t\n\t/**\n\t * Provide backwards compatibility for the main DT options. Note that the new\n\t * options are mapped onto the old parameters, so this is an external interface\n\t * change only.\n\t *  @param {object} init Object to map\n\t */\n\tfunction _fnCompatOpts ( init )\n\t{\n\t\t_fnCompatMap( init, 'ordering',      'bSort' );\n\t\t_fnCompatMap( init, 'orderMulti',    'bSortMulti' );\n\t\t_fnCompatMap( init, 'orderClasses',  'bSortClasses' );\n\t\t_fnCompatMap( init, 'orderCellsTop', 'bSortCellsTop' );\n\t\t_fnCompatMap( init, 'order',         'aaSorting' );\n\t\t_fnCompatMap( init, 'orderFixed',    'aaSortingFixed' );\n\t\t_fnCompatMap( init, 'paging',        'bPaginate' );\n\t\t_fnCompatMap( init, 'pagingType',    'sPaginationType' );\n\t\t_fnCompatMap( init, 'pageLength',    'iDisplayLength' );\n\t\t_fnCompatMap( init, 'searching',     'bFilter' );\n\t\n\t\t// Boolean initialisation of x-scrolling\n\t\tif ( typeof init.sScrollX === 'boolean' ) {\n\t\t\tinit.sScrollX = init.sScrollX ? '100%' : '';\n\t\t}\n\t\tif ( typeof init.scrollX === 'boolean' ) {\n\t\t\tinit.scrollX = init.scrollX ? '100%' : '';\n\t\t}\n\t\n\t\t// Column search objects are in an array, so it needs to be converted\n\t\t// element by element\n\t\tvar searchCols = init.aoSearchCols;\n\t\n\t\tif ( searchCols ) {\n\t\t\tfor ( var i=0, ien=searchCols.length ; i<ien ; i++ ) {\n\t\t\t\tif ( searchCols[i] ) {\n\t\t\t\t\t_fnCamelToHungarian( DataTable.models.oSearch, searchCols[i] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Provide backwards compatibility for column options. Note that the new options\n\t * are mapped onto the old parameters, so this is an external interface change\n\t * only.\n\t *  @param {object} init Object to map\n\t */\n\tfunction _fnCompatCols ( init )\n\t{\n\t\t_fnCompatMap( init, 'orderable',     'bSortable' );\n\t\t_fnCompatMap( init, 'orderData',     'aDataSort' );\n\t\t_fnCompatMap( init, 'orderSequence', 'asSorting' );\n\t\t_fnCompatMap( init, 'orderDataType', 'sortDataType' );\n\t\n\t\t// orderData can be given as an integer\n\t\tvar dataSort = init.aDataSort;\n\t\tif ( typeof dataSort === 'number' && ! $.isArray( dataSort ) ) {\n\t\t\tinit.aDataSort = [ dataSort ];\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Browser feature detection for capabilities, quirks\n\t *  @param {object} settings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnBrowserDetect( settings )\n\t{\n\t\t// We don't need to do this every time DataTables is constructed, the values\n\t\t// calculated are specific to the browser and OS configuration which we\n\t\t// don't expect to change between initialisations\n\t\tif ( ! DataTable.__browser ) {\n\t\t\tvar browser = {};\n\t\t\tDataTable.__browser = browser;\n\t\n\t\t\t// Scrolling feature / quirks detection\n\t\t\tvar n = $('<div/>')\n\t\t\t\t.css( {\n\t\t\t\t\tposition: 'fixed',\n\t\t\t\t\ttop: 0,\n\t\t\t\t\tleft: $(window).scrollLeft()*-1, // allow for scrolling\n\t\t\t\t\theight: 1,\n\t\t\t\t\twidth: 1,\n\t\t\t\t\toverflow: 'hidden'\n\t\t\t\t} )\n\t\t\t\t.append(\n\t\t\t\t\t$('<div/>')\n\t\t\t\t\t\t.css( {\n\t\t\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\t\t\ttop: 1,\n\t\t\t\t\t\t\tleft: 1,\n\t\t\t\t\t\t\twidth: 100,\n\t\t\t\t\t\t\toverflow: 'scroll'\n\t\t\t\t\t\t} )\n\t\t\t\t\t\t.append(\n\t\t\t\t\t\t\t$('<div/>')\n\t\t\t\t\t\t\t\t.css( {\n\t\t\t\t\t\t\t\t\twidth: '100%',\n\t\t\t\t\t\t\t\t\theight: 10\n\t\t\t\t\t\t\t\t} )\n\t\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t\t.appendTo( 'body' );\n\t\n\t\t\tvar outer = n.children();\n\t\t\tvar inner = outer.children();\n\t\n\t\t\t// Numbers below, in order, are:\n\t\t\t// inner.offsetWidth, inner.clientWidth, outer.offsetWidth, outer.clientWidth\n\t\t\t//\n\t\t\t// IE6 XP:                           100 100 100  83\n\t\t\t// IE7 Vista:                        100 100 100  83\n\t\t\t// IE 8+ Windows:                     83  83 100  83\n\t\t\t// Evergreen Windows:                 83  83 100  83\n\t\t\t// Evergreen Mac with scrollbars:     85  85 100  85\n\t\t\t// Evergreen Mac without scrollbars: 100 100 100 100\n\t\n\t\t\t// Get scrollbar width\n\t\t\tbrowser.barWidth = outer[0].offsetWidth - outer[0].clientWidth;\n\t\n\t\t\t// IE6/7 will oversize a width 100% element inside a scrolling element, to\n\t\t\t// include the width of the scrollbar, while other browsers ensure the inner\n\t\t\t// element is contained without forcing scrolling\n\t\t\tbrowser.bScrollOversize = inner[0].offsetWidth === 100 && outer[0].clientWidth !== 100;\n\t\n\t\t\t// In rtl text layout, some browsers (most, but not all) will place the\n\t\t\t// scrollbar on the left, rather than the right.\n\t\t\tbrowser.bScrollbarLeft = Math.round( inner.offset().left ) !== 1;\n\t\n\t\t\t// IE8- don't provide height and width for getBoundingClientRect\n\t\t\tbrowser.bBounding = n[0].getBoundingClientRect().width ? true : false;\n\t\n\t\t\tn.remove();\n\t\t}\n\t\n\t\t$.extend( settings.oBrowser, DataTable.__browser );\n\t\tsettings.oScroll.iBarWidth = DataTable.__browser.barWidth;\n\t}\n\t\n\t\n\t/**\n\t * Array.prototype reduce[Right] method, used for browsers which don't support\n\t * JS 1.6. Done this way to reduce code size, since we iterate either way\n\t *  @param {object} settings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnReduce ( that, fn, init, start, end, inc )\n\t{\n\t\tvar\n\t\t\ti = start,\n\t\t\tvalue,\n\t\t\tisSet = false;\n\t\n\t\tif ( init !== undefined ) {\n\t\t\tvalue = init;\n\t\t\tisSet = true;\n\t\t}\n\t\n\t\twhile ( i !== end ) {\n\t\t\tif ( ! that.hasOwnProperty(i) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\n\t\t\tvalue = isSet ?\n\t\t\t\tfn( value, that[i], i, that ) :\n\t\t\t\tthat[i];\n\t\n\t\t\tisSet = true;\n\t\t\ti += inc;\n\t\t}\n\t\n\t\treturn value;\n\t}\n\t\n\t/**\n\t * Add a column to the list used for the table with default values\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param {node} nTh The th element for this column\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnAddColumn( oSettings, nTh )\n\t{\n\t\t// Add column to aoColumns array\n\t\tvar oDefaults = DataTable.defaults.column;\n\t\tvar iCol = oSettings.aoColumns.length;\n\t\tvar oCol = $.extend( {}, DataTable.models.oColumn, oDefaults, {\n\t\t\t\"nTh\": nTh ? nTh : document.createElement('th'),\n\t\t\t\"sTitle\":    oDefaults.sTitle    ? oDefaults.sTitle    : nTh ? nTh.innerHTML : '',\n\t\t\t\"aDataSort\": oDefaults.aDataSort ? oDefaults.aDataSort : [iCol],\n\t\t\t\"mData\": oDefaults.mData ? oDefaults.mData : iCol,\n\t\t\tidx: iCol\n\t\t} );\n\t\toSettings.aoColumns.push( oCol );\n\t\n\t\t// Add search object for column specific search. Note that the `searchCols[ iCol ]`\n\t\t// passed into extend can be undefined. This allows the user to give a default\n\t\t// with only some of the parameters defined, and also not give a default\n\t\tvar searchCols = oSettings.aoPreSearchCols;\n\t\tsearchCols[ iCol ] = $.extend( {}, DataTable.models.oSearch, searchCols[ iCol ] );\n\t\n\t\t// Use the default column options function to initialise classes etc\n\t\t_fnColumnOptions( oSettings, iCol, $(nTh).data() );\n\t}\n\t\n\t\n\t/**\n\t * Apply options for a column\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param {int} iCol column index to consider\n\t *  @param {object} oOptions object with sType, bVisible and bSearchable etc\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnColumnOptions( oSettings, iCol, oOptions )\n\t{\n\t\tvar oCol = oSettings.aoColumns[ iCol ];\n\t\tvar oClasses = oSettings.oClasses;\n\t\tvar th = $(oCol.nTh);\n\t\n\t\t// Try to get width information from the DOM. We can't get it from CSS\n\t\t// as we'd need to parse the CSS stylesheet. `width` option can override\n\t\tif ( ! oCol.sWidthOrig ) {\n\t\t\t// Width attribute\n\t\t\toCol.sWidthOrig = th.attr('width') || null;\n\t\n\t\t\t// Style attribute\n\t\t\tvar t = (th.attr('style') || '').match(/width:\\s*(\\d+[pxem%]+)/);\n\t\t\tif ( t ) {\n\t\t\t\toCol.sWidthOrig = t[1];\n\t\t\t}\n\t\t}\n\t\n\t\t/* User specified column options */\n\t\tif ( oOptions !== undefined && oOptions !== null )\n\t\t{\n\t\t\t// Backwards compatibility\n\t\t\t_fnCompatCols( oOptions );\n\t\n\t\t\t// Map camel case parameters to their Hungarian counterparts\n\t\t\t_fnCamelToHungarian( DataTable.defaults.column, oOptions, true );\n\t\n\t\t\t/* Backwards compatibility for mDataProp */\n\t\t\tif ( oOptions.mDataProp !== undefined && !oOptions.mData )\n\t\t\t{\n\t\t\t\toOptions.mData = oOptions.mDataProp;\n\t\t\t}\n\t\n\t\t\tif ( oOptions.sType )\n\t\t\t{\n\t\t\t\toCol._sManualType = oOptions.sType;\n\t\t\t}\n\t\n\t\t\t// `class` is a reserved word in Javascript, so we need to provide\n\t\t\t// the ability to use a valid name for the camel case input\n\t\t\tif ( oOptions.className && ! oOptions.sClass )\n\t\t\t{\n\t\t\t\toOptions.sClass = oOptions.className;\n\t\t\t}\n\t\t\tif ( oOptions.sClass ) {\n\t\t\t\tth.addClass( oOptions.sClass );\n\t\t\t}\n\t\n\t\t\t$.extend( oCol, oOptions );\n\t\t\t_fnMap( oCol, oOptions, \"sWidth\", \"sWidthOrig\" );\n\t\n\t\t\t/* iDataSort to be applied (backwards compatibility), but aDataSort will take\n\t\t\t * priority if defined\n\t\t\t */\n\t\t\tif ( oOptions.iDataSort !== undefined )\n\t\t\t{\n\t\t\t\toCol.aDataSort = [ oOptions.iDataSort ];\n\t\t\t}\n\t\t\t_fnMap( oCol, oOptions, \"aDataSort\" );\n\t\t}\n\t\n\t\t/* Cache the data get and set functions for speed */\n\t\tvar mDataSrc = oCol.mData;\n\t\tvar mData = _fnGetObjectDataFn( mDataSrc );\n\t\tvar mRender = oCol.mRender ? _fnGetObjectDataFn( oCol.mRender ) : null;\n\t\n\t\tvar attrTest = function( src ) {\n\t\t\treturn typeof src === 'string' && src.indexOf('@') !== -1;\n\t\t};\n\t\toCol._bAttrSrc = $.isPlainObject( mDataSrc ) && (\n\t\t\tattrTest(mDataSrc.sort) || attrTest(mDataSrc.type) || attrTest(mDataSrc.filter)\n\t\t);\n\t\toCol._setter = null;\n\t\n\t\toCol.fnGetData = function (rowData, type, meta) {\n\t\t\tvar innerData = mData( rowData, type, undefined, meta );\n\t\n\t\t\treturn mRender && type ?\n\t\t\t\tmRender( innerData, type, rowData, meta ) :\n\t\t\t\tinnerData;\n\t\t};\n\t\toCol.fnSetData = function ( rowData, val, meta ) {\n\t\t\treturn _fnSetObjectDataFn( mDataSrc )( rowData, val, meta );\n\t\t};\n\t\n\t\t// Indicate if DataTables should read DOM data as an object or array\n\t\t// Used in _fnGetRowElements\n\t\tif ( typeof mDataSrc !== 'number' ) {\n\t\t\toSettings._rowReadObject = true;\n\t\t}\n\t\n\t\t/* Feature sorting overrides column specific when off */\n\t\tif ( !oSettings.oFeatures.bSort )\n\t\t{\n\t\t\toCol.bSortable = false;\n\t\t\tth.addClass( oClasses.sSortableNone ); // Have to add class here as order event isn't called\n\t\t}\n\t\n\t\t/* Check that the class assignment is correct for sorting */\n\t\tvar bAsc = $.inArray('asc', oCol.asSorting) !== -1;\n\t\tvar bDesc = $.inArray('desc', oCol.asSorting) !== -1;\n\t\tif ( !oCol.bSortable || (!bAsc && !bDesc) )\n\t\t{\n\t\t\toCol.sSortingClass = oClasses.sSortableNone;\n\t\t\toCol.sSortingClassJUI = \"\";\n\t\t}\n\t\telse if ( bAsc && !bDesc )\n\t\t{\n\t\t\toCol.sSortingClass = oClasses.sSortableAsc;\n\t\t\toCol.sSortingClassJUI = oClasses.sSortJUIAscAllowed;\n\t\t}\n\t\telse if ( !bAsc && bDesc )\n\t\t{\n\t\t\toCol.sSortingClass = oClasses.sSortableDesc;\n\t\t\toCol.sSortingClassJUI = oClasses.sSortJUIDescAllowed;\n\t\t}\n\t\telse\n\t\t{\n\t\t\toCol.sSortingClass = oClasses.sSortable;\n\t\t\toCol.sSortingClassJUI = oClasses.sSortJUI;\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Adjust the table column widths for new data. Note: you would probably want to\n\t * do a redraw after calling this function!\n\t *  @param {object} settings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnAdjustColumnSizing ( settings )\n\t{\n\t\t/* Not interested in doing column width calculation if auto-width is disabled */\n\t\tif ( settings.oFeatures.bAutoWidth !== false )\n\t\t{\n\t\t\tvar columns = settings.aoColumns;\n\t\n\t\t\t_fnCalculateColumnWidths( settings );\n\t\t\tfor ( var i=0 , iLen=columns.length ; i<iLen ; i++ )\n\t\t\t{\n\t\t\t\tcolumns[i].nTh.style.width = columns[i].sWidth;\n\t\t\t}\n\t\t}\n\t\n\t\tvar scroll = settings.oScroll;\n\t\tif ( scroll.sY !== '' || scroll.sX !== '')\n\t\t{\n\t\t\t_fnScrollDraw( settings );\n\t\t}\n\t\n\t\t_fnCallbackFire( settings, null, 'column-sizing', [settings] );\n\t}\n\t\n\t\n\t/**\n\t * Covert the index of a visible column to the index in the data array (take account\n\t * of hidden columns)\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param {int} iMatch Visible column index to lookup\n\t *  @returns {int} i the data index\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnVisibleToColumnIndex( oSettings, iMatch )\n\t{\n\t\tvar aiVis = _fnGetColumns( oSettings, 'bVisible' );\n\t\n\t\treturn typeof aiVis[iMatch] === 'number' ?\n\t\t\taiVis[iMatch] :\n\t\t\tnull;\n\t}\n\t\n\t\n\t/**\n\t * Covert the index of an index in the data array and convert it to the visible\n\t *   column index (take account of hidden columns)\n\t *  @param {int} iMatch Column index to lookup\n\t *  @param {object} oSettings dataTables settings object\n\t *  @returns {int} i the data index\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnColumnIndexToVisible( oSettings, iMatch )\n\t{\n\t\tvar aiVis = _fnGetColumns( oSettings, 'bVisible' );\n\t\tvar iPos = $.inArray( iMatch, aiVis );\n\t\n\t\treturn iPos !== -1 ? iPos : null;\n\t}\n\t\n\t\n\t/**\n\t * Get the number of visible columns\n\t *  @param {object} oSettings dataTables settings object\n\t *  @returns {int} i the number of visible columns\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnVisbleColumns( oSettings )\n\t{\n\t\tvar vis = 0;\n\t\n\t\t// No reduce in IE8, use a loop for now\n\t\t$.each( oSettings.aoColumns, function ( i, col ) {\n\t\t\tif ( col.bVisible && $(col.nTh).css('display') !== 'none' ) {\n\t\t\t\tvis++;\n\t\t\t}\n\t\t} );\n\t\n\t\treturn vis;\n\t}\n\t\n\t\n\t/**\n\t * Get an array of column indexes that match a given property\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param {string} sParam Parameter in aoColumns to look for - typically\n\t *    bVisible or bSearchable\n\t *  @returns {array} Array of indexes with matched properties\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnGetColumns( oSettings, sParam )\n\t{\n\t\tvar a = [];\n\t\n\t\t$.map( oSettings.aoColumns, function(val, i) {\n\t\t\tif ( val[sParam] ) {\n\t\t\t\ta.push( i );\n\t\t\t}\n\t\t} );\n\t\n\t\treturn a;\n\t}\n\t\n\t\n\t/**\n\t * Calculate the 'type' of a column\n\t *  @param {object} settings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnColumnTypes ( settings )\n\t{\n\t\tvar columns = settings.aoColumns;\n\t\tvar data = settings.aoData;\n\t\tvar types = DataTable.ext.type.detect;\n\t\tvar i, ien, j, jen, k, ken;\n\t\tvar col, cell, detectedType, cache;\n\t\n\t\t// For each column, spin over the \n\t\tfor ( i=0, ien=columns.length ; i<ien ; i++ ) {\n\t\t\tcol = columns[i];\n\t\t\tcache = [];\n\t\n\t\t\tif ( ! col.sType && col._sManualType ) {\n\t\t\t\tcol.sType = col._sManualType;\n\t\t\t}\n\t\t\telse if ( ! col.sType ) {\n\t\t\t\tfor ( j=0, jen=types.length ; j<jen ; j++ ) {\n\t\t\t\t\tfor ( k=0, ken=data.length ; k<ken ; k++ ) {\n\t\t\t\t\t\t// Use a cache array so we only need to get the type data\n\t\t\t\t\t\t// from the formatter once (when using multiple detectors)\n\t\t\t\t\t\tif ( cache[k] === undefined ) {\n\t\t\t\t\t\t\tcache[k] = _fnGetCellData( settings, k, i, 'type' );\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tdetectedType = types[j]( cache[k], settings );\n\t\n\t\t\t\t\t\t// If null, then this type can't apply to this column, so\n\t\t\t\t\t\t// rather than testing all cells, break out. There is an\n\t\t\t\t\t\t// exception for the last type which is `html`. We need to\n\t\t\t\t\t\t// scan all rows since it is possible to mix string and HTML\n\t\t\t\t\t\t// types\n\t\t\t\t\t\tif ( ! detectedType && j !== types.length-1 ) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t// Only a single match is needed for html type since it is\n\t\t\t\t\t\t// bottom of the pile and very similar to string\n\t\t\t\t\t\tif ( detectedType === 'html' ) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// Type is valid for all data points in the column - use this\n\t\t\t\t\t// type\n\t\t\t\t\tif ( detectedType ) {\n\t\t\t\t\t\tcol.sType = detectedType;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\t// Fall back - if no type was detected, always use string\n\t\t\t\tif ( ! col.sType ) {\n\t\t\t\t\tcol.sType = 'string';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Take the column definitions and static columns arrays and calculate how\n\t * they relate to column indexes. The callback function will then apply the\n\t * definition found for a column to a suitable configuration object.\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param {array} aoColDefs The aoColumnDefs array that is to be applied\n\t *  @param {array} aoCols The aoColumns array that defines columns individually\n\t *  @param {function} fn Callback function - takes two parameters, the calculated\n\t *    column index and the definition for that column.\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnApplyColumnDefs( oSettings, aoColDefs, aoCols, fn )\n\t{\n\t\tvar i, iLen, j, jLen, k, kLen, def;\n\t\tvar columns = oSettings.aoColumns;\n\t\n\t\t// Column definitions with aTargets\n\t\tif ( aoColDefs )\n\t\t{\n\t\t\t/* Loop over the definitions array - loop in reverse so first instance has priority */\n\t\t\tfor ( i=aoColDefs.length-1 ; i>=0 ; i-- )\n\t\t\t{\n\t\t\t\tdef = aoColDefs[i];\n\t\n\t\t\t\t/* Each definition can target multiple columns, as it is an array */\n\t\t\t\tvar aTargets = def.targets !== undefined ?\n\t\t\t\t\tdef.targets :\n\t\t\t\t\tdef.aTargets;\n\t\n\t\t\t\tif ( ! $.isArray( aTargets ) )\n\t\t\t\t{\n\t\t\t\t\taTargets = [ aTargets ];\n\t\t\t\t}\n\t\n\t\t\t\tfor ( j=0, jLen=aTargets.length ; j<jLen ; j++ )\n\t\t\t\t{\n\t\t\t\t\tif ( typeof aTargets[j] === 'number' && aTargets[j] >= 0 )\n\t\t\t\t\t{\n\t\t\t\t\t\t/* Add columns that we don't yet know about */\n\t\t\t\t\t\twhile( columns.length <= aTargets[j] )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t_fnAddColumn( oSettings );\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t/* Integer, basic index */\n\t\t\t\t\t\tfn( aTargets[j], def );\n\t\t\t\t\t}\n\t\t\t\t\telse if ( typeof aTargets[j] === 'number' && aTargets[j] < 0 )\n\t\t\t\t\t{\n\t\t\t\t\t\t/* Negative integer, right to left column counting */\n\t\t\t\t\t\tfn( columns.length+aTargets[j], def );\n\t\t\t\t\t}\n\t\t\t\t\telse if ( typeof aTargets[j] === 'string' )\n\t\t\t\t\t{\n\t\t\t\t\t\t/* Class name matching on TH element */\n\t\t\t\t\t\tfor ( k=0, kLen=columns.length ; k<kLen ; k++ )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif ( aTargets[j] == \"_all\" ||\n\t\t\t\t\t\t\t     $(columns[k].nTh).hasClass( aTargets[j] ) )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfn( k, def );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\t// Statically defined columns array\n\t\tif ( aoCols )\n\t\t{\n\t\t\tfor ( i=0, iLen=aoCols.length ; i<iLen ; i++ )\n\t\t\t{\n\t\t\t\tfn( i, aoCols[i] );\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/**\n\t * Add a data array to the table, creating DOM node etc. This is the parallel to\n\t * _fnGatherData, but for adding rows from a Javascript source, rather than a\n\t * DOM source.\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param {array} aData data array to be added\n\t *  @param {node} [nTr] TR element to add to the table - optional. If not given,\n\t *    DataTables will create a row automatically\n\t *  @param {array} [anTds] Array of TD|TH elements for the row - must be given\n\t *    if nTr is.\n\t *  @returns {int} >=0 if successful (index of new aoData entry), -1 if failed\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnAddData ( oSettings, aDataIn, nTr, anTds )\n\t{\n\t\t/* Create the object for storing information about this new row */\n\t\tvar iRow = oSettings.aoData.length;\n\t\tvar oData = $.extend( true, {}, DataTable.models.oRow, {\n\t\t\tsrc: nTr ? 'dom' : 'data',\n\t\t\tidx: iRow\n\t\t} );\n\t\n\t\toData._aData = aDataIn;\n\t\toSettings.aoData.push( oData );\n\t\n\t\t/* Create the cells */\n\t\tvar nTd, sThisType;\n\t\tvar columns = oSettings.aoColumns;\n\t\n\t\t// Invalidate the column types as the new data needs to be revalidated\n\t\tfor ( var i=0, iLen=columns.length ; i<iLen ; i++ )\n\t\t{\n\t\t\tcolumns[i].sType = null;\n\t\t}\n\t\n\t\t/* Add to the display array */\n\t\toSettings.aiDisplayMaster.push( iRow );\n\t\n\t\tvar id = oSettings.rowIdFn( aDataIn );\n\t\tif ( id !== undefined ) {\n\t\t\toSettings.aIds[ id ] = oData;\n\t\t}\n\t\n\t\t/* Create the DOM information, or register it if already present */\n\t\tif ( nTr || ! oSettings.oFeatures.bDeferRender )\n\t\t{\n\t\t\t_fnCreateTr( oSettings, iRow, nTr, anTds );\n\t\t}\n\t\n\t\treturn iRow;\n\t}\n\t\n\t\n\t/**\n\t * Add one or more TR elements to the table. Generally we'd expect to\n\t * use this for reading data from a DOM sourced table, but it could be\n\t * used for an TR element. Note that if a TR is given, it is used (i.e.\n\t * it is not cloned).\n\t *  @param {object} settings dataTables settings object\n\t *  @param {array|node|jQuery} trs The TR element(s) to add to the table\n\t *  @returns {array} Array of indexes for the added rows\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnAddTr( settings, trs )\n\t{\n\t\tvar row;\n\t\n\t\t// Allow an individual node to be passed in\n\t\tif ( ! (trs instanceof $) ) {\n\t\t\ttrs = $(trs);\n\t\t}\n\t\n\t\treturn trs.map( function (i, el) {\n\t\t\trow = _fnGetRowElements( settings, el );\n\t\t\treturn _fnAddData( settings, row.data, el, row.cells );\n\t\t} );\n\t}\n\t\n\t\n\t/**\n\t * Take a TR element and convert it to an index in aoData\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param {node} n the TR element to find\n\t *  @returns {int} index if the node is found, null if not\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnNodeToDataIndex( oSettings, n )\n\t{\n\t\treturn (n._DT_RowIndex!==undefined) ? n._DT_RowIndex : null;\n\t}\n\t\n\t\n\t/**\n\t * Take a TD element and convert it into a column data index (not the visible index)\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param {int} iRow The row number the TD/TH can be found in\n\t *  @param {node} n The TD/TH element to find\n\t *  @returns {int} index if the node is found, -1 if not\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnNodeToColumnIndex( oSettings, iRow, n )\n\t{\n\t\treturn $.inArray( n, oSettings.aoData[ iRow ].anCells );\n\t}\n\t\n\t\n\t/**\n\t * Get the data for a given cell from the internal cache, taking into account data mapping\n\t *  @param {object} settings dataTables settings object\n\t *  @param {int} rowIdx aoData row id\n\t *  @param {int} colIdx Column index\n\t *  @param {string} type data get type ('display', 'type' 'filter' 'sort')\n\t *  @returns {*} Cell data\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnGetCellData( settings, rowIdx, colIdx, type )\n\t{\n\t\tvar draw           = settings.iDraw;\n\t\tvar col            = settings.aoColumns[colIdx];\n\t\tvar rowData        = settings.aoData[rowIdx]._aData;\n\t\tvar defaultContent = col.sDefaultContent;\n\t\tvar cellData       = col.fnGetData( rowData, type, {\n\t\t\tsettings: settings,\n\t\t\trow:      rowIdx,\n\t\t\tcol:      colIdx\n\t\t} );\n\t\n\t\tif ( cellData === undefined ) {\n\t\t\tif ( settings.iDrawError != draw && defaultContent === null ) {\n\t\t\t\t_fnLog( settings, 0, \"Requested unknown parameter \"+\n\t\t\t\t\t(typeof col.mData=='function' ? '{function}' : \"'\"+col.mData+\"'\")+\n\t\t\t\t\t\" for row \"+rowIdx+\", column \"+colIdx, 4 );\n\t\t\t\tsettings.iDrawError = draw;\n\t\t\t}\n\t\t\treturn defaultContent;\n\t\t}\n\t\n\t\t// When the data source is null and a specific data type is requested (i.e.\n\t\t// not the original data), we can use default column data\n\t\tif ( (cellData === rowData || cellData === null) && defaultContent !== null && type !== undefined ) {\n\t\t\tcellData = defaultContent;\n\t\t}\n\t\telse if ( typeof cellData === 'function' ) {\n\t\t\t// If the data source is a function, then we run it and use the return,\n\t\t\t// executing in the scope of the data object (for instances)\n\t\t\treturn cellData.call( rowData );\n\t\t}\n\t\n\t\tif ( cellData === null && type == 'display' ) {\n\t\t\treturn '';\n\t\t}\n\t\treturn cellData;\n\t}\n\t\n\t\n\t/**\n\t * Set the value for a specific cell, into the internal data cache\n\t *  @param {object} settings dataTables settings object\n\t *  @param {int} rowIdx aoData row id\n\t *  @param {int} colIdx Column index\n\t *  @param {*} val Value to set\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnSetCellData( settings, rowIdx, colIdx, val )\n\t{\n\t\tvar col     = settings.aoColumns[colIdx];\n\t\tvar rowData = settings.aoData[rowIdx]._aData;\n\t\n\t\tcol.fnSetData( rowData, val, {\n\t\t\tsettings: settings,\n\t\t\trow:      rowIdx,\n\t\t\tcol:      colIdx\n\t\t}  );\n\t}\n\t\n\t\n\t// Private variable that is used to match action syntax in the data property object\n\tvar __reArray = /\\[.*?\\]$/;\n\tvar __reFn = /\\(\\)$/;\n\t\n\t/**\n\t * Split string on periods, taking into account escaped periods\n\t * @param  {string} str String to split\n\t * @return {array} Split string\n\t */\n\tfunction _fnSplitObjNotation( str )\n\t{\n\t\treturn $.map( str.match(/(\\\\.|[^\\.])+/g) || [''], function ( s ) {\n\t\t\treturn s.replace(/\\\\\\./g, '.');\n\t\t} );\n\t}\n\t\n\t\n\t/**\n\t * Return a function that can be used to get data from a source object, taking\n\t * into account the ability to use nested objects as a source\n\t *  @param {string|int|function} mSource The data source for the object\n\t *  @returns {function} Data get function\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnGetObjectDataFn( mSource )\n\t{\n\t\tif ( $.isPlainObject( mSource ) )\n\t\t{\n\t\t\t/* Build an object of get functions, and wrap them in a single call */\n\t\t\tvar o = {};\n\t\t\t$.each( mSource, function (key, val) {\n\t\t\t\tif ( val ) {\n\t\t\t\t\to[key] = _fnGetObjectDataFn( val );\n\t\t\t\t}\n\t\t\t} );\n\t\n\t\t\treturn function (data, type, row, meta) {\n\t\t\t\tvar t = o[type] || o._;\n\t\t\t\treturn t !== undefined ?\n\t\t\t\t\tt(data, type, row, meta) :\n\t\t\t\t\tdata;\n\t\t\t};\n\t\t}\n\t\telse if ( mSource === null )\n\t\t{\n\t\t\t/* Give an empty string for rendering / sorting etc */\n\t\t\treturn function (data) { // type, row and meta also passed, but not used\n\t\t\t\treturn data;\n\t\t\t};\n\t\t}\n\t\telse if ( typeof mSource === 'function' )\n\t\t{\n\t\t\treturn function (data, type, row, meta) {\n\t\t\t\treturn mSource( data, type, row, meta );\n\t\t\t};\n\t\t}\n\t\telse if ( typeof mSource === 'string' && (mSource.indexOf('.') !== -1 ||\n\t\t\t      mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1) )\n\t\t{\n\t\t\t/* If there is a . in the source string then the data source is in a\n\t\t\t * nested object so we loop over the data for each level to get the next\n\t\t\t * level down. On each loop we test for undefined, and if found immediately\n\t\t\t * return. This allows entire objects to be missing and sDefaultContent to\n\t\t\t * be used if defined, rather than throwing an error\n\t\t\t */\n\t\t\tvar fetchData = function (data, type, src) {\n\t\t\t\tvar arrayNotation, funcNotation, out, innerSrc;\n\t\n\t\t\t\tif ( src !== \"\" )\n\t\t\t\t{\n\t\t\t\t\tvar a = _fnSplitObjNotation( src );\n\t\n\t\t\t\t\tfor ( var i=0, iLen=a.length ; i<iLen ; i++ )\n\t\t\t\t\t{\n\t\t\t\t\t\t// Check if we are dealing with special notation\n\t\t\t\t\t\tarrayNotation = a[i].match(__reArray);\n\t\t\t\t\t\tfuncNotation = a[i].match(__reFn);\n\t\n\t\t\t\t\t\tif ( arrayNotation )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Array notation\n\t\t\t\t\t\t\ta[i] = a[i].replace(__reArray, '');\n\t\n\t\t\t\t\t\t\t// Condition allows simply [] to be passed in\n\t\t\t\t\t\t\tif ( a[i] !== \"\" ) {\n\t\t\t\t\t\t\t\tdata = data[ a[i] ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tout = [];\n\t\n\t\t\t\t\t\t\t// Get the remainder of the nested object to get\n\t\t\t\t\t\t\ta.splice( 0, i+1 );\n\t\t\t\t\t\t\tinnerSrc = a.join('.');\n\t\n\t\t\t\t\t\t\t// Traverse each entry in the array getting the properties requested\n\t\t\t\t\t\t\tif ( $.isArray( data ) ) {\n\t\t\t\t\t\t\t\tfor ( var j=0, jLen=data.length ; j<jLen ; j++ ) {\n\t\t\t\t\t\t\t\t\tout.push( fetchData( data[j], type, innerSrc ) );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t// If a string is given in between the array notation indicators, that\n\t\t\t\t\t\t\t// is used to join the strings together, otherwise an array is returned\n\t\t\t\t\t\t\tvar join = arrayNotation[0].substring(1, arrayNotation[0].length-1);\n\t\t\t\t\t\t\tdata = (join===\"\") ? out : out.join(join);\n\t\n\t\t\t\t\t\t\t// The inner call to fetchData has already traversed through the remainder\n\t\t\t\t\t\t\t// of the source requested, so we exit from the loop\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if ( funcNotation )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Function call\n\t\t\t\t\t\t\ta[i] = a[i].replace(__reFn, '');\n\t\t\t\t\t\t\tdata = data[ a[i] ]();\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tif ( data === null || data[ a[i] ] === undefined )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdata = data[ a[i] ];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\treturn data;\n\t\t\t};\n\t\n\t\t\treturn function (data, type) { // row and meta also passed, but not used\n\t\t\t\treturn fetchData( data, type, mSource );\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\t/* Array or flat object mapping */\n\t\t\treturn function (data, type) { // row and meta also passed, but not used\n\t\t\t\treturn data[mSource];\n\t\t\t};\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Return a function that can be used to set data from a source object, taking\n\t * into account the ability to use nested objects as a source\n\t *  @param {string|int|function} mSource The data source for the object\n\t *  @returns {function} Data set function\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnSetObjectDataFn( mSource )\n\t{\n\t\tif ( $.isPlainObject( mSource ) )\n\t\t{\n\t\t\t/* Unlike get, only the underscore (global) option is used for for\n\t\t\t * setting data since we don't know the type here. This is why an object\n\t\t\t * option is not documented for `mData` (which is read/write), but it is\n\t\t\t * for `mRender` which is read only.\n\t\t\t */\n\t\t\treturn _fnSetObjectDataFn( mSource._ );\n\t\t}\n\t\telse if ( mSource === null )\n\t\t{\n\t\t\t/* Nothing to do when the data source is null */\n\t\t\treturn function () {};\n\t\t}\n\t\telse if ( typeof mSource === 'function' )\n\t\t{\n\t\t\treturn function (data, val, meta) {\n\t\t\t\tmSource( data, 'set', val, meta );\n\t\t\t};\n\t\t}\n\t\telse if ( typeof mSource === 'string' && (mSource.indexOf('.') !== -1 ||\n\t\t\t      mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1) )\n\t\t{\n\t\t\t/* Like the get, we need to get data from a nested object */\n\t\t\tvar setData = function (data, val, src) {\n\t\t\t\tvar a = _fnSplitObjNotation( src ), b;\n\t\t\t\tvar aLast = a[a.length-1];\n\t\t\t\tvar arrayNotation, funcNotation, o, innerSrc;\n\t\n\t\t\t\tfor ( var i=0, iLen=a.length-1 ; i<iLen ; i++ )\n\t\t\t\t{\n\t\t\t\t\t// Check if we are dealing with an array notation request\n\t\t\t\t\tarrayNotation = a[i].match(__reArray);\n\t\t\t\t\tfuncNotation = a[i].match(__reFn);\n\t\n\t\t\t\t\tif ( arrayNotation )\n\t\t\t\t\t{\n\t\t\t\t\t\ta[i] = a[i].replace(__reArray, '');\n\t\t\t\t\t\tdata[ a[i] ] = [];\n\t\n\t\t\t\t\t\t// Get the remainder of the nested object to set so we can recurse\n\t\t\t\t\t\tb = a.slice();\n\t\t\t\t\t\tb.splice( 0, i+1 );\n\t\t\t\t\t\tinnerSrc = b.join('.');\n\t\n\t\t\t\t\t\t// Traverse each entry in the array setting the properties requested\n\t\t\t\t\t\tif ( $.isArray( val ) )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfor ( var j=0, jLen=val.length ; j<jLen ; j++ )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\to = {};\n\t\t\t\t\t\t\t\tsetData( o, val[j], innerSrc );\n\t\t\t\t\t\t\t\tdata[ a[i] ].push( o );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// We've been asked to save data to an array, but it\n\t\t\t\t\t\t\t// isn't array data to be saved. Best that can be done\n\t\t\t\t\t\t\t// is to just save the value.\n\t\t\t\t\t\t\tdata[ a[i] ] = val;\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t// The inner call to setData has already traversed through the remainder\n\t\t\t\t\t\t// of the source and has set the data, thus we can exit here\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\telse if ( funcNotation )\n\t\t\t\t\t{\n\t\t\t\t\t\t// Function call\n\t\t\t\t\t\ta[i] = a[i].replace(__reFn, '');\n\t\t\t\t\t\tdata = data[ a[i] ]( val );\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// If the nested object doesn't currently exist - since we are\n\t\t\t\t\t// trying to set the value - create it\n\t\t\t\t\tif ( data[ a[i] ] === null || data[ a[i] ] === undefined )\n\t\t\t\t\t{\n\t\t\t\t\t\tdata[ a[i] ] = {};\n\t\t\t\t\t}\n\t\t\t\t\tdata = data[ a[i] ];\n\t\t\t\t}\n\t\n\t\t\t\t// Last item in the input - i.e, the actual set\n\t\t\t\tif ( aLast.match(__reFn ) )\n\t\t\t\t{\n\t\t\t\t\t// Function call\n\t\t\t\t\tdata = data[ aLast.replace(__reFn, '') ]( val );\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// If array notation is used, we just want to strip it and use the property name\n\t\t\t\t\t// and assign the value. If it isn't used, then we get the result we want anyway\n\t\t\t\t\tdata[ aLast.replace(__reArray, '') ] = val;\n\t\t\t\t}\n\t\t\t};\n\t\n\t\t\treturn function (data, val) { // meta is also passed in, but not used\n\t\t\t\treturn setData( data, val, mSource );\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\t/* Array or flat object mapping */\n\t\t\treturn function (data, val) { // meta is also passed in, but not used\n\t\t\t\tdata[mSource] = val;\n\t\t\t};\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Return an array with the full table data\n\t *  @param {object} oSettings dataTables settings object\n\t *  @returns array {array} aData Master data array\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnGetDataMaster ( settings )\n\t{\n\t\treturn _pluck( settings.aoData, '_aData' );\n\t}\n\t\n\t\n\t/**\n\t * Nuke the table\n\t *  @param {object} oSettings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnClearTable( settings )\n\t{\n\t\tsettings.aoData.length = 0;\n\t\tsettings.aiDisplayMaster.length = 0;\n\t\tsettings.aiDisplay.length = 0;\n\t\tsettings.aIds = {};\n\t}\n\t\n\t\n\t /**\n\t * Take an array of integers (index array) and remove a target integer (value - not\n\t * the key!)\n\t *  @param {array} a Index array to target\n\t *  @param {int} iTarget value to find\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnDeleteIndex( a, iTarget, splice )\n\t{\n\t\tvar iTargetIndex = -1;\n\t\n\t\tfor ( var i=0, iLen=a.length ; i<iLen ; i++ )\n\t\t{\n\t\t\tif ( a[i] == iTarget )\n\t\t\t{\n\t\t\t\tiTargetIndex = i;\n\t\t\t}\n\t\t\telse if ( a[i] > iTarget )\n\t\t\t{\n\t\t\t\ta[i]--;\n\t\t\t}\n\t\t}\n\t\n\t\tif ( iTargetIndex != -1 && splice === undefined )\n\t\t{\n\t\t\ta.splice( iTargetIndex, 1 );\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Mark cached data as invalid such that a re-read of the data will occur when\n\t * the cached data is next requested. Also update from the data source object.\n\t *\n\t * @param {object} settings DataTables settings object\n\t * @param {int}    rowIdx   Row index to invalidate\n\t * @param {string} [src]    Source to invalidate from: undefined, 'auto', 'dom'\n\t *     or 'data'\n\t * @param {int}    [colIdx] Column index to invalidate. If undefined the whole\n\t *     row will be invalidated\n\t * @memberof DataTable#oApi\n\t *\n\t * @todo For the modularisation of v1.11 this will need to become a callback, so\n\t *   the sort and filter methods can subscribe to it. That will required\n\t *   initialisation options for sorting, which is why it is not already baked in\n\t */\n\tfunction _fnInvalidate( settings, rowIdx, src, colIdx )\n\t{\n\t\tvar row = settings.aoData[ rowIdx ];\n\t\tvar i, ien;\n\t\tvar cellWrite = function ( cell, col ) {\n\t\t\t// This is very frustrating, but in IE if you just write directly\n\t\t\t// to innerHTML, and elements that are overwritten are GC'ed,\n\t\t\t// even if there is a reference to them elsewhere\n\t\t\twhile ( cell.childNodes.length ) {\n\t\t\t\tcell.removeChild( cell.firstChild );\n\t\t\t}\n\t\n\t\t\tcell.innerHTML = _fnGetCellData( settings, rowIdx, col, 'display' );\n\t\t};\n\t\n\t\t// Are we reading last data from DOM or the data object?\n\t\tif ( src === 'dom' || ((! src || src === 'auto') && row.src === 'dom') ) {\n\t\t\t// Read the data from the DOM\n\t\t\trow._aData = _fnGetRowElements(\n\t\t\t\t\tsettings, row, colIdx, colIdx === undefined ? undefined : row._aData\n\t\t\t\t)\n\t\t\t\t.data;\n\t\t}\n\t\telse {\n\t\t\t// Reading from data object, update the DOM\n\t\t\tvar cells = row.anCells;\n\t\n\t\t\tif ( cells ) {\n\t\t\t\tif ( colIdx !== undefined ) {\n\t\t\t\t\tcellWrite( cells[colIdx], colIdx );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tfor ( i=0, ien=cells.length ; i<ien ; i++ ) {\n\t\t\t\t\t\tcellWrite( cells[i], i );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\t// For both row and cell invalidation, the cached data for sorting and\n\t\t// filtering is nulled out\n\t\trow._aSortData = null;\n\t\trow._aFilterData = null;\n\t\n\t\t// Invalidate the type for a specific column (if given) or all columns since\n\t\t// the data might have changed\n\t\tvar cols = settings.aoColumns;\n\t\tif ( colIdx !== undefined ) {\n\t\t\tcols[ colIdx ].sType = null;\n\t\t}\n\t\telse {\n\t\t\tfor ( i=0, ien=cols.length ; i<ien ; i++ ) {\n\t\t\t\tcols[i].sType = null;\n\t\t\t}\n\t\n\t\t\t// Update DataTables special `DT_*` attributes for the row\n\t\t\t_fnRowAttributes( settings, row );\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Build a data source object from an HTML row, reading the contents of the\n\t * cells that are in the row.\n\t *\n\t * @param {object} settings DataTables settings object\n\t * @param {node|object} TR element from which to read data or existing row\n\t *   object from which to re-read the data from the cells\n\t * @param {int} [colIdx] Optional column index\n\t * @param {array|object} [d] Data source object. If `colIdx` is given then this\n\t *   parameter should also be given and will be used to write the data into.\n\t *   Only the column in question will be written\n\t * @returns {object} Object with two parameters: `data` the data read, in\n\t *   document order, and `cells` and array of nodes (they can be useful to the\n\t *   caller, so rather than needing a second traversal to get them, just return\n\t *   them from here).\n\t * @memberof DataTable#oApi\n\t */\n\tfunction _fnGetRowElements( settings, row, colIdx, d )\n\t{\n\t\tvar\n\t\t\ttds = [],\n\t\t\ttd = row.firstChild,\n\t\t\tname, col, o, i=0, contents,\n\t\t\tcolumns = settings.aoColumns,\n\t\t\tobjectRead = settings._rowReadObject;\n\t\n\t\t// Allow the data object to be passed in, or construct\n\t\td = d !== undefined ?\n\t\t\td :\n\t\t\tobjectRead ?\n\t\t\t\t{} :\n\t\t\t\t[];\n\t\n\t\tvar attr = function ( str, td  ) {\n\t\t\tif ( typeof str === 'string' ) {\n\t\t\t\tvar idx = str.indexOf('@');\n\t\n\t\t\t\tif ( idx !== -1 ) {\n\t\t\t\t\tvar attr = str.substring( idx+1 );\n\t\t\t\t\tvar setter = _fnSetObjectDataFn( str );\n\t\t\t\t\tsetter( d, td.getAttribute( attr ) );\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\n\t\t// Read data from a cell and store into the data object\n\t\tvar cellProcess = function ( cell ) {\n\t\t\tif ( colIdx === undefined || colIdx === i ) {\n\t\t\t\tcol = columns[i];\n\t\t\t\tcontents = $.trim(cell.innerHTML);\n\t\n\t\t\t\tif ( col && col._bAttrSrc ) {\n\t\t\t\t\tvar setter = _fnSetObjectDataFn( col.mData._ );\n\t\t\t\t\tsetter( d, contents );\n\t\n\t\t\t\t\tattr( col.mData.sort, cell );\n\t\t\t\t\tattr( col.mData.type, cell );\n\t\t\t\t\tattr( col.mData.filter, cell );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// Depending on the `data` option for the columns the data can\n\t\t\t\t\t// be read to either an object or an array.\n\t\t\t\t\tif ( objectRead ) {\n\t\t\t\t\t\tif ( ! col._setter ) {\n\t\t\t\t\t\t\t// Cache the setter function\n\t\t\t\t\t\t\tcol._setter = _fnSetObjectDataFn( col.mData );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcol._setter( d, contents );\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\td[i] = contents;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\ti++;\n\t\t};\n\t\n\t\tif ( td ) {\n\t\t\t// `tr` element was passed in\n\t\t\twhile ( td ) {\n\t\t\t\tname = td.nodeName.toUpperCase();\n\t\n\t\t\t\tif ( name == \"TD\" || name == \"TH\" ) {\n\t\t\t\t\tcellProcess( td );\n\t\t\t\t\ttds.push( td );\n\t\t\t\t}\n\t\n\t\t\t\ttd = td.nextSibling;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// Existing row object passed in\n\t\t\ttds = row.anCells;\n\t\n\t\t\tfor ( var j=0, jen=tds.length ; j<jen ; j++ ) {\n\t\t\t\tcellProcess( tds[j] );\n\t\t\t}\n\t\t}\n\t\n\t\t// Read the ID from the DOM if present\n\t\tvar rowNode = row.firstChild ? row : row.nTr;\n\t\n\t\tif ( rowNode ) {\n\t\t\tvar id = rowNode.getAttribute( 'id' );\n\t\n\t\t\tif ( id ) {\n\t\t\t\t_fnSetObjectDataFn( settings.rowId )( d, id );\n\t\t\t}\n\t\t}\n\t\n\t\treturn {\n\t\t\tdata: d,\n\t\t\tcells: tds\n\t\t};\n\t}\n\t/**\n\t * Create a new TR element (and it's TD children) for a row\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param {int} iRow Row to consider\n\t *  @param {node} [nTrIn] TR element to add to the table - optional. If not given,\n\t *    DataTables will create a row automatically\n\t *  @param {array} [anTds] Array of TD|TH elements for the row - must be given\n\t *    if nTr is.\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnCreateTr ( oSettings, iRow, nTrIn, anTds )\n\t{\n\t\tvar\n\t\t\trow = oSettings.aoData[iRow],\n\t\t\trowData = row._aData,\n\t\t\tcells = [],\n\t\t\tnTr, nTd, oCol,\n\t\t\ti, iLen, create;\n\t\n\t\tif ( row.nTr === null )\n\t\t{\n\t\t\tnTr = nTrIn || document.createElement('tr');\n\t\n\t\t\trow.nTr = nTr;\n\t\t\trow.anCells = cells;\n\t\n\t\t\t/* Use a private property on the node to allow reserve mapping from the node\n\t\t\t * to the aoData array for fast look up\n\t\t\t */\n\t\t\tnTr._DT_RowIndex = iRow;\n\t\n\t\t\t/* Special parameters can be given by the data source to be used on the row */\n\t\t\t_fnRowAttributes( oSettings, row );\n\t\n\t\t\t/* Process each column */\n\t\t\tfor ( i=0, iLen=oSettings.aoColumns.length ; i<iLen ; i++ )\n\t\t\t{\n\t\t\t\toCol = oSettings.aoColumns[i];\n\t\t\t\tcreate = nTrIn ? false : true;\n\t\n\t\t\t\tnTd = create ? document.createElement( oCol.sCellType ) : anTds[i];\n\t\t\t\tnTd._DT_CellIndex = {\n\t\t\t\t\trow: iRow,\n\t\t\t\t\tcolumn: i\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tcells.push( nTd );\n\t\n\t\t\t\t// Need to create the HTML if new, or if a rendering function is defined\n\t\t\t\tif ( create || ((!nTrIn || oCol.mRender || oCol.mData !== i) &&\n\t\t\t\t\t (!$.isPlainObject(oCol.mData) || oCol.mData._ !== i+'.display')\n\t\t\t\t)) {\n\t\t\t\t\tnTd.innerHTML = _fnGetCellData( oSettings, iRow, i, 'display' );\n\t\t\t\t}\n\t\n\t\t\t\t/* Add user defined class */\n\t\t\t\tif ( oCol.sClass )\n\t\t\t\t{\n\t\t\t\t\tnTd.className += ' '+oCol.sClass;\n\t\t\t\t}\n\t\n\t\t\t\t// Visibility - add or remove as required\n\t\t\t\tif ( oCol.bVisible && ! nTrIn )\n\t\t\t\t{\n\t\t\t\t\tnTr.appendChild( nTd );\n\t\t\t\t}\n\t\t\t\telse if ( ! oCol.bVisible && nTrIn )\n\t\t\t\t{\n\t\t\t\t\tnTd.parentNode.removeChild( nTd );\n\t\t\t\t}\n\t\n\t\t\t\tif ( oCol.fnCreatedCell )\n\t\t\t\t{\n\t\t\t\t\toCol.fnCreatedCell.call( oSettings.oInstance,\n\t\t\t\t\t\tnTd, _fnGetCellData( oSettings, iRow, i ), rowData, iRow, i\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\t_fnCallbackFire( oSettings, 'aoRowCreatedCallback', null, [nTr, rowData, iRow, cells] );\n\t\t}\n\t\n\t\t// Remove once webkit bug 131819 and Chromium bug 365619 have been resolved\n\t\t// and deployed\n\t\trow.nTr.setAttribute( 'role', 'row' );\n\t}\n\t\n\t\n\t/**\n\t * Add attributes to a row based on the special `DT_*` parameters in a data\n\t * source object.\n\t *  @param {object} settings DataTables settings object\n\t *  @param {object} DataTables row object for the row to be modified\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnRowAttributes( settings, row )\n\t{\n\t\tvar tr = row.nTr;\n\t\tvar data = row._aData;\n\t\n\t\tif ( tr ) {\n\t\t\tvar id = settings.rowIdFn( data );\n\t\n\t\t\tif ( id ) {\n\t\t\t\ttr.id = id;\n\t\t\t}\n\t\n\t\t\tif ( data.DT_RowClass ) {\n\t\t\t\t// Remove any classes added by DT_RowClass before\n\t\t\t\tvar a = data.DT_RowClass.split(' ');\n\t\t\t\trow.__rowc = row.__rowc ?\n\t\t\t\t\t_unique( row.__rowc.concat( a ) ) :\n\t\t\t\t\ta;\n\t\n\t\t\t\t$(tr)\n\t\t\t\t\t.removeClass( row.__rowc.join(' ') )\n\t\t\t\t\t.addClass( data.DT_RowClass );\n\t\t\t}\n\t\n\t\t\tif ( data.DT_RowAttr ) {\n\t\t\t\t$(tr).attr( data.DT_RowAttr );\n\t\t\t}\n\t\n\t\t\tif ( data.DT_RowData ) {\n\t\t\t\t$(tr).data( data.DT_RowData );\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Create the HTML header for the table\n\t *  @param {object} oSettings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnBuildHead( oSettings )\n\t{\n\t\tvar i, ien, cell, row, column;\n\t\tvar thead = oSettings.nTHead;\n\t\tvar tfoot = oSettings.nTFoot;\n\t\tvar createHeader = $('th, td', thead).length === 0;\n\t\tvar classes = oSettings.oClasses;\n\t\tvar columns = oSettings.aoColumns;\n\t\n\t\tif ( createHeader ) {\n\t\t\trow = $('<tr/>').appendTo( thead );\n\t\t}\n\t\n\t\tfor ( i=0, ien=columns.length ; i<ien ; i++ ) {\n\t\t\tcolumn = columns[i];\n\t\t\tcell = $( column.nTh ).addClass( column.sClass );\n\t\n\t\t\tif ( createHeader ) {\n\t\t\t\tcell.appendTo( row );\n\t\t\t}\n\t\n\t\t\t// 1.11 move into sorting\n\t\t\tif ( oSettings.oFeatures.bSort ) {\n\t\t\t\tcell.addClass( column.sSortingClass );\n\t\n\t\t\t\tif ( column.bSortable !== false ) {\n\t\t\t\t\tcell\n\t\t\t\t\t\t.attr( 'tabindex', oSettings.iTabIndex )\n\t\t\t\t\t\t.attr( 'aria-controls', oSettings.sTableId );\n\t\n\t\t\t\t\t_fnSortAttachListener( oSettings, column.nTh, i );\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tif ( column.sTitle != cell[0].innerHTML ) {\n\t\t\t\tcell.html( column.sTitle );\n\t\t\t}\n\t\n\t\t\t_fnRenderer( oSettings, 'header' )(\n\t\t\t\toSettings, cell, column, classes\n\t\t\t);\n\t\t}\n\t\n\t\tif ( createHeader ) {\n\t\t\t_fnDetectHeader( oSettings.aoHeader, thead );\n\t\t}\n\t\t\n\t\t/* ARIA role for the rows */\n\t \t$(thead).find('>tr').attr('role', 'row');\n\t\n\t\t/* Deal with the footer - add classes if required */\n\t\t$(thead).find('>tr>th, >tr>td').addClass( classes.sHeaderTH );\n\t\t$(tfoot).find('>tr>th, >tr>td').addClass( classes.sFooterTH );\n\t\n\t\t// Cache the footer cells. Note that we only take the cells from the first\n\t\t// row in the footer. If there is more than one row the user wants to\n\t\t// interact with, they need to use the table().foot() method. Note also this\n\t\t// allows cells to be used for multiple columns using colspan\n\t\tif ( tfoot !== null ) {\n\t\t\tvar cells = oSettings.aoFooter[0];\n\t\n\t\t\tfor ( i=0, ien=cells.length ; i<ien ; i++ ) {\n\t\t\t\tcolumn = columns[i];\n\t\t\t\tcolumn.nTf = cells[i].cell;\n\t\n\t\t\t\tif ( column.sClass ) {\n\t\t\t\t\t$(column.nTf).addClass( column.sClass );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Draw the header (or footer) element based on the column visibility states. The\n\t * methodology here is to use the layout array from _fnDetectHeader, modified for\n\t * the instantaneous column visibility, to construct the new layout. The grid is\n\t * traversed over cell at a time in a rows x columns grid fashion, although each\n\t * cell insert can cover multiple elements in the grid - which is tracks using the\n\t * aApplied array. Cell inserts in the grid will only occur where there isn't\n\t * already a cell in that position.\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param array {objects} aoSource Layout array from _fnDetectHeader\n\t *  @param {boolean} [bIncludeHidden=false] If true then include the hidden columns in the calc,\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnDrawHead( oSettings, aoSource, bIncludeHidden )\n\t{\n\t\tvar i, iLen, j, jLen, k, kLen, n, nLocalTr;\n\t\tvar aoLocal = [];\n\t\tvar aApplied = [];\n\t\tvar iColumns = oSettings.aoColumns.length;\n\t\tvar iRowspan, iColspan;\n\t\n\t\tif ( ! aoSource )\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\n\t\tif (  bIncludeHidden === undefined )\n\t\t{\n\t\t\tbIncludeHidden = false;\n\t\t}\n\t\n\t\t/* Make a copy of the master layout array, but without the visible columns in it */\n\t\tfor ( i=0, iLen=aoSource.length ; i<iLen ; i++ )\n\t\t{\n\t\t\taoLocal[i] = aoSource[i].slice();\n\t\t\taoLocal[i].nTr = aoSource[i].nTr;\n\t\n\t\t\t/* Remove any columns which are currently hidden */\n\t\t\tfor ( j=iColumns-1 ; j>=0 ; j-- )\n\t\t\t{\n\t\t\t\tif ( !oSettings.aoColumns[j].bVisible && !bIncludeHidden )\n\t\t\t\t{\n\t\t\t\t\taoLocal[i].splice( j, 1 );\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\t/* Prep the applied array - it needs an element for each row */\n\t\t\taApplied.push( [] );\n\t\t}\n\t\n\t\tfor ( i=0, iLen=aoLocal.length ; i<iLen ; i++ )\n\t\t{\n\t\t\tnLocalTr = aoLocal[i].nTr;\n\t\n\t\t\t/* All cells are going to be replaced, so empty out the row */\n\t\t\tif ( nLocalTr )\n\t\t\t{\n\t\t\t\twhile( (n = nLocalTr.firstChild) )\n\t\t\t\t{\n\t\t\t\t\tnLocalTr.removeChild( n );\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tfor ( j=0, jLen=aoLocal[i].length ; j<jLen ; j++ )\n\t\t\t{\n\t\t\t\tiRowspan = 1;\n\t\t\t\tiColspan = 1;\n\t\n\t\t\t\t/* Check to see if there is already a cell (row/colspan) covering our target\n\t\t\t\t * insert point. If there is, then there is nothing to do.\n\t\t\t\t */\n\t\t\t\tif ( aApplied[i][j] === undefined )\n\t\t\t\t{\n\t\t\t\t\tnLocalTr.appendChild( aoLocal[i][j].cell );\n\t\t\t\t\taApplied[i][j] = 1;\n\t\n\t\t\t\t\t/* Expand the cell to cover as many rows as needed */\n\t\t\t\t\twhile ( aoLocal[i+iRowspan] !== undefined &&\n\t\t\t\t\t        aoLocal[i][j].cell == aoLocal[i+iRowspan][j].cell )\n\t\t\t\t\t{\n\t\t\t\t\t\taApplied[i+iRowspan][j] = 1;\n\t\t\t\t\t\tiRowspan++;\n\t\t\t\t\t}\n\t\n\t\t\t\t\t/* Expand the cell to cover as many columns as needed */\n\t\t\t\t\twhile ( aoLocal[i][j+iColspan] !== undefined &&\n\t\t\t\t\t        aoLocal[i][j].cell == aoLocal[i][j+iColspan].cell )\n\t\t\t\t\t{\n\t\t\t\t\t\t/* Must update the applied array over the rows for the columns */\n\t\t\t\t\t\tfor ( k=0 ; k<iRowspan ; k++ )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taApplied[i+k][j+iColspan] = 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tiColspan++;\n\t\t\t\t\t}\n\t\n\t\t\t\t\t/* Do the actual expansion in the DOM */\n\t\t\t\t\t$(aoLocal[i][j].cell)\n\t\t\t\t\t\t.attr('rowspan', iRowspan)\n\t\t\t\t\t\t.attr('colspan', iColspan);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Insert the required TR nodes into the table for display\n\t *  @param {object} oSettings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnDraw( oSettings )\n\t{\n\t\t/* Provide a pre-callback function which can be used to cancel the draw is false is returned */\n\t\tvar aPreDraw = _fnCallbackFire( oSettings, 'aoPreDrawCallback', 'preDraw', [oSettings] );\n\t\tif ( $.inArray( false, aPreDraw ) !== -1 )\n\t\t{\n\t\t\t_fnProcessingDisplay( oSettings, false );\n\t\t\treturn;\n\t\t}\n\t\n\t\tvar i, iLen, n;\n\t\tvar anRows = [];\n\t\tvar iRowCount = 0;\n\t\tvar asStripeClasses = oSettings.asStripeClasses;\n\t\tvar iStripes = asStripeClasses.length;\n\t\tvar iOpenRows = oSettings.aoOpenRows.length;\n\t\tvar oLang = oSettings.oLanguage;\n\t\tvar iInitDisplayStart = oSettings.iInitDisplayStart;\n\t\tvar bServerSide = _fnDataSource( oSettings ) == 'ssp';\n\t\tvar aiDisplay = oSettings.aiDisplay;\n\t\n\t\toSettings.bDrawing = true;\n\t\n\t\t/* Check and see if we have an initial draw position from state saving */\n\t\tif ( iInitDisplayStart !== undefined && iInitDisplayStart !== -1 )\n\t\t{\n\t\t\toSettings._iDisplayStart = bServerSide ?\n\t\t\t\tiInitDisplayStart :\n\t\t\t\tiInitDisplayStart >= oSettings.fnRecordsDisplay() ?\n\t\t\t\t\t0 :\n\t\t\t\t\tiInitDisplayStart;\n\t\n\t\t\toSettings.iInitDisplayStart = -1;\n\t\t}\n\t\n\t\tvar iDisplayStart = oSettings._iDisplayStart;\n\t\tvar iDisplayEnd = oSettings.fnDisplayEnd();\n\t\n\t\t/* Server-side processing draw intercept */\n\t\tif ( oSettings.bDeferLoading )\n\t\t{\n\t\t\toSettings.bDeferLoading = false;\n\t\t\toSettings.iDraw++;\n\t\t\t_fnProcessingDisplay( oSettings, false );\n\t\t}\n\t\telse if ( !bServerSide )\n\t\t{\n\t\t\toSettings.iDraw++;\n\t\t}\n\t\telse if ( !oSettings.bDestroying && !_fnAjaxUpdate( oSettings ) )\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\n\t\tif ( aiDisplay.length !== 0 )\n\t\t{\n\t\t\tvar iStart = bServerSide ? 0 : iDisplayStart;\n\t\t\tvar iEnd = bServerSide ? oSettings.aoData.length : iDisplayEnd;\n\t\n\t\t\tfor ( var j=iStart ; j<iEnd ; j++ )\n\t\t\t{\n\t\t\t\tvar iDataIndex = aiDisplay[j];\n\t\t\t\tvar aoData = oSettings.aoData[ iDataIndex ];\n\t\t\t\tif ( aoData.nTr === null )\n\t\t\t\t{\n\t\t\t\t\t_fnCreateTr( oSettings, iDataIndex );\n\t\t\t\t}\n\t\n\t\t\t\tvar nRow = aoData.nTr;\n\t\n\t\t\t\t/* Remove the old striping classes and then add the new one */\n\t\t\t\tif ( iStripes !== 0 )\n\t\t\t\t{\n\t\t\t\t\tvar sStripe = asStripeClasses[ iRowCount % iStripes ];\n\t\t\t\t\tif ( aoData._sRowStripe != sStripe )\n\t\t\t\t\t{\n\t\t\t\t\t\t$(nRow).removeClass( aoData._sRowStripe ).addClass( sStripe );\n\t\t\t\t\t\taoData._sRowStripe = sStripe;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\t// Row callback functions - might want to manipulate the row\n\t\t\t\t// iRowCount and j are not currently documented. Are they at all\n\t\t\t\t// useful?\n\t\t\t\t_fnCallbackFire( oSettings, 'aoRowCallback', null,\n\t\t\t\t\t[nRow, aoData._aData, iRowCount, j, iDataIndex] );\n\t\n\t\t\t\tanRows.push( nRow );\n\t\t\t\tiRowCount++;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t/* Table is empty - create a row with an empty message in it */\n\t\t\tvar sZero = oLang.sZeroRecords;\n\t\t\tif ( oSettings.iDraw == 1 &&  _fnDataSource( oSettings ) == 'ajax' )\n\t\t\t{\n\t\t\t\tsZero = oLang.sLoadingRecords;\n\t\t\t}\n\t\t\telse if ( oLang.sEmptyTable && oSettings.fnRecordsTotal() === 0 )\n\t\t\t{\n\t\t\t\tsZero = oLang.sEmptyTable;\n\t\t\t}\n\t\n\t\t\tanRows[ 0 ] = $( '<tr/>', { 'class': iStripes ? asStripeClasses[0] : '' } )\n\t\t\t\t.append( $('<td />', {\n\t\t\t\t\t'valign':  'top',\n\t\t\t\t\t'colSpan': _fnVisbleColumns( oSettings ),\n\t\t\t\t\t'class':   oSettings.oClasses.sRowEmpty\n\t\t\t\t} ).html( sZero ) )[0];\n\t\t}\n\t\n\t\t/* Header and footer callbacks */\n\t\t_fnCallbackFire( oSettings, 'aoHeaderCallback', 'header', [ $(oSettings.nTHead).children('tr')[0],\n\t\t\t_fnGetDataMaster( oSettings ), iDisplayStart, iDisplayEnd, aiDisplay ] );\n\t\n\t\t_fnCallbackFire( oSettings, 'aoFooterCallback', 'footer', [ $(oSettings.nTFoot).children('tr')[0],\n\t\t\t_fnGetDataMaster( oSettings ), iDisplayStart, iDisplayEnd, aiDisplay ] );\n\t\n\t\tvar body = $(oSettings.nTBody);\n\t\n\t\tbody.children().detach();\n\t\tbody.append( $(anRows) );\n\t\n\t\t/* Call all required callback functions for the end of a draw */\n\t\t_fnCallbackFire( oSettings, 'aoDrawCallback', 'draw', [oSettings] );\n\t\n\t\t/* Draw is complete, sorting and filtering must be as well */\n\t\toSettings.bSorted = false;\n\t\toSettings.bFiltered = false;\n\t\toSettings.bDrawing = false;\n\t}\n\t\n\t\n\t/**\n\t * Redraw the table - taking account of the various features which are enabled\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param {boolean} [holdPosition] Keep the current paging position. By default\n\t *    the paging is reset to the first page\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnReDraw( settings, holdPosition )\n\t{\n\t\tvar\n\t\t\tfeatures = settings.oFeatures,\n\t\t\tsort     = features.bSort,\n\t\t\tfilter   = features.bFilter;\n\t\n\t\tif ( sort ) {\n\t\t\t_fnSort( settings );\n\t\t}\n\t\n\t\tif ( filter ) {\n\t\t\t_fnFilterComplete( settings, settings.oPreviousSearch );\n\t\t}\n\t\telse {\n\t\t\t// No filtering, so we want to just use the display master\n\t\t\tsettings.aiDisplay = settings.aiDisplayMaster.slice();\n\t\t}\n\t\n\t\tif ( holdPosition !== true ) {\n\t\t\tsettings._iDisplayStart = 0;\n\t\t}\n\t\n\t\t// Let any modules know about the draw hold position state (used by\n\t\t// scrolling internally)\n\t\tsettings._drawHold = holdPosition;\n\t\n\t\t_fnDraw( settings );\n\t\n\t\tsettings._drawHold = false;\n\t}\n\t\n\t\n\t/**\n\t * Add the options to the page HTML for the table\n\t *  @param {object} oSettings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnAddOptionsHtml ( oSettings )\n\t{\n\t\tvar classes = oSettings.oClasses;\n\t\tvar table = $(oSettings.nTable);\n\t\tvar holding = $('<div/>').insertBefore( table ); // Holding element for speed\n\t\tvar features = oSettings.oFeatures;\n\t\n\t\t// All DataTables are wrapped in a div\n\t\tvar insert = $('<div/>', {\n\t\t\tid:      oSettings.sTableId+'_wrapper',\n\t\t\t'class': classes.sWrapper + (oSettings.nTFoot ? '' : ' '+classes.sNoFooter)\n\t\t} );\n\t\n\t\toSettings.nHolding = holding[0];\n\t\toSettings.nTableWrapper = insert[0];\n\t\toSettings.nTableReinsertBefore = oSettings.nTable.nextSibling;\n\t\n\t\t/* Loop over the user set positioning and place the elements as needed */\n\t\tvar aDom = oSettings.sDom.split('');\n\t\tvar featureNode, cOption, nNewNode, cNext, sAttr, j;\n\t\tfor ( var i=0 ; i<aDom.length ; i++ )\n\t\t{\n\t\t\tfeatureNode = null;\n\t\t\tcOption = aDom[i];\n\t\n\t\t\tif ( cOption == '<' )\n\t\t\t{\n\t\t\t\t/* New container div */\n\t\t\t\tnNewNode = $('<div/>')[0];\n\t\n\t\t\t\t/* Check to see if we should append an id and/or a class name to the container */\n\t\t\t\tcNext = aDom[i+1];\n\t\t\t\tif ( cNext == \"'\" || cNext == '\"' )\n\t\t\t\t{\n\t\t\t\t\tsAttr = \"\";\n\t\t\t\t\tj = 2;\n\t\t\t\t\twhile ( aDom[i+j] != cNext )\n\t\t\t\t\t{\n\t\t\t\t\t\tsAttr += aDom[i+j];\n\t\t\t\t\t\tj++;\n\t\t\t\t\t}\n\t\n\t\t\t\t\t/* Replace jQuery UI constants @todo depreciated */\n\t\t\t\t\tif ( sAttr == \"H\" )\n\t\t\t\t\t{\n\t\t\t\t\t\tsAttr = classes.sJUIHeader;\n\t\t\t\t\t}\n\t\t\t\t\telse if ( sAttr == \"F\" )\n\t\t\t\t\t{\n\t\t\t\t\t\tsAttr = classes.sJUIFooter;\n\t\t\t\t\t}\n\t\n\t\t\t\t\t/* The attribute can be in the format of \"#id.class\", \"#id\" or \"class\" This logic\n\t\t\t\t\t * breaks the string into parts and applies them as needed\n\t\t\t\t\t */\n\t\t\t\t\tif ( sAttr.indexOf('.') != -1 )\n\t\t\t\t\t{\n\t\t\t\t\t\tvar aSplit = sAttr.split('.');\n\t\t\t\t\t\tnNewNode.id = aSplit[0].substr(1, aSplit[0].length-1);\n\t\t\t\t\t\tnNewNode.className = aSplit[1];\n\t\t\t\t\t}\n\t\t\t\t\telse if ( sAttr.charAt(0) == \"#\" )\n\t\t\t\t\t{\n\t\t\t\t\t\tnNewNode.id = sAttr.substr(1, sAttr.length-1);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tnNewNode.className = sAttr;\n\t\t\t\t\t}\n\t\n\t\t\t\t\ti += j; /* Move along the position array */\n\t\t\t\t}\n\t\n\t\t\t\tinsert.append( nNewNode );\n\t\t\t\tinsert = $(nNewNode);\n\t\t\t}\n\t\t\telse if ( cOption == '>' )\n\t\t\t{\n\t\t\t\t/* End container div */\n\t\t\t\tinsert = insert.parent();\n\t\t\t}\n\t\t\t// @todo Move options into their own plugins?\n\t\t\telse if ( cOption == 'l' && features.bPaginate && features.bLengthChange )\n\t\t\t{\n\t\t\t\t/* Length */\n\t\t\t\tfeatureNode = _fnFeatureHtmlLength( oSettings );\n\t\t\t}\n\t\t\telse if ( cOption == 'f' && features.bFilter )\n\t\t\t{\n\t\t\t\t/* Filter */\n\t\t\t\tfeatureNode = _fnFeatureHtmlFilter( oSettings );\n\t\t\t}\n\t\t\telse if ( cOption == 'r' && features.bProcessing )\n\t\t\t{\n\t\t\t\t/* pRocessing */\n\t\t\t\tfeatureNode = _fnFeatureHtmlProcessing( oSettings );\n\t\t\t}\n\t\t\telse if ( cOption == 't' )\n\t\t\t{\n\t\t\t\t/* Table */\n\t\t\t\tfeatureNode = _fnFeatureHtmlTable( oSettings );\n\t\t\t}\n\t\t\telse if ( cOption ==  'i' && features.bInfo )\n\t\t\t{\n\t\t\t\t/* Info */\n\t\t\t\tfeatureNode = _fnFeatureHtmlInfo( oSettings );\n\t\t\t}\n\t\t\telse if ( cOption == 'p' && features.bPaginate )\n\t\t\t{\n\t\t\t\t/* Pagination */\n\t\t\t\tfeatureNode = _fnFeatureHtmlPaginate( oSettings );\n\t\t\t}\n\t\t\telse if ( DataTable.ext.feature.length !== 0 )\n\t\t\t{\n\t\t\t\t/* Plug-in features */\n\t\t\t\tvar aoFeatures = DataTable.ext.feature;\n\t\t\t\tfor ( var k=0, kLen=aoFeatures.length ; k<kLen ; k++ )\n\t\t\t\t{\n\t\t\t\t\tif ( cOption == aoFeatures[k].cFeature )\n\t\t\t\t\t{\n\t\t\t\t\t\tfeatureNode = aoFeatures[k].fnInit( oSettings );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\t/* Add to the 2D features array */\n\t\t\tif ( featureNode )\n\t\t\t{\n\t\t\t\tvar aanFeatures = oSettings.aanFeatures;\n\t\n\t\t\t\tif ( ! aanFeatures[cOption] )\n\t\t\t\t{\n\t\t\t\t\taanFeatures[cOption] = [];\n\t\t\t\t}\n\t\n\t\t\t\taanFeatures[cOption].push( featureNode );\n\t\t\t\tinsert.append( featureNode );\n\t\t\t}\n\t\t}\n\t\n\t\t/* Built our DOM structure - replace the holding div with what we want */\n\t\tholding.replaceWith( insert );\n\t\toSettings.nHolding = null;\n\t}\n\t\n\t\n\t/**\n\t * Use the DOM source to create up an array of header cells. The idea here is to\n\t * create a layout grid (array) of rows x columns, which contains a reference\n\t * to the cell that that point in the grid (regardless of col/rowspan), such that\n\t * any column / row could be removed and the new grid constructed\n\t *  @param array {object} aLayout Array to store the calculated layout in\n\t *  @param {node} nThead The header/footer element for the table\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnDetectHeader ( aLayout, nThead )\n\t{\n\t\tvar nTrs = $(nThead).children('tr');\n\t\tvar nTr, nCell;\n\t\tvar i, k, l, iLen, jLen, iColShifted, iColumn, iColspan, iRowspan;\n\t\tvar bUnique;\n\t\tvar fnShiftCol = function ( a, i, j ) {\n\t\t\tvar k = a[i];\n\t                while ( k[j] ) {\n\t\t\t\tj++;\n\t\t\t}\n\t\t\treturn j;\n\t\t};\n\t\n\t\taLayout.splice( 0, aLayout.length );\n\t\n\t\t/* We know how many rows there are in the layout - so prep it */\n\t\tfor ( i=0, iLen=nTrs.length ; i<iLen ; i++ )\n\t\t{\n\t\t\taLayout.push( [] );\n\t\t}\n\t\n\t\t/* Calculate a layout array */\n\t\tfor ( i=0, iLen=nTrs.length ; i<iLen ; i++ )\n\t\t{\n\t\t\tnTr = nTrs[i];\n\t\t\tiColumn = 0;\n\t\n\t\t\t/* For every cell in the row... */\n\t\t\tnCell = nTr.firstChild;\n\t\t\twhile ( nCell ) {\n\t\t\t\tif ( nCell.nodeName.toUpperCase() == \"TD\" ||\n\t\t\t\t     nCell.nodeName.toUpperCase() == \"TH\" )\n\t\t\t\t{\n\t\t\t\t\t/* Get the col and rowspan attributes from the DOM and sanitise them */\n\t\t\t\t\tiColspan = nCell.getAttribute('colspan') * 1;\n\t\t\t\t\tiRowspan = nCell.getAttribute('rowspan') * 1;\n\t\t\t\t\tiColspan = (!iColspan || iColspan===0 || iColspan===1) ? 1 : iColspan;\n\t\t\t\t\tiRowspan = (!iRowspan || iRowspan===0 || iRowspan===1) ? 1 : iRowspan;\n\t\n\t\t\t\t\t/* There might be colspan cells already in this row, so shift our target\n\t\t\t\t\t * accordingly\n\t\t\t\t\t */\n\t\t\t\t\tiColShifted = fnShiftCol( aLayout, i, iColumn );\n\t\n\t\t\t\t\t/* Cache calculation for unique columns */\n\t\t\t\t\tbUnique = iColspan === 1 ? true : false;\n\t\n\t\t\t\t\t/* If there is col / rowspan, copy the information into the layout grid */\n\t\t\t\t\tfor ( l=0 ; l<iColspan ; l++ )\n\t\t\t\t\t{\n\t\t\t\t\t\tfor ( k=0 ; k<iRowspan ; k++ )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taLayout[i+k][iColShifted+l] = {\n\t\t\t\t\t\t\t\t\"cell\": nCell,\n\t\t\t\t\t\t\t\t\"unique\": bUnique\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\taLayout[i+k].nTr = nTr;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tnCell = nCell.nextSibling;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Get an array of unique th elements, one for each column\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param {node} nHeader automatically detect the layout from this node - optional\n\t *  @param {array} aLayout thead/tfoot layout from _fnDetectHeader - optional\n\t *  @returns array {node} aReturn list of unique th's\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnGetUniqueThs ( oSettings, nHeader, aLayout )\n\t{\n\t\tvar aReturn = [];\n\t\tif ( !aLayout )\n\t\t{\n\t\t\taLayout = oSettings.aoHeader;\n\t\t\tif ( nHeader )\n\t\t\t{\n\t\t\t\taLayout = [];\n\t\t\t\t_fnDetectHeader( aLayout, nHeader );\n\t\t\t}\n\t\t}\n\t\n\t\tfor ( var i=0, iLen=aLayout.length ; i<iLen ; i++ )\n\t\t{\n\t\t\tfor ( var j=0, jLen=aLayout[i].length ; j<jLen ; j++ )\n\t\t\t{\n\t\t\t\tif ( aLayout[i][j].unique &&\n\t\t\t\t\t (!aReturn[j] || !oSettings.bSortCellsTop) )\n\t\t\t\t{\n\t\t\t\t\taReturn[j] = aLayout[i][j].cell;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\treturn aReturn;\n\t}\n\t\n\t/**\n\t * Create an Ajax call based on the table's settings, taking into account that\n\t * parameters can have multiple forms, and backwards compatibility.\n\t *\n\t * @param {object} oSettings dataTables settings object\n\t * @param {array} data Data to send to the server, required by\n\t *     DataTables - may be augmented by developer callbacks\n\t * @param {function} fn Callback function to run when data is obtained\n\t */\n\tfunction _fnBuildAjax( oSettings, data, fn )\n\t{\n\t\t// Compatibility with 1.9-, allow fnServerData and event to manipulate\n\t\t_fnCallbackFire( oSettings, 'aoServerParams', 'serverParams', [data] );\n\t\n\t\t// Convert to object based for 1.10+ if using the old array scheme which can\n\t\t// come from server-side processing or serverParams\n\t\tif ( data && $.isArray(data) ) {\n\t\t\tvar tmp = {};\n\t\t\tvar rbracket = /(.*?)\\[\\]$/;\n\t\n\t\t\t$.each( data, function (key, val) {\n\t\t\t\tvar match = val.name.match(rbracket);\n\t\n\t\t\t\tif ( match ) {\n\t\t\t\t\t// Support for arrays\n\t\t\t\t\tvar name = match[0];\n\t\n\t\t\t\t\tif ( ! tmp[ name ] ) {\n\t\t\t\t\t\ttmp[ name ] = [];\n\t\t\t\t\t}\n\t\t\t\t\ttmp[ name ].push( val.value );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ttmp[val.name] = val.value;\n\t\t\t\t}\n\t\t\t} );\n\t\t\tdata = tmp;\n\t\t}\n\t\n\t\tvar ajaxData;\n\t\tvar ajax = oSettings.ajax;\n\t\tvar instance = oSettings.oInstance;\n\t\tvar callback = function ( json ) {\n\t\t\t_fnCallbackFire( oSettings, null, 'xhr', [oSettings, json, oSettings.jqXHR] );\n\t\t\tfn( json );\n\t\t};\n\t\n\t\tif ( $.isPlainObject( ajax ) && ajax.data )\n\t\t{\n\t\t\tajaxData = ajax.data;\n\t\n\t\t\tvar newData = typeof ajaxData === 'function' ?\n\t\t\t\tajaxData( data, oSettings ) :  // fn can manipulate data or return\n\t\t\t\tajaxData;                      // an object object or array to merge\n\t\n\t\t\t// If the function returned something, use that alone\n\t\t\tdata = typeof ajaxData === 'function' && newData ?\n\t\t\t\tnewData :\n\t\t\t\t$.extend( true, data, newData );\n\t\n\t\t\t// Remove the data property as we've resolved it already and don't want\n\t\t\t// jQuery to do it again (it is restored at the end of the function)\n\t\t\tdelete ajax.data;\n\t\t}\n\t\n\t\tvar baseAjax = {\n\t\t\t\"data\": data,\n\t\t\t\"success\": function (json) {\n\t\t\t\tvar error = json.error || json.sError;\n\t\t\t\tif ( error ) {\n\t\t\t\t\t_fnLog( oSettings, 0, error );\n\t\t\t\t}\n\t\n\t\t\t\toSettings.json = json;\n\t\t\t\tcallback( json );\n\t\t\t},\n\t\t\t\"dataType\": \"json\",\n\t\t\t\"cache\": false,\n\t\t\t\"type\": oSettings.sServerMethod,\n\t\t\t\"error\": function (xhr, error, thrown) {\n\t\t\t\tvar ret = _fnCallbackFire( oSettings, null, 'xhr', [oSettings, null, oSettings.jqXHR] );\n\t\n\t\t\t\tif ( $.inArray( true, ret ) === -1 ) {\n\t\t\t\t\tif ( error == \"parsererror\" ) {\n\t\t\t\t\t\t_fnLog( oSettings, 0, 'Invalid JSON response', 1 );\n\t\t\t\t\t}\n\t\t\t\t\telse if ( xhr.readyState === 4 ) {\n\t\t\t\t\t\t_fnLog( oSettings, 0, 'Ajax error', 7 );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\t_fnProcessingDisplay( oSettings, false );\n\t\t\t}\n\t\t};\n\t\n\t\t// Store the data submitted for the API\n\t\toSettings.oAjaxData = data;\n\t\n\t\t// Allow plug-ins and external processes to modify the data\n\t\t_fnCallbackFire( oSettings, null, 'preXhr', [oSettings, data] );\n\t\n\t\tif ( oSettings.fnServerData )\n\t\t{\n\t\t\t// DataTables 1.9- compatibility\n\t\t\toSettings.fnServerData.call( instance,\n\t\t\t\toSettings.sAjaxSource,\n\t\t\t\t$.map( data, function (val, key) { // Need to convert back to 1.9 trad format\n\t\t\t\t\treturn { name: key, value: val };\n\t\t\t\t} ),\n\t\t\t\tcallback,\n\t\t\t\toSettings\n\t\t\t);\n\t\t}\n\t\telse if ( oSettings.sAjaxSource || typeof ajax === 'string' )\n\t\t{\n\t\t\t// DataTables 1.9- compatibility\n\t\t\toSettings.jqXHR = $.ajax( $.extend( baseAjax, {\n\t\t\t\turl: ajax || oSettings.sAjaxSource\n\t\t\t} ) );\n\t\t}\n\t\telse if ( typeof ajax === 'function' )\n\t\t{\n\t\t\t// Is a function - let the caller define what needs to be done\n\t\t\toSettings.jqXHR = ajax.call( instance, data, callback, oSettings );\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Object to extend the base settings\n\t\t\toSettings.jqXHR = $.ajax( $.extend( baseAjax, ajax ) );\n\t\n\t\t\t// Restore for next time around\n\t\t\tajax.data = ajaxData;\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Update the table using an Ajax call\n\t *  @param {object} settings dataTables settings object\n\t *  @returns {boolean} Block the table drawing or not\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnAjaxUpdate( settings )\n\t{\n\t\tif ( settings.bAjaxDataGet ) {\n\t\t\tsettings.iDraw++;\n\t\t\t_fnProcessingDisplay( settings, true );\n\t\n\t\t\t_fnBuildAjax(\n\t\t\t\tsettings,\n\t\t\t\t_fnAjaxParameters( settings ),\n\t\t\t\tfunction(json) {\n\t\t\t\t\t_fnAjaxUpdateDraw( settings, json );\n\t\t\t\t}\n\t\t\t);\n\t\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\t\n\t\n\t/**\n\t * Build up the parameters in an object needed for a server-side processing\n\t * request. Note that this is basically done twice, is different ways - a modern\n\t * method which is used by default in DataTables 1.10 which uses objects and\n\t * arrays, or the 1.9- method with is name / value pairs. 1.9 method is used if\n\t * the sAjaxSource option is used in the initialisation, or the legacyAjax\n\t * option is set.\n\t *  @param {object} oSettings dataTables settings object\n\t *  @returns {bool} block the table drawing or not\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnAjaxParameters( settings )\n\t{\n\t\tvar\n\t\t\tcolumns = settings.aoColumns,\n\t\t\tcolumnCount = columns.length,\n\t\t\tfeatures = settings.oFeatures,\n\t\t\tpreSearch = settings.oPreviousSearch,\n\t\t\tpreColSearch = settings.aoPreSearchCols,\n\t\t\ti, data = [], dataProp, column, columnSearch,\n\t\t\tsort = _fnSortFlatten( settings ),\n\t\t\tdisplayStart = settings._iDisplayStart,\n\t\t\tdisplayLength = features.bPaginate !== false ?\n\t\t\t\tsettings._iDisplayLength :\n\t\t\t\t-1;\n\t\n\t\tvar param = function ( name, value ) {\n\t\t\tdata.push( { 'name': name, 'value': value } );\n\t\t};\n\t\n\t\t// DataTables 1.9- compatible method\n\t\tparam( 'sEcho',          settings.iDraw );\n\t\tparam( 'iColumns',       columnCount );\n\t\tparam( 'sColumns',       _pluck( columns, 'sName' ).join(',') );\n\t\tparam( 'iDisplayStart',  displayStart );\n\t\tparam( 'iDisplayLength', displayLength );\n\t\n\t\t// DataTables 1.10+ method\n\t\tvar d = {\n\t\t\tdraw:    settings.iDraw,\n\t\t\tcolumns: [],\n\t\t\torder:   [],\n\t\t\tstart:   displayStart,\n\t\t\tlength:  displayLength,\n\t\t\tsearch:  {\n\t\t\t\tvalue: preSearch.sSearch,\n\t\t\t\tregex: preSearch.bRegex\n\t\t\t}\n\t\t};\n\t\n\t\tfor ( i=0 ; i<columnCount ; i++ ) {\n\t\t\tcolumn = columns[i];\n\t\t\tcolumnSearch = preColSearch[i];\n\t\t\tdataProp = typeof column.mData==\"function\" ? 'function' : column.mData ;\n\t\n\t\t\td.columns.push( {\n\t\t\t\tdata:       dataProp,\n\t\t\t\tname:       column.sName,\n\t\t\t\tsearchable: column.bSearchable,\n\t\t\t\torderable:  column.bSortable,\n\t\t\t\tsearch:     {\n\t\t\t\t\tvalue: columnSearch.sSearch,\n\t\t\t\t\tregex: columnSearch.bRegex\n\t\t\t\t}\n\t\t\t} );\n\t\n\t\t\tparam( \"mDataProp_\"+i, dataProp );\n\t\n\t\t\tif ( features.bFilter ) {\n\t\t\t\tparam( 'sSearch_'+i,     columnSearch.sSearch );\n\t\t\t\tparam( 'bRegex_'+i,      columnSearch.bRegex );\n\t\t\t\tparam( 'bSearchable_'+i, column.bSearchable );\n\t\t\t}\n\t\n\t\t\tif ( features.bSort ) {\n\t\t\t\tparam( 'bSortable_'+i, column.bSortable );\n\t\t\t}\n\t\t}\n\t\n\t\tif ( features.bFilter ) {\n\t\t\tparam( 'sSearch', preSearch.sSearch );\n\t\t\tparam( 'bRegex', preSearch.bRegex );\n\t\t}\n\t\n\t\tif ( features.bSort ) {\n\t\t\t$.each( sort, function ( i, val ) {\n\t\t\t\td.order.push( { column: val.col, dir: val.dir } );\n\t\n\t\t\t\tparam( 'iSortCol_'+i, val.col );\n\t\t\t\tparam( 'sSortDir_'+i, val.dir );\n\t\t\t} );\n\t\n\t\t\tparam( 'iSortingCols', sort.length );\n\t\t}\n\t\n\t\t// If the legacy.ajax parameter is null, then we automatically decide which\n\t\t// form to use, based on sAjaxSource\n\t\tvar legacy = DataTable.ext.legacy.ajax;\n\t\tif ( legacy === null ) {\n\t\t\treturn settings.sAjaxSource ? data : d;\n\t\t}\n\t\n\t\t// Otherwise, if legacy has been specified then we use that to decide on the\n\t\t// form\n\t\treturn legacy ? data : d;\n\t}\n\t\n\t\n\t/**\n\t * Data the data from the server (nuking the old) and redraw the table\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param {object} json json data return from the server.\n\t *  @param {string} json.sEcho Tracking flag for DataTables to match requests\n\t *  @param {int} json.iTotalRecords Number of records in the data set, not accounting for filtering\n\t *  @param {int} json.iTotalDisplayRecords Number of records in the data set, accounting for filtering\n\t *  @param {array} json.aaData The data to display on this page\n\t *  @param {string} [json.sColumns] Column ordering (sName, comma separated)\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnAjaxUpdateDraw ( settings, json )\n\t{\n\t\t// v1.10 uses camelCase variables, while 1.9 uses Hungarian notation.\n\t\t// Support both\n\t\tvar compat = function ( old, modern ) {\n\t\t\treturn json[old] !== undefined ? json[old] : json[modern];\n\t\t};\n\t\n\t\tvar data = _fnAjaxDataSrc( settings, json );\n\t\tvar draw            = compat( 'sEcho',                'draw' );\n\t\tvar recordsTotal    = compat( 'iTotalRecords',        'recordsTotal' );\n\t\tvar recordsFiltered = compat( 'iTotalDisplayRecords', 'recordsFiltered' );\n\t\n\t\tif ( draw !== undefined ) {\n\t\t\t// Protect against out of sequence returns\n\t\t\tif ( draw*1 < settings.iDraw ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tsettings.iDraw = draw * 1;\n\t\t}\n\t\n\t\t_fnClearTable( settings );\n\t\tsettings._iRecordsTotal   = parseInt(recordsTotal, 10);\n\t\tsettings._iRecordsDisplay = parseInt(recordsFiltered, 10);\n\t\n\t\tfor ( var i=0, ien=data.length ; i<ien ; i++ ) {\n\t\t\t_fnAddData( settings, data[i] );\n\t\t}\n\t\tsettings.aiDisplay = settings.aiDisplayMaster.slice();\n\t\n\t\tsettings.bAjaxDataGet = false;\n\t\t_fnDraw( settings );\n\t\n\t\tif ( ! settings._bInitComplete ) {\n\t\t\t_fnInitComplete( settings, json );\n\t\t}\n\t\n\t\tsettings.bAjaxDataGet = true;\n\t\t_fnProcessingDisplay( settings, false );\n\t}\n\t\n\t\n\t/**\n\t * Get the data from the JSON data source to use for drawing a table. Using\n\t * `_fnGetObjectDataFn` allows the data to be sourced from a property of the\n\t * source object, or from a processing function.\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param  {object} json Data source object / array from the server\n\t *  @return {array} Array of data to use\n\t */\n\tfunction _fnAjaxDataSrc ( oSettings, json )\n\t{\n\t\tvar dataSrc = $.isPlainObject( oSettings.ajax ) && oSettings.ajax.dataSrc !== undefined ?\n\t\t\toSettings.ajax.dataSrc :\n\t\t\toSettings.sAjaxDataProp; // Compatibility with 1.9-.\n\t\n\t\t// Compatibility with 1.9-. In order to read from aaData, check if the\n\t\t// default has been changed, if not, check for aaData\n\t\tif ( dataSrc === 'data' ) {\n\t\t\treturn json.aaData || json[dataSrc];\n\t\t}\n\t\n\t\treturn dataSrc !== \"\" ?\n\t\t\t_fnGetObjectDataFn( dataSrc )( json ) :\n\t\t\tjson;\n\t}\n\t\n\t/**\n\t * Generate the node required for filtering text\n\t *  @returns {node} Filter control element\n\t *  @param {object} oSettings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnFeatureHtmlFilter ( settings )\n\t{\n\t\tvar classes = settings.oClasses;\n\t\tvar tableId = settings.sTableId;\n\t\tvar language = settings.oLanguage;\n\t\tvar previousSearch = settings.oPreviousSearch;\n\t\tvar features = settings.aanFeatures;\n\t\tvar input = '<input type=\"search\" class=\"'+classes.sFilterInput+'\"/>';\n\t\n\t\tvar str = language.sSearch;\n\t\tstr = str.match(/_INPUT_/) ?\n\t\t\tstr.replace('_INPUT_', input) :\n\t\t\tstr+input;\n\t\n\t\tvar filter = $('<div/>', {\n\t\t\t\t'id': ! features.f ? tableId+'_filter' : null,\n\t\t\t\t'class': classes.sFilter\n\t\t\t} )\n\t\t\t.append( $('<label/>' ).append( str ) );\n\t\n\t\tvar searchFn = function() {\n\t\t\t/* Update all other filter input elements for the new display */\n\t\t\tvar n = features.f;\n\t\t\tvar val = !this.value ? \"\" : this.value; // mental IE8 fix :-(\n\t\n\t\t\t/* Now do the filter */\n\t\t\tif ( val != previousSearch.sSearch ) {\n\t\t\t\t_fnFilterComplete( settings, {\n\t\t\t\t\t\"sSearch\": val,\n\t\t\t\t\t\"bRegex\": previousSearch.bRegex,\n\t\t\t\t\t\"bSmart\": previousSearch.bSmart ,\n\t\t\t\t\t\"bCaseInsensitive\": previousSearch.bCaseInsensitive\n\t\t\t\t} );\n\t\n\t\t\t\t// Need to redraw, without resorting\n\t\t\t\tsettings._iDisplayStart = 0;\n\t\t\t\t_fnDraw( settings );\n\t\t\t}\n\t\t};\n\t\n\t\tvar searchDelay = settings.searchDelay !== null ?\n\t\t\tsettings.searchDelay :\n\t\t\t_fnDataSource( settings ) === 'ssp' ?\n\t\t\t\t400 :\n\t\t\t\t0;\n\t\n\t\tvar jqFilter = $('input', filter)\n\t\t\t.val( previousSearch.sSearch )\n\t\t\t.attr( 'placeholder', language.sSearchPlaceholder )\n\t\t\t.on(\n\t\t\t\t'keyup.DT search.DT input.DT paste.DT cut.DT',\n\t\t\t\tsearchDelay ?\n\t\t\t\t\t_fnThrottle( searchFn, searchDelay ) :\n\t\t\t\t\tsearchFn\n\t\t\t)\n\t\t\t.on( 'mouseup', function(e) {\n\t\t\t\t// Edge fix! Edge 17 does not trigger anything other than mouse events when clicking\n\t\t\t\t// on the clear icon (Edge bug 17584515). This is safe in other browsers as `searchFn`\n\t\t\t\t// checks the value to see if it has changed. In other browsers it won't have.\n\t\t\t\tsetTimeout( function () {\n\t\t\t\t\tsearchFn.call(jqFilter[0]);\n\t\t\t\t}, 10);\n\t\t\t} )\n\t\t\t.on( 'keypress.DT', function(e) {\n\t\t\t\t/* Prevent form submission */\n\t\t\t\tif ( e.keyCode == 13 ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} )\n\t\t\t.attr('aria-controls', tableId);\n\t\n\t\t// Update the input elements whenever the table is filtered\n\t\t$(settings.nTable).on( 'search.dt.DT', function ( ev, s ) {\n\t\t\tif ( settings === s ) {\n\t\t\t\t// IE9 throws an 'unknown error' if document.activeElement is used\n\t\t\t\t// inside an iframe or frame...\n\t\t\t\ttry {\n\t\t\t\t\tif ( jqFilter[0] !== document.activeElement ) {\n\t\t\t\t\t\tjqFilter.val( previousSearch.sSearch );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcatch ( e ) {}\n\t\t\t}\n\t\t} );\n\t\n\t\treturn filter[0];\n\t}\n\t\n\t\n\t/**\n\t * Filter the table using both the global filter and column based filtering\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param {object} oSearch search information\n\t *  @param {int} [iForce] force a research of the master array (1) or not (undefined or 0)\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnFilterComplete ( oSettings, oInput, iForce )\n\t{\n\t\tvar oPrevSearch = oSettings.oPreviousSearch;\n\t\tvar aoPrevSearch = oSettings.aoPreSearchCols;\n\t\tvar fnSaveFilter = function ( oFilter ) {\n\t\t\t/* Save the filtering values */\n\t\t\toPrevSearch.sSearch = oFilter.sSearch;\n\t\t\toPrevSearch.bRegex = oFilter.bRegex;\n\t\t\toPrevSearch.bSmart = oFilter.bSmart;\n\t\t\toPrevSearch.bCaseInsensitive = oFilter.bCaseInsensitive;\n\t\t};\n\t\tvar fnRegex = function ( o ) {\n\t\t\t// Backwards compatibility with the bEscapeRegex option\n\t\t\treturn o.bEscapeRegex !== undefined ? !o.bEscapeRegex : o.bRegex;\n\t\t};\n\t\n\t\t// Resolve any column types that are unknown due to addition or invalidation\n\t\t// @todo As per sort - can this be moved into an event handler?\n\t\t_fnColumnTypes( oSettings );\n\t\n\t\t/* In server-side processing all filtering is done by the server, so no point hanging around here */\n\t\tif ( _fnDataSource( oSettings ) != 'ssp' )\n\t\t{\n\t\t\t/* Global filter */\n\t\t\t_fnFilter( oSettings, oInput.sSearch, iForce, fnRegex(oInput), oInput.bSmart, oInput.bCaseInsensitive );\n\t\t\tfnSaveFilter( oInput );\n\t\n\t\t\t/* Now do the individual column filter */\n\t\t\tfor ( var i=0 ; i<aoPrevSearch.length ; i++ )\n\t\t\t{\n\t\t\t\t_fnFilterColumn( oSettings, aoPrevSearch[i].sSearch, i, fnRegex(aoPrevSearch[i]),\n\t\t\t\t\taoPrevSearch[i].bSmart, aoPrevSearch[i].bCaseInsensitive );\n\t\t\t}\n\t\n\t\t\t/* Custom filtering */\n\t\t\t_fnFilterCustom( oSettings );\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfnSaveFilter( oInput );\n\t\t}\n\t\n\t\t/* Tell the draw function we have been filtering */\n\t\toSettings.bFiltered = true;\n\t\t_fnCallbackFire( oSettings, null, 'search', [oSettings] );\n\t}\n\t\n\t\n\t/**\n\t * Apply custom filtering functions\n\t *  @param {object} oSettings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnFilterCustom( settings )\n\t{\n\t\tvar filters = DataTable.ext.search;\n\t\tvar displayRows = settings.aiDisplay;\n\t\tvar row, rowIdx;\n\t\n\t\tfor ( var i=0, ien=filters.length ; i<ien ; i++ ) {\n\t\t\tvar rows = [];\n\t\n\t\t\t// Loop over each row and see if it should be included\n\t\t\tfor ( var j=0, jen=displayRows.length ; j<jen ; j++ ) {\n\t\t\t\trowIdx = displayRows[ j ];\n\t\t\t\trow = settings.aoData[ rowIdx ];\n\t\n\t\t\t\tif ( filters[i]( settings, row._aFilterData, rowIdx, row._aData, j ) ) {\n\t\t\t\t\trows.push( rowIdx );\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\t// So the array reference doesn't break set the results into the\n\t\t\t// existing array\n\t\t\tdisplayRows.length = 0;\n\t\t\t$.merge( displayRows, rows );\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Filter the table on a per-column basis\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param {string} sInput string to filter on\n\t *  @param {int} iColumn column to filter\n\t *  @param {bool} bRegex treat search string as a regular expression or not\n\t *  @param {bool} bSmart use smart filtering or not\n\t *  @param {bool} bCaseInsensitive Do case insenstive matching or not\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnFilterColumn ( settings, searchStr, colIdx, regex, smart, caseInsensitive )\n\t{\n\t\tif ( searchStr === '' ) {\n\t\t\treturn;\n\t\t}\n\t\n\t\tvar data;\n\t\tvar out = [];\n\t\tvar display = settings.aiDisplay;\n\t\tvar rpSearch = _fnFilterCreateSearch( searchStr, regex, smart, caseInsensitive );\n\t\n\t\tfor ( var i=0 ; i<display.length ; i++ ) {\n\t\t\tdata = settings.aoData[ display[i] ]._aFilterData[ colIdx ];\n\t\n\t\t\tif ( rpSearch.test( data ) ) {\n\t\t\t\tout.push( display[i] );\n\t\t\t}\n\t\t}\n\t\n\t\tsettings.aiDisplay = out;\n\t}\n\t\n\t\n\t/**\n\t * Filter the data table based on user input and draw the table\n\t *  @param {object} settings dataTables settings object\n\t *  @param {string} input string to filter on\n\t *  @param {int} force optional - force a research of the master array (1) or not (undefined or 0)\n\t *  @param {bool} regex treat as a regular expression or not\n\t *  @param {bool} smart perform smart filtering or not\n\t *  @param {bool} caseInsensitive Do case insenstive matching or not\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnFilter( settings, input, force, regex, smart, caseInsensitive )\n\t{\n\t\tvar rpSearch = _fnFilterCreateSearch( input, regex, smart, caseInsensitive );\n\t\tvar prevSearch = settings.oPreviousSearch.sSearch;\n\t\tvar displayMaster = settings.aiDisplayMaster;\n\t\tvar display, invalidated, i;\n\t\tvar filtered = [];\n\t\n\t\t// Need to take account of custom filtering functions - always filter\n\t\tif ( DataTable.ext.search.length !== 0 ) {\n\t\t\tforce = true;\n\t\t}\n\t\n\t\t// Check if any of the rows were invalidated\n\t\tinvalidated = _fnFilterData( settings );\n\t\n\t\t// If the input is blank - we just want the full data set\n\t\tif ( input.length <= 0 ) {\n\t\t\tsettings.aiDisplay = displayMaster.slice();\n\t\t}\n\t\telse {\n\t\t\t// New search - start from the master array\n\t\t\tif ( invalidated ||\n\t\t\t\t force ||\n\t\t\t\t regex ||\n\t\t\t\t prevSearch.length > input.length ||\n\t\t\t\t input.indexOf(prevSearch) !== 0 ||\n\t\t\t\t settings.bSorted // On resort, the display master needs to be\n\t\t\t\t                  // re-filtered since indexes will have changed\n\t\t\t) {\n\t\t\t\tsettings.aiDisplay = displayMaster.slice();\n\t\t\t}\n\t\n\t\t\t// Search the display array\n\t\t\tdisplay = settings.aiDisplay;\n\t\n\t\t\tfor ( i=0 ; i<display.length ; i++ ) {\n\t\t\t\tif ( rpSearch.test( settings.aoData[ display[i] ]._sFilterRow ) ) {\n\t\t\t\t\tfiltered.push( display[i] );\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tsettings.aiDisplay = filtered;\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Build a regular expression object suitable for searching a table\n\t *  @param {string} sSearch string to search for\n\t *  @param {bool} bRegex treat as a regular expression or not\n\t *  @param {bool} bSmart perform smart filtering or not\n\t *  @param {bool} bCaseInsensitive Do case insensitive matching or not\n\t *  @returns {RegExp} constructed object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnFilterCreateSearch( search, regex, smart, caseInsensitive )\n\t{\n\t\tsearch = regex ?\n\t\t\tsearch :\n\t\t\t_fnEscapeRegex( search );\n\t\t\n\t\tif ( smart ) {\n\t\t\t/* For smart filtering we want to allow the search to work regardless of\n\t\t\t * word order. We also want double quoted text to be preserved, so word\n\t\t\t * order is important - a la google. So this is what we want to\n\t\t\t * generate:\n\t\t\t * \n\t\t\t * ^(?=.*?\\bone\\b)(?=.*?\\btwo three\\b)(?=.*?\\bfour\\b).*$\n\t\t\t */\n\t\t\tvar a = $.map( search.match( /\"[^\"]+\"|[^ ]+/g ) || [''], function ( word ) {\n\t\t\t\tif ( word.charAt(0) === '\"' ) {\n\t\t\t\t\tvar m = word.match( /^\"(.*)\"$/ );\n\t\t\t\t\tword = m ? m[1] : word;\n\t\t\t\t}\n\t\n\t\t\t\treturn word.replace('\"', '');\n\t\t\t} );\n\t\n\t\t\tsearch = '^(?=.*?'+a.join( ')(?=.*?' )+').*$';\n\t\t}\n\t\n\t\treturn new RegExp( search, caseInsensitive ? 'i' : '' );\n\t}\n\t\n\t\n\t/**\n\t * Escape a string such that it can be used in a regular expression\n\t *  @param {string} sVal string to escape\n\t *  @returns {string} escaped string\n\t *  @memberof DataTable#oApi\n\t */\n\tvar _fnEscapeRegex = DataTable.util.escapeRegex;\n\t\n\tvar __filter_div = $('<div>')[0];\n\tvar __filter_div_textContent = __filter_div.textContent !== undefined;\n\t\n\t// Update the filtering data for each row if needed (by invalidation or first run)\n\tfunction _fnFilterData ( settings )\n\t{\n\t\tvar columns = settings.aoColumns;\n\t\tvar column;\n\t\tvar i, j, ien, jen, filterData, cellData, row;\n\t\tvar fomatters = DataTable.ext.type.search;\n\t\tvar wasInvalidated = false;\n\t\n\t\tfor ( i=0, ien=settings.aoData.length ; i<ien ; i++ ) {\n\t\t\trow = settings.aoData[i];\n\t\n\t\t\tif ( ! row._aFilterData ) {\n\t\t\t\tfilterData = [];\n\t\n\t\t\t\tfor ( j=0, jen=columns.length ; j<jen ; j++ ) {\n\t\t\t\t\tcolumn = columns[j];\n\t\n\t\t\t\t\tif ( column.bSearchable ) {\n\t\t\t\t\t\tcellData = _fnGetCellData( settings, i, j, 'filter' );\n\t\n\t\t\t\t\t\tif ( fomatters[ column.sType ] ) {\n\t\t\t\t\t\t\tcellData = fomatters[ column.sType ]( cellData );\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t// Search in DataTables 1.10 is string based. In 1.11 this\n\t\t\t\t\t\t// should be altered to also allow strict type checking.\n\t\t\t\t\t\tif ( cellData === null ) {\n\t\t\t\t\t\t\tcellData = '';\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tif ( typeof cellData !== 'string' && cellData.toString ) {\n\t\t\t\t\t\t\tcellData = cellData.toString();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tcellData = '';\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// If it looks like there is an HTML entity in the string,\n\t\t\t\t\t// attempt to decode it so sorting works as expected. Note that\n\t\t\t\t\t// we could use a single line of jQuery to do this, but the DOM\n\t\t\t\t\t// method used here is much faster http://jsperf.com/html-decode\n\t\t\t\t\tif ( cellData.indexOf && cellData.indexOf('&') !== -1 ) {\n\t\t\t\t\t\t__filter_div.innerHTML = cellData;\n\t\t\t\t\t\tcellData = __filter_div_textContent ?\n\t\t\t\t\t\t\t__filter_div.textContent :\n\t\t\t\t\t\t\t__filter_div.innerText;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif ( cellData.replace ) {\n\t\t\t\t\t\tcellData = cellData.replace(/[\\r\\n\\u2028]/g, '');\n\t\t\t\t\t}\n\t\n\t\t\t\t\tfilterData.push( cellData );\n\t\t\t\t}\n\t\n\t\t\t\trow._aFilterData = filterData;\n\t\t\t\trow._sFilterRow = filterData.join('  ');\n\t\t\t\twasInvalidated = true;\n\t\t\t}\n\t\t}\n\t\n\t\treturn wasInvalidated;\n\t}\n\t\n\t\n\t/**\n\t * Convert from the internal Hungarian notation to camelCase for external\n\t * interaction\n\t *  @param {object} obj Object to convert\n\t *  @returns {object} Inverted object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnSearchToCamel ( obj )\n\t{\n\t\treturn {\n\t\t\tsearch:          obj.sSearch,\n\t\t\tsmart:           obj.bSmart,\n\t\t\tregex:           obj.bRegex,\n\t\t\tcaseInsensitive: obj.bCaseInsensitive\n\t\t};\n\t}\n\t\n\t\n\t\n\t/**\n\t * Convert from camelCase notation to the internal Hungarian. We could use the\n\t * Hungarian convert function here, but this is cleaner\n\t *  @param {object} obj Object to convert\n\t *  @returns {object} Inverted object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnSearchToHung ( obj )\n\t{\n\t\treturn {\n\t\t\tsSearch:          obj.search,\n\t\t\tbSmart:           obj.smart,\n\t\t\tbRegex:           obj.regex,\n\t\t\tbCaseInsensitive: obj.caseInsensitive\n\t\t};\n\t}\n\t\n\t/**\n\t * Generate the node required for the info display\n\t *  @param {object} oSettings dataTables settings object\n\t *  @returns {node} Information element\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnFeatureHtmlInfo ( settings )\n\t{\n\t\tvar\n\t\t\ttid = settings.sTableId,\n\t\t\tnodes = settings.aanFeatures.i,\n\t\t\tn = $('<div/>', {\n\t\t\t\t'class': settings.oClasses.sInfo,\n\t\t\t\t'id': ! nodes ? tid+'_info' : null\n\t\t\t} );\n\t\n\t\tif ( ! nodes ) {\n\t\t\t// Update display on each draw\n\t\t\tsettings.aoDrawCallback.push( {\n\t\t\t\t\"fn\": _fnUpdateInfo,\n\t\t\t\t\"sName\": \"information\"\n\t\t\t} );\n\t\n\t\t\tn\n\t\t\t\t.attr( 'role', 'status' )\n\t\t\t\t.attr( 'aria-live', 'polite' );\n\t\n\t\t\t// Table is described by our info div\n\t\t\t$(settings.nTable).attr( 'aria-describedby', tid+'_info' );\n\t\t}\n\t\n\t\treturn n[0];\n\t}\n\t\n\t\n\t/**\n\t * Update the information elements in the display\n\t *  @param {object} settings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnUpdateInfo ( settings )\n\t{\n\t\t/* Show information about the table */\n\t\tvar nodes = settings.aanFeatures.i;\n\t\tif ( nodes.length === 0 ) {\n\t\t\treturn;\n\t\t}\n\t\n\t\tvar\n\t\t\tlang  = settings.oLanguage,\n\t\t\tstart = settings._iDisplayStart+1,\n\t\t\tend   = settings.fnDisplayEnd(),\n\t\t\tmax   = settings.fnRecordsTotal(),\n\t\t\ttotal = settings.fnRecordsDisplay(),\n\t\t\tout   = total ?\n\t\t\t\tlang.sInfo :\n\t\t\t\tlang.sInfoEmpty;\n\t\n\t\tif ( total !== max ) {\n\t\t\t/* Record set after filtering */\n\t\t\tout += ' ' + lang.sInfoFiltered;\n\t\t}\n\t\n\t\t// Convert the macros\n\t\tout += lang.sInfoPostFix;\n\t\tout = _fnInfoMacros( settings, out );\n\t\n\t\tvar callback = lang.fnInfoCallback;\n\t\tif ( callback !== null ) {\n\t\t\tout = callback.call( settings.oInstance,\n\t\t\t\tsettings, start, end, max, total, out\n\t\t\t);\n\t\t}\n\t\n\t\t$(nodes).html( out );\n\t}\n\t\n\t\n\tfunction _fnInfoMacros ( settings, str )\n\t{\n\t\t// When infinite scrolling, we are always starting at 1. _iDisplayStart is used only\n\t\t// internally\n\t\tvar\n\t\t\tformatter  = settings.fnFormatNumber,\n\t\t\tstart      = settings._iDisplayStart+1,\n\t\t\tlen        = settings._iDisplayLength,\n\t\t\tvis        = settings.fnRecordsDisplay(),\n\t\t\tall        = len === -1;\n\t\n\t\treturn str.\n\t\t\treplace(/_START_/g, formatter.call( settings, start ) ).\n\t\t\treplace(/_END_/g,   formatter.call( settings, settings.fnDisplayEnd() ) ).\n\t\t\treplace(/_MAX_/g,   formatter.call( settings, settings.fnRecordsTotal() ) ).\n\t\t\treplace(/_TOTAL_/g, formatter.call( settings, vis ) ).\n\t\t\treplace(/_PAGE_/g,  formatter.call( settings, all ? 1 : Math.ceil( start / len ) ) ).\n\t\t\treplace(/_PAGES_/g, formatter.call( settings, all ? 1 : Math.ceil( vis / len ) ) );\n\t}\n\t\n\t\n\t\n\t/**\n\t * Draw the table for the first time, adding all required features\n\t *  @param {object} settings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnInitialise ( settings )\n\t{\n\t\tvar i, iLen, iAjaxStart=settings.iInitDisplayStart;\n\t\tvar columns = settings.aoColumns, column;\n\t\tvar features = settings.oFeatures;\n\t\tvar deferLoading = settings.bDeferLoading; // value modified by the draw\n\t\n\t\t/* Ensure that the table data is fully initialised */\n\t\tif ( ! settings.bInitialised ) {\n\t\t\tsetTimeout( function(){ _fnInitialise( settings ); }, 200 );\n\t\t\treturn;\n\t\t}\n\t\n\t\t/* Show the display HTML options */\n\t\t_fnAddOptionsHtml( settings );\n\t\n\t\t/* Build and draw the header / footer for the table */\n\t\t_fnBuildHead( settings );\n\t\t_fnDrawHead( settings, settings.aoHeader );\n\t\t_fnDrawHead( settings, settings.aoFooter );\n\t\n\t\t/* Okay to show that something is going on now */\n\t\t_fnProcessingDisplay( settings, true );\n\t\n\t\t/* Calculate sizes for columns */\n\t\tif ( features.bAutoWidth ) {\n\t\t\t_fnCalculateColumnWidths( settings );\n\t\t}\n\t\n\t\tfor ( i=0, iLen=columns.length ; i<iLen ; i++ ) {\n\t\t\tcolumn = columns[i];\n\t\n\t\t\tif ( column.sWidth ) {\n\t\t\t\tcolumn.nTh.style.width = _fnStringToCss( column.sWidth );\n\t\t\t}\n\t\t}\n\t\n\t\t_fnCallbackFire( settings, null, 'preInit', [settings] );\n\t\n\t\t// If there is default sorting required - let's do it. The sort function\n\t\t// will do the drawing for us. Otherwise we draw the table regardless of the\n\t\t// Ajax source - this allows the table to look initialised for Ajax sourcing\n\t\t// data (show 'loading' message possibly)\n\t\t_fnReDraw( settings );\n\t\n\t\t// Server-side processing init complete is done by _fnAjaxUpdateDraw\n\t\tvar dataSrc = _fnDataSource( settings );\n\t\tif ( dataSrc != 'ssp' || deferLoading ) {\n\t\t\t// if there is an ajax source load the data\n\t\t\tif ( dataSrc == 'ajax' ) {\n\t\t\t\t_fnBuildAjax( settings, [], function(json) {\n\t\t\t\t\tvar aData = _fnAjaxDataSrc( settings, json );\n\t\n\t\t\t\t\t// Got the data - add it to the table\n\t\t\t\t\tfor ( i=0 ; i<aData.length ; i++ ) {\n\t\t\t\t\t\t_fnAddData( settings, aData[i] );\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// Reset the init display for cookie saving. We've already done\n\t\t\t\t\t// a filter, and therefore cleared it before. So we need to make\n\t\t\t\t\t// it appear 'fresh'\n\t\t\t\t\tsettings.iInitDisplayStart = iAjaxStart;\n\t\n\t\t\t\t\t_fnReDraw( settings );\n\t\n\t\t\t\t\t_fnProcessingDisplay( settings, false );\n\t\t\t\t\t_fnInitComplete( settings, json );\n\t\t\t\t}, settings );\n\t\t\t}\n\t\t\telse {\n\t\t\t\t_fnProcessingDisplay( settings, false );\n\t\t\t\t_fnInitComplete( settings );\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Draw the table for the first time, adding all required features\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param {object} [json] JSON from the server that completed the table, if using Ajax source\n\t *    with client-side processing (optional)\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnInitComplete ( settings, json )\n\t{\n\t\tsettings._bInitComplete = true;\n\t\n\t\t// When data was added after the initialisation (data or Ajax) we need to\n\t\t// calculate the column sizing\n\t\tif ( json || settings.oInit.aaData ) {\n\t\t\t_fnAdjustColumnSizing( settings );\n\t\t}\n\t\n\t\t_fnCallbackFire( settings, null, 'plugin-init', [settings, json] );\n\t\t_fnCallbackFire( settings, 'aoInitComplete', 'init', [settings, json] );\n\t}\n\t\n\t\n\tfunction _fnLengthChange ( settings, val )\n\t{\n\t\tvar len = parseInt( val, 10 );\n\t\tsettings._iDisplayLength = len;\n\t\n\t\t_fnLengthOverflow( settings );\n\t\n\t\t// Fire length change event\n\t\t_fnCallbackFire( settings, null, 'length', [settings, len] );\n\t}\n\t\n\t\n\t/**\n\t * Generate the node required for user display length changing\n\t *  @param {object} settings dataTables settings object\n\t *  @returns {node} Display length feature node\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnFeatureHtmlLength ( settings )\n\t{\n\t\tvar\n\t\t\tclasses  = settings.oClasses,\n\t\t\ttableId  = settings.sTableId,\n\t\t\tmenu     = settings.aLengthMenu,\n\t\t\td2       = $.isArray( menu[0] ),\n\t\t\tlengths  = d2 ? menu[0] : menu,\n\t\t\tlanguage = d2 ? menu[1] : menu;\n\t\n\t\tvar select = $('<select/>', {\n\t\t\t'name':          tableId+'_length',\n\t\t\t'aria-controls': tableId,\n\t\t\t'class':         classes.sLengthSelect\n\t\t} );\n\t\n\t\tfor ( var i=0, ien=lengths.length ; i<ien ; i++ ) {\n\t\t\tselect[0][ i ] = new Option(\n\t\t\t\ttypeof language[i] === 'number' ?\n\t\t\t\t\tsettings.fnFormatNumber( language[i] ) :\n\t\t\t\t\tlanguage[i],\n\t\t\t\tlengths[i]\n\t\t\t);\n\t\t}\n\t\n\t\tvar div = $('<div><label/></div>').addClass( classes.sLength );\n\t\tif ( ! settings.aanFeatures.l ) {\n\t\t\tdiv[0].id = tableId+'_length';\n\t\t}\n\t\n\t\tdiv.children().append(\n\t\t\tsettings.oLanguage.sLengthMenu.replace( '_MENU_', select[0].outerHTML )\n\t\t);\n\t\n\t\t// Can't use `select` variable as user might provide their own and the\n\t\t// reference is broken by the use of outerHTML\n\t\t$('select', div)\n\t\t\t.val( settings._iDisplayLength )\n\t\t\t.on( 'change.DT', function(e) {\n\t\t\t\t_fnLengthChange( settings, $(this).val() );\n\t\t\t\t_fnDraw( settings );\n\t\t\t} );\n\t\n\t\t// Update node value whenever anything changes the table's length\n\t\t$(settings.nTable).on( 'length.dt.DT', function (e, s, len) {\n\t\t\tif ( settings === s ) {\n\t\t\t\t$('select', div).val( len );\n\t\t\t}\n\t\t} );\n\t\n\t\treturn div[0];\n\t}\n\t\n\t\n\t\n\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\t * Note that most of the paging logic is done in\n\t * DataTable.ext.pager\n\t */\n\t\n\t/**\n\t * Generate the node required for default pagination\n\t *  @param {object} oSettings dataTables settings object\n\t *  @returns {node} Pagination feature node\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnFeatureHtmlPaginate ( settings )\n\t{\n\t\tvar\n\t\t\ttype   = settings.sPaginationType,\n\t\t\tplugin = DataTable.ext.pager[ type ],\n\t\t\tmodern = typeof plugin === 'function',\n\t\t\tredraw = function( settings ) {\n\t\t\t\t_fnDraw( settings );\n\t\t\t},\n\t\t\tnode = $('<div/>').addClass( settings.oClasses.sPaging + type )[0],\n\t\t\tfeatures = settings.aanFeatures;\n\t\n\t\tif ( ! modern ) {\n\t\t\tplugin.fnInit( settings, node, redraw );\n\t\t}\n\t\n\t\t/* Add a draw callback for the pagination on first instance, to update the paging display */\n\t\tif ( ! features.p )\n\t\t{\n\t\t\tnode.id = settings.sTableId+'_paginate';\n\t\n\t\t\tsettings.aoDrawCallback.push( {\n\t\t\t\t\"fn\": function( settings ) {\n\t\t\t\t\tif ( modern ) {\n\t\t\t\t\t\tvar\n\t\t\t\t\t\t\tstart      = settings._iDisplayStart,\n\t\t\t\t\t\t\tlen        = settings._iDisplayLength,\n\t\t\t\t\t\t\tvisRecords = settings.fnRecordsDisplay(),\n\t\t\t\t\t\t\tall        = len === -1,\n\t\t\t\t\t\t\tpage = all ? 0 : Math.ceil( start / len ),\n\t\t\t\t\t\t\tpages = all ? 1 : Math.ceil( visRecords / len ),\n\t\t\t\t\t\t\tbuttons = plugin(page, pages),\n\t\t\t\t\t\t\ti, ien;\n\t\n\t\t\t\t\t\tfor ( i=0, ien=features.p.length ; i<ien ; i++ ) {\n\t\t\t\t\t\t\t_fnRenderer( settings, 'pageButton' )(\n\t\t\t\t\t\t\t\tsettings, features.p[i], i, buttons, page, pages\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tplugin.fnUpdate( settings, redraw );\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"sName\": \"pagination\"\n\t\t\t} );\n\t\t}\n\t\n\t\treturn node;\n\t}\n\t\n\t\n\t/**\n\t * Alter the display settings to change the page\n\t *  @param {object} settings DataTables settings object\n\t *  @param {string|int} action Paging action to take: \"first\", \"previous\",\n\t *    \"next\" or \"last\" or page number to jump to (integer)\n\t *  @param [bool] redraw Automatically draw the update or not\n\t *  @returns {bool} true page has changed, false - no change\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnPageChange ( settings, action, redraw )\n\t{\n\t\tvar\n\t\t\tstart     = settings._iDisplayStart,\n\t\t\tlen       = settings._iDisplayLength,\n\t\t\trecords   = settings.fnRecordsDisplay();\n\t\n\t\tif ( records === 0 || len === -1 )\n\t\t{\n\t\t\tstart = 0;\n\t\t}\n\t\telse if ( typeof action === \"number\" )\n\t\t{\n\t\t\tstart = action * len;\n\t\n\t\t\tif ( start > records )\n\t\t\t{\n\t\t\t\tstart = 0;\n\t\t\t}\n\t\t}\n\t\telse if ( action == \"first\" )\n\t\t{\n\t\t\tstart = 0;\n\t\t}\n\t\telse if ( action == \"previous\" )\n\t\t{\n\t\t\tstart = len >= 0 ?\n\t\t\t\tstart - len :\n\t\t\t\t0;\n\t\n\t\t\tif ( start < 0 )\n\t\t\t{\n\t\t\t  start = 0;\n\t\t\t}\n\t\t}\n\t\telse if ( action == \"next\" )\n\t\t{\n\t\t\tif ( start + len < records )\n\t\t\t{\n\t\t\t\tstart += len;\n\t\t\t}\n\t\t}\n\t\telse if ( action == \"last\" )\n\t\t{\n\t\t\tstart = Math.floor( (records-1) / len) * len;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t_fnLog( settings, 0, \"Unknown paging action: \"+action, 5 );\n\t\t}\n\t\n\t\tvar changed = settings._iDisplayStart !== start;\n\t\tsettings._iDisplayStart = start;\n\t\n\t\tif ( changed ) {\n\t\t\t_fnCallbackFire( settings, null, 'page', [settings] );\n\t\n\t\t\tif ( redraw ) {\n\t\t\t\t_fnDraw( settings );\n\t\t\t}\n\t\t}\n\t\n\t\treturn changed;\n\t}\n\t\n\t\n\t\n\t/**\n\t * Generate the node required for the processing node\n\t *  @param {object} settings dataTables settings object\n\t *  @returns {node} Processing element\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnFeatureHtmlProcessing ( settings )\n\t{\n\t\treturn $('<div/>', {\n\t\t\t\t'id': ! settings.aanFeatures.r ? settings.sTableId+'_processing' : null,\n\t\t\t\t'class': settings.oClasses.sProcessing\n\t\t\t} )\n\t\t\t.html( settings.oLanguage.sProcessing )\n\t\t\t.insertBefore( settings.nTable )[0];\n\t}\n\t\n\t\n\t/**\n\t * Display or hide the processing indicator\n\t *  @param {object} settings dataTables settings object\n\t *  @param {bool} show Show the processing indicator (true) or not (false)\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnProcessingDisplay ( settings, show )\n\t{\n\t\tif ( settings.oFeatures.bProcessing ) {\n\t\t\t$(settings.aanFeatures.r).css( 'display', show ? 'block' : 'none' );\n\t\t}\n\t\n\t\t_fnCallbackFire( settings, null, 'processing', [settings, show] );\n\t}\n\t\n\t/**\n\t * Add any control elements for the table - specifically scrolling\n\t *  @param {object} settings dataTables settings object\n\t *  @returns {node} Node to add to the DOM\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnFeatureHtmlTable ( settings )\n\t{\n\t\tvar table = $(settings.nTable);\n\t\n\t\t// Add the ARIA grid role to the table\n\t\ttable.attr( 'role', 'grid' );\n\t\n\t\t// Scrolling from here on in\n\t\tvar scroll = settings.oScroll;\n\t\n\t\tif ( scroll.sX === '' && scroll.sY === '' ) {\n\t\t\treturn settings.nTable;\n\t\t}\n\t\n\t\tvar scrollX = scroll.sX;\n\t\tvar scrollY = scroll.sY;\n\t\tvar classes = settings.oClasses;\n\t\tvar caption = table.children('caption');\n\t\tvar captionSide = caption.length ? caption[0]._captionSide : null;\n\t\tvar headerClone = $( table[0].cloneNode(false) );\n\t\tvar footerClone = $( table[0].cloneNode(false) );\n\t\tvar footer = table.children('tfoot');\n\t\tvar _div = '<div/>';\n\t\tvar size = function ( s ) {\n\t\t\treturn !s ? null : _fnStringToCss( s );\n\t\t};\n\t\n\t\tif ( ! footer.length ) {\n\t\t\tfooter = null;\n\t\t}\n\t\n\t\t/*\n\t\t * The HTML structure that we want to generate in this function is:\n\t\t *  div - scroller\n\t\t *    div - scroll head\n\t\t *      div - scroll head inner\n\t\t *        table - scroll head table\n\t\t *          thead - thead\n\t\t *    div - scroll body\n\t\t *      table - table (master table)\n\t\t *        thead - thead clone for sizing\n\t\t *        tbody - tbody\n\t\t *    div - scroll foot\n\t\t *      div - scroll foot inner\n\t\t *        table - scroll foot table\n\t\t *          tfoot - tfoot\n\t\t */\n\t\tvar scroller = $( _div, { 'class': classes.sScrollWrapper } )\n\t\t\t.append(\n\t\t\t\t$(_div, { 'class': classes.sScrollHead } )\n\t\t\t\t\t.css( {\n\t\t\t\t\t\toverflow: 'hidden',\n\t\t\t\t\t\tposition: 'relative',\n\t\t\t\t\t\tborder: 0,\n\t\t\t\t\t\twidth: scrollX ? size(scrollX) : '100%'\n\t\t\t\t\t} )\n\t\t\t\t\t.append(\n\t\t\t\t\t\t$(_div, { 'class': classes.sScrollHeadInner } )\n\t\t\t\t\t\t\t.css( {\n\t\t\t\t\t\t\t\t'box-sizing': 'content-box',\n\t\t\t\t\t\t\t\twidth: scroll.sXInner || '100%'\n\t\t\t\t\t\t\t} )\n\t\t\t\t\t\t\t.append(\n\t\t\t\t\t\t\t\theaderClone\n\t\t\t\t\t\t\t\t\t.removeAttr('id')\n\t\t\t\t\t\t\t\t\t.css( 'margin-left', 0 )\n\t\t\t\t\t\t\t\t\t.append( captionSide === 'top' ? caption : null )\n\t\t\t\t\t\t\t\t\t.append(\n\t\t\t\t\t\t\t\t\t\ttable.children('thead')\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t)\n\t\t\t.append(\n\t\t\t\t$(_div, { 'class': classes.sScrollBody } )\n\t\t\t\t\t.css( {\n\t\t\t\t\t\tposition: 'relative',\n\t\t\t\t\t\toverflow: 'auto',\n\t\t\t\t\t\twidth: size( scrollX )\n\t\t\t\t\t} )\n\t\t\t\t\t.append( table )\n\t\t\t);\n\t\n\t\tif ( footer ) {\n\t\t\tscroller.append(\n\t\t\t\t$(_div, { 'class': classes.sScrollFoot } )\n\t\t\t\t\t.css( {\n\t\t\t\t\t\toverflow: 'hidden',\n\t\t\t\t\t\tborder: 0,\n\t\t\t\t\t\twidth: scrollX ? size(scrollX) : '100%'\n\t\t\t\t\t} )\n\t\t\t\t\t.append(\n\t\t\t\t\t\t$(_div, { 'class': classes.sScrollFootInner } )\n\t\t\t\t\t\t\t.append(\n\t\t\t\t\t\t\t\tfooterClone\n\t\t\t\t\t\t\t\t\t.removeAttr('id')\n\t\t\t\t\t\t\t\t\t.css( 'margin-left', 0 )\n\t\t\t\t\t\t\t\t\t.append( captionSide === 'bottom' ? caption : null )\n\t\t\t\t\t\t\t\t\t.append(\n\t\t\t\t\t\t\t\t\t\ttable.children('tfoot')\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t);\n\t\t}\n\t\n\t\tvar children = scroller.children();\n\t\tvar scrollHead = children[0];\n\t\tvar scrollBody = children[1];\n\t\tvar scrollFoot = footer ? children[2] : null;\n\t\n\t\t// When the body is scrolled, then we also want to scroll the headers\n\t\tif ( scrollX ) {\n\t\t\t$(scrollBody).on( 'scroll.DT', function (e) {\n\t\t\t\tvar scrollLeft = this.scrollLeft;\n\t\n\t\t\t\tscrollHead.scrollLeft = scrollLeft;\n\t\n\t\t\t\tif ( footer ) {\n\t\t\t\t\tscrollFoot.scrollLeft = scrollLeft;\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\t\n\t\t$(scrollBody).css('max-height', scrollY);\n\t\tif (! scroll.bCollapse) {\n\t\t\t$(scrollBody).css('height', scrollY);\n\t\t}\n\t\n\t\tsettings.nScrollHead = scrollHead;\n\t\tsettings.nScrollBody = scrollBody;\n\t\tsettings.nScrollFoot = scrollFoot;\n\t\n\t\t// On redraw - align columns\n\t\tsettings.aoDrawCallback.push( {\n\t\t\t\"fn\": _fnScrollDraw,\n\t\t\t\"sName\": \"scrolling\"\n\t\t} );\n\t\n\t\treturn scroller[0];\n\t}\n\t\n\t\n\t\n\t/**\n\t * Update the header, footer and body tables for resizing - i.e. column\n\t * alignment.\n\t *\n\t * Welcome to the most horrible function DataTables. The process that this\n\t * function follows is basically:\n\t *   1. Re-create the table inside the scrolling div\n\t *   2. Take live measurements from the DOM\n\t *   3. Apply the measurements to align the columns\n\t *   4. Clean up\n\t *\n\t *  @param {object} settings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnScrollDraw ( settings )\n\t{\n\t\t// Given that this is such a monster function, a lot of variables are use\n\t\t// to try and keep the minimised size as small as possible\n\t\tvar\n\t\t\tscroll         = settings.oScroll,\n\t\t\tscrollX        = scroll.sX,\n\t\t\tscrollXInner   = scroll.sXInner,\n\t\t\tscrollY        = scroll.sY,\n\t\t\tbarWidth       = scroll.iBarWidth,\n\t\t\tdivHeader      = $(settings.nScrollHead),\n\t\t\tdivHeaderStyle = divHeader[0].style,\n\t\t\tdivHeaderInner = divHeader.children('div'),\n\t\t\tdivHeaderInnerStyle = divHeaderInner[0].style,\n\t\t\tdivHeaderTable = divHeaderInner.children('table'),\n\t\t\tdivBodyEl      = settings.nScrollBody,\n\t\t\tdivBody        = $(divBodyEl),\n\t\t\tdivBodyStyle   = divBodyEl.style,\n\t\t\tdivFooter      = $(settings.nScrollFoot),\n\t\t\tdivFooterInner = divFooter.children('div'),\n\t\t\tdivFooterTable = divFooterInner.children('table'),\n\t\t\theader         = $(settings.nTHead),\n\t\t\ttable          = $(settings.nTable),\n\t\t\ttableEl        = table[0],\n\t\t\ttableStyle     = tableEl.style,\n\t\t\tfooter         = settings.nTFoot ? $(settings.nTFoot) : null,\n\t\t\tbrowser        = settings.oBrowser,\n\t\t\tie67           = browser.bScrollOversize,\n\t\t\tdtHeaderCells  = _pluck( settings.aoColumns, 'nTh' ),\n\t\t\theaderTrgEls, footerTrgEls,\n\t\t\theaderSrcEls, footerSrcEls,\n\t\t\theaderCopy, footerCopy,\n\t\t\theaderWidths=[], footerWidths=[],\n\t\t\theaderContent=[], footerContent=[],\n\t\t\tidx, correction, sanityWidth,\n\t\t\tzeroOut = function(nSizer) {\n\t\t\t\tvar style = nSizer.style;\n\t\t\t\tstyle.paddingTop = \"0\";\n\t\t\t\tstyle.paddingBottom = \"0\";\n\t\t\t\tstyle.borderTopWidth = \"0\";\n\t\t\t\tstyle.borderBottomWidth = \"0\";\n\t\t\t\tstyle.height = 0;\n\t\t\t};\n\t\n\t\t// If the scrollbar visibility has changed from the last draw, we need to\n\t\t// adjust the column sizes as the table width will have changed to account\n\t\t// for the scrollbar\n\t\tvar scrollBarVis = divBodyEl.scrollHeight > divBodyEl.clientHeight;\n\t\t\n\t\tif ( settings.scrollBarVis !== scrollBarVis && settings.scrollBarVis !== undefined ) {\n\t\t\tsettings.scrollBarVis = scrollBarVis;\n\t\t\t_fnAdjustColumnSizing( settings );\n\t\t\treturn; // adjust column sizing will call this function again\n\t\t}\n\t\telse {\n\t\t\tsettings.scrollBarVis = scrollBarVis;\n\t\t}\n\t\n\t\t/*\n\t\t * 1. Re-create the table inside the scrolling div\n\t\t */\n\t\n\t\t// Remove the old minimised thead and tfoot elements in the inner table\n\t\ttable.children('thead, tfoot').remove();\n\t\n\t\tif ( footer ) {\n\t\t\tfooterCopy = footer.clone().prependTo( table );\n\t\t\tfooterTrgEls = footer.find('tr'); // the original tfoot is in its own table and must be sized\n\t\t\tfooterSrcEls = footerCopy.find('tr');\n\t\t}\n\t\n\t\t// Clone the current header and footer elements and then place it into the inner table\n\t\theaderCopy = header.clone().prependTo( table );\n\t\theaderTrgEls = header.find('tr'); // original header is in its own table\n\t\theaderSrcEls = headerCopy.find('tr');\n\t\theaderCopy.find('th, td').removeAttr('tabindex');\n\t\n\t\n\t\t/*\n\t\t * 2. Take live measurements from the DOM - do not alter the DOM itself!\n\t\t */\n\t\n\t\t// Remove old sizing and apply the calculated column widths\n\t\t// Get the unique column headers in the newly created (cloned) header. We want to apply the\n\t\t// calculated sizes to this header\n\t\tif ( ! scrollX )\n\t\t{\n\t\t\tdivBodyStyle.width = '100%';\n\t\t\tdivHeader[0].style.width = '100%';\n\t\t}\n\t\n\t\t$.each( _fnGetUniqueThs( settings, headerCopy ), function ( i, el ) {\n\t\t\tidx = _fnVisibleToColumnIndex( settings, i );\n\t\t\tel.style.width = settings.aoColumns[idx].sWidth;\n\t\t} );\n\t\n\t\tif ( footer ) {\n\t\t\t_fnApplyToChildren( function(n) {\n\t\t\t\tn.style.width = \"\";\n\t\t\t}, footerSrcEls );\n\t\t}\n\t\n\t\t// Size the table as a whole\n\t\tsanityWidth = table.outerWidth();\n\t\tif ( scrollX === \"\" ) {\n\t\t\t// No x scrolling\n\t\t\ttableStyle.width = \"100%\";\n\t\n\t\t\t// IE7 will make the width of the table when 100% include the scrollbar\n\t\t\t// - which is shouldn't. When there is a scrollbar we need to take this\n\t\t\t// into account.\n\t\t\tif ( ie67 && (table.find('tbody').height() > divBodyEl.offsetHeight ||\n\t\t\t\tdivBody.css('overflow-y') == \"scroll\")\n\t\t\t) {\n\t\t\t\ttableStyle.width = _fnStringToCss( table.outerWidth() - barWidth);\n\t\t\t}\n\t\n\t\t\t// Recalculate the sanity width\n\t\t\tsanityWidth = table.outerWidth();\n\t\t}\n\t\telse if ( scrollXInner !== \"\" ) {\n\t\t\t// legacy x scroll inner has been given - use it\n\t\t\ttableStyle.width = _fnStringToCss(scrollXInner);\n\t\n\t\t\t// Recalculate the sanity width\n\t\t\tsanityWidth = table.outerWidth();\n\t\t}\n\t\n\t\t// Hidden header should have zero height, so remove padding and borders. Then\n\t\t// set the width based on the real headers\n\t\n\t\t// Apply all styles in one pass\n\t\t_fnApplyToChildren( zeroOut, headerSrcEls );\n\t\n\t\t// Read all widths in next pass\n\t\t_fnApplyToChildren( function(nSizer) {\n\t\t\theaderContent.push( nSizer.innerHTML );\n\t\t\theaderWidths.push( _fnStringToCss( $(nSizer).css('width') ) );\n\t\t}, headerSrcEls );\n\t\n\t\t// Apply all widths in final pass\n\t\t_fnApplyToChildren( function(nToSize, i) {\n\t\t\t// Only apply widths to the DataTables detected header cells - this\n\t\t\t// prevents complex headers from having contradictory sizes applied\n\t\t\tif ( $.inArray( nToSize, dtHeaderCells ) !== -1 ) {\n\t\t\t\tnToSize.style.width = headerWidths[i];\n\t\t\t}\n\t\t}, headerTrgEls );\n\t\n\t\t$(headerSrcEls).height(0);\n\t\n\t\t/* Same again with the footer if we have one */\n\t\tif ( footer )\n\t\t{\n\t\t\t_fnApplyToChildren( zeroOut, footerSrcEls );\n\t\n\t\t\t_fnApplyToChildren( function(nSizer) {\n\t\t\t\tfooterContent.push( nSizer.innerHTML );\n\t\t\t\tfooterWidths.push( _fnStringToCss( $(nSizer).css('width') ) );\n\t\t\t}, footerSrcEls );\n\t\n\t\t\t_fnApplyToChildren( function(nToSize, i) {\n\t\t\t\tnToSize.style.width = footerWidths[i];\n\t\t\t}, footerTrgEls );\n\t\n\t\t\t$(footerSrcEls).height(0);\n\t\t}\n\t\n\t\n\t\t/*\n\t\t * 3. Apply the measurements\n\t\t */\n\t\n\t\t// \"Hide\" the header and footer that we used for the sizing. We need to keep\n\t\t// the content of the cell so that the width applied to the header and body\n\t\t// both match, but we want to hide it completely. We want to also fix their\n\t\t// width to what they currently are\n\t\t_fnApplyToChildren( function(nSizer, i) {\n\t\t\tnSizer.innerHTML = '<div class=\"dataTables_sizing\">'+headerContent[i]+'</div>';\n\t\t\tnSizer.childNodes[0].style.height = \"0\";\n\t\t\tnSizer.childNodes[0].style.overflow = \"hidden\";\n\t\t\tnSizer.style.width = headerWidths[i];\n\t\t}, headerSrcEls );\n\t\n\t\tif ( footer )\n\t\t{\n\t\t\t_fnApplyToChildren( function(nSizer, i) {\n\t\t\t\tnSizer.innerHTML = '<div class=\"dataTables_sizing\">'+footerContent[i]+'</div>';\n\t\t\t\tnSizer.childNodes[0].style.height = \"0\";\n\t\t\t\tnSizer.childNodes[0].style.overflow = \"hidden\";\n\t\t\t\tnSizer.style.width = footerWidths[i];\n\t\t\t}, footerSrcEls );\n\t\t}\n\t\n\t\t// Sanity check that the table is of a sensible width. If not then we are going to get\n\t\t// misalignment - try to prevent this by not allowing the table to shrink below its min width\n\t\tif ( table.outerWidth() < sanityWidth )\n\t\t{\n\t\t\t// The min width depends upon if we have a vertical scrollbar visible or not */\n\t\t\tcorrection = ((divBodyEl.scrollHeight > divBodyEl.offsetHeight ||\n\t\t\t\tdivBody.css('overflow-y') == \"scroll\")) ?\n\t\t\t\t\tsanityWidth+barWidth :\n\t\t\t\t\tsanityWidth;\n\t\n\t\t\t// IE6/7 are a law unto themselves...\n\t\t\tif ( ie67 && (divBodyEl.scrollHeight >\n\t\t\t\tdivBodyEl.offsetHeight || divBody.css('overflow-y') == \"scroll\")\n\t\t\t) {\n\t\t\t\ttableStyle.width = _fnStringToCss( correction-barWidth );\n\t\t\t}\n\t\n\t\t\t// And give the user a warning that we've stopped the table getting too small\n\t\t\tif ( scrollX === \"\" || scrollXInner !== \"\" ) {\n\t\t\t\t_fnLog( settings, 1, 'Possible column misalignment', 6 );\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcorrection = '100%';\n\t\t}\n\t\n\t\t// Apply to the container elements\n\t\tdivBodyStyle.width = _fnStringToCss( correction );\n\t\tdivHeaderStyle.width = _fnStringToCss( correction );\n\t\n\t\tif ( footer ) {\n\t\t\tsettings.nScrollFoot.style.width = _fnStringToCss( correction );\n\t\t}\n\t\n\t\n\t\t/*\n\t\t * 4. Clean up\n\t\t */\n\t\tif ( ! scrollY ) {\n\t\t\t/* IE7< puts a vertical scrollbar in place (when it shouldn't be) due to subtracting\n\t\t\t * the scrollbar height from the visible display, rather than adding it on. We need to\n\t\t\t * set the height in order to sort this. Don't want to do it in any other browsers.\n\t\t\t */\n\t\t\tif ( ie67 ) {\n\t\t\t\tdivBodyStyle.height = _fnStringToCss( tableEl.offsetHeight+barWidth );\n\t\t\t}\n\t\t}\n\t\n\t\t/* Finally set the width's of the header and footer tables */\n\t\tvar iOuterWidth = table.outerWidth();\n\t\tdivHeaderTable[0].style.width = _fnStringToCss( iOuterWidth );\n\t\tdivHeaderInnerStyle.width = _fnStringToCss( iOuterWidth );\n\t\n\t\t// Figure out if there are scrollbar present - if so then we need a the header and footer to\n\t\t// provide a bit more space to allow \"overflow\" scrolling (i.e. past the scrollbar)\n\t\tvar bScrolling = table.height() > divBodyEl.clientHeight || divBody.css('overflow-y') == \"scroll\";\n\t\tvar padding = 'padding' + (browser.bScrollbarLeft ? 'Left' : 'Right' );\n\t\tdivHeaderInnerStyle[ padding ] = bScrolling ? barWidth+\"px\" : \"0px\";\n\t\n\t\tif ( footer ) {\n\t\t\tdivFooterTable[0].style.width = _fnStringToCss( iOuterWidth );\n\t\t\tdivFooterInner[0].style.width = _fnStringToCss( iOuterWidth );\n\t\t\tdivFooterInner[0].style[padding] = bScrolling ? barWidth+\"px\" : \"0px\";\n\t\t}\n\t\n\t\t// Correct DOM ordering for colgroup - comes before the thead\n\t\ttable.children('colgroup').insertBefore( table.children('thead') );\n\t\n\t\t/* Adjust the position of the header in case we loose the y-scrollbar */\n\t\tdivBody.trigger('scroll');\n\t\n\t\t// If sorting or filtering has occurred, jump the scrolling back to the top\n\t\t// only if we aren't holding the position\n\t\tif ( (settings.bSorted || settings.bFiltered) && ! settings._drawHold ) {\n\t\t\tdivBodyEl.scrollTop = 0;\n\t\t}\n\t}\n\t\n\t\n\t\n\t/**\n\t * Apply a given function to the display child nodes of an element array (typically\n\t * TD children of TR rows\n\t *  @param {function} fn Method to apply to the objects\n\t *  @param array {nodes} an1 List of elements to look through for display children\n\t *  @param array {nodes} an2 Another list (identical structure to the first) - optional\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnApplyToChildren( fn, an1, an2 )\n\t{\n\t\tvar index=0, i=0, iLen=an1.length;\n\t\tvar nNode1, nNode2;\n\t\n\t\twhile ( i < iLen ) {\n\t\t\tnNode1 = an1[i].firstChild;\n\t\t\tnNode2 = an2 ? an2[i].firstChild : null;\n\t\n\t\t\twhile ( nNode1 ) {\n\t\t\t\tif ( nNode1.nodeType === 1 ) {\n\t\t\t\t\tif ( an2 ) {\n\t\t\t\t\t\tfn( nNode1, nNode2, index );\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tfn( nNode1, index );\n\t\t\t\t\t}\n\t\n\t\t\t\t\tindex++;\n\t\t\t\t}\n\t\n\t\t\t\tnNode1 = nNode1.nextSibling;\n\t\t\t\tnNode2 = an2 ? nNode2.nextSibling : null;\n\t\t\t}\n\t\n\t\t\ti++;\n\t\t}\n\t}\n\t\n\t\n\t\n\tvar __re_html_remove = /<.*?>/g;\n\t\n\t\n\t/**\n\t * Calculate the width of columns for the table\n\t *  @param {object} oSettings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnCalculateColumnWidths ( oSettings )\n\t{\n\t\tvar\n\t\t\ttable = oSettings.nTable,\n\t\t\tcolumns = oSettings.aoColumns,\n\t\t\tscroll = oSettings.oScroll,\n\t\t\tscrollY = scroll.sY,\n\t\t\tscrollX = scroll.sX,\n\t\t\tscrollXInner = scroll.sXInner,\n\t\t\tcolumnCount = columns.length,\n\t\t\tvisibleColumns = _fnGetColumns( oSettings, 'bVisible' ),\n\t\t\theaderCells = $('th', oSettings.nTHead),\n\t\t\ttableWidthAttr = table.getAttribute('width'), // from DOM element\n\t\t\ttableContainer = table.parentNode,\n\t\t\tuserInputs = false,\n\t\t\ti, column, columnIdx, width, outerWidth,\n\t\t\tbrowser = oSettings.oBrowser,\n\t\t\tie67 = browser.bScrollOversize;\n\t\n\t\tvar styleWidth = table.style.width;\n\t\tif ( styleWidth && styleWidth.indexOf('%') !== -1 ) {\n\t\t\ttableWidthAttr = styleWidth;\n\t\t}\n\t\n\t\t/* Convert any user input sizes into pixel sizes */\n\t\tfor ( i=0 ; i<visibleColumns.length ; i++ ) {\n\t\t\tcolumn = columns[ visibleColumns[i] ];\n\t\n\t\t\tif ( column.sWidth !== null ) {\n\t\t\t\tcolumn.sWidth = _fnConvertToWidth( column.sWidthOrig, tableContainer );\n\t\n\t\t\t\tuserInputs = true;\n\t\t\t}\n\t\t}\n\t\n\t\t/* If the number of columns in the DOM equals the number that we have to\n\t\t * process in DataTables, then we can use the offsets that are created by\n\t\t * the web- browser. No custom sizes can be set in order for this to happen,\n\t\t * nor scrolling used\n\t\t */\n\t\tif ( ie67 || ! userInputs && ! scrollX && ! scrollY &&\n\t\t     columnCount == _fnVisbleColumns( oSettings ) &&\n\t\t     columnCount == headerCells.length\n\t\t) {\n\t\t\tfor ( i=0 ; i<columnCount ; i++ ) {\n\t\t\t\tvar colIdx = _fnVisibleToColumnIndex( oSettings, i );\n\t\n\t\t\t\tif ( colIdx !== null ) {\n\t\t\t\t\tcolumns[ colIdx ].sWidth = _fnStringToCss( headerCells.eq(i).width() );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Otherwise construct a single row, worst case, table with the widest\n\t\t\t// node in the data, assign any user defined widths, then insert it into\n\t\t\t// the DOM and allow the browser to do all the hard work of calculating\n\t\t\t// table widths\n\t\t\tvar tmpTable = $(table).clone() // don't use cloneNode - IE8 will remove events on the main table\n\t\t\t\t.css( 'visibility', 'hidden' )\n\t\t\t\t.removeAttr( 'id' );\n\t\n\t\t\t// Clean up the table body\n\t\t\ttmpTable.find('tbody tr').remove();\n\t\t\tvar tr = $('<tr/>').appendTo( tmpTable.find('tbody') );\n\t\n\t\t\t// Clone the table header and footer - we can't use the header / footer\n\t\t\t// from the cloned table, since if scrolling is active, the table's\n\t\t\t// real header and footer are contained in different table tags\n\t\t\ttmpTable.find('thead, tfoot').remove();\n\t\t\ttmpTable\n\t\t\t\t.append( $(oSettings.nTHead).clone() )\n\t\t\t\t.append( $(oSettings.nTFoot).clone() );\n\t\n\t\t\t// Remove any assigned widths from the footer (from scrolling)\n\t\t\ttmpTable.find('tfoot th, tfoot td').css('width', '');\n\t\n\t\t\t// Apply custom sizing to the cloned header\n\t\t\theaderCells = _fnGetUniqueThs( oSettings, tmpTable.find('thead')[0] );\n\t\n\t\t\tfor ( i=0 ; i<visibleColumns.length ; i++ ) {\n\t\t\t\tcolumn = columns[ visibleColumns[i] ];\n\t\n\t\t\t\theaderCells[i].style.width = column.sWidthOrig !== null && column.sWidthOrig !== '' ?\n\t\t\t\t\t_fnStringToCss( column.sWidthOrig ) :\n\t\t\t\t\t'';\n\t\n\t\t\t\t// For scrollX we need to force the column width otherwise the\n\t\t\t\t// browser will collapse it. If this width is smaller than the\n\t\t\t\t// width the column requires, then it will have no effect\n\t\t\t\tif ( column.sWidthOrig && scrollX ) {\n\t\t\t\t\t$( headerCells[i] ).append( $('<div/>').css( {\n\t\t\t\t\t\twidth: column.sWidthOrig,\n\t\t\t\t\t\tmargin: 0,\n\t\t\t\t\t\tpadding: 0,\n\t\t\t\t\t\tborder: 0,\n\t\t\t\t\t\theight: 1\n\t\t\t\t\t} ) );\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\t// Find the widest cell for each column and put it into the table\n\t\t\tif ( oSettings.aoData.length ) {\n\t\t\t\tfor ( i=0 ; i<visibleColumns.length ; i++ ) {\n\t\t\t\t\tcolumnIdx = visibleColumns[i];\n\t\t\t\t\tcolumn = columns[ columnIdx ];\n\t\n\t\t\t\t\t$( _fnGetWidestNode( oSettings, columnIdx ) )\n\t\t\t\t\t\t.clone( false )\n\t\t\t\t\t\t.append( column.sContentPadding )\n\t\t\t\t\t\t.appendTo( tr );\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\t// Tidy the temporary table - remove name attributes so there aren't\n\t\t\t// duplicated in the dom (radio elements for example)\n\t\t\t$('[name]', tmpTable).removeAttr('name');\n\t\n\t\t\t// Table has been built, attach to the document so we can work with it.\n\t\t\t// A holding element is used, positioned at the top of the container\n\t\t\t// with minimal height, so it has no effect on if the container scrolls\n\t\t\t// or not. Otherwise it might trigger scrolling when it actually isn't\n\t\t\t// needed\n\t\t\tvar holder = $('<div/>').css( scrollX || scrollY ?\n\t\t\t\t\t{\n\t\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\t\ttop: 0,\n\t\t\t\t\t\tleft: 0,\n\t\t\t\t\t\theight: 1,\n\t\t\t\t\t\tright: 0,\n\t\t\t\t\t\toverflow: 'hidden'\n\t\t\t\t\t} :\n\t\t\t\t\t{}\n\t\t\t\t)\n\t\t\t\t.append( tmpTable )\n\t\t\t\t.appendTo( tableContainer );\n\t\n\t\t\t// When scrolling (X or Y) we want to set the width of the table as \n\t\t\t// appropriate. However, when not scrolling leave the table width as it\n\t\t\t// is. This results in slightly different, but I think correct behaviour\n\t\t\tif ( scrollX && scrollXInner ) {\n\t\t\t\ttmpTable.width( scrollXInner );\n\t\t\t}\n\t\t\telse if ( scrollX ) {\n\t\t\t\ttmpTable.css( 'width', 'auto' );\n\t\t\t\ttmpTable.removeAttr('width');\n\t\n\t\t\t\t// If there is no width attribute or style, then allow the table to\n\t\t\t\t// collapse\n\t\t\t\tif ( tmpTable.width() < tableContainer.clientWidth && tableWidthAttr ) {\n\t\t\t\t\ttmpTable.width( tableContainer.clientWidth );\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ( scrollY ) {\n\t\t\t\ttmpTable.width( tableContainer.clientWidth );\n\t\t\t}\n\t\t\telse if ( tableWidthAttr ) {\n\t\t\t\ttmpTable.width( tableWidthAttr );\n\t\t\t}\n\t\n\t\t\t// Get the width of each column in the constructed table - we need to\n\t\t\t// know the inner width (so it can be assigned to the other table's\n\t\t\t// cells) and the outer width so we can calculate the full width of the\n\t\t\t// table. This is safe since DataTables requires a unique cell for each\n\t\t\t// column, but if ever a header can span multiple columns, this will\n\t\t\t// need to be modified.\n\t\t\tvar total = 0;\n\t\t\tfor ( i=0 ; i<visibleColumns.length ; i++ ) {\n\t\t\t\tvar cell = $(headerCells[i]);\n\t\t\t\tvar border = cell.outerWidth() - cell.width();\n\t\n\t\t\t\t// Use getBounding... where possible (not IE8-) because it can give\n\t\t\t\t// sub-pixel accuracy, which we then want to round up!\n\t\t\t\tvar bounding = browser.bBounding ?\n\t\t\t\t\tMath.ceil( headerCells[i].getBoundingClientRect().width ) :\n\t\t\t\t\tcell.outerWidth();\n\t\n\t\t\t\t// Total is tracked to remove any sub-pixel errors as the outerWidth\n\t\t\t\t// of the table might not equal the total given here (IE!).\n\t\t\t\ttotal += bounding;\n\t\n\t\t\t\t// Width for each column to use\n\t\t\t\tcolumns[ visibleColumns[i] ].sWidth = _fnStringToCss( bounding - border );\n\t\t\t}\n\t\n\t\t\ttable.style.width = _fnStringToCss( total );\n\t\n\t\t\t// Finished with the table - ditch it\n\t\t\tholder.remove();\n\t\t}\n\t\n\t\t// If there is a width attr, we want to attach an event listener which\n\t\t// allows the table sizing to automatically adjust when the window is\n\t\t// resized. Use the width attr rather than CSS, since we can't know if the\n\t\t// CSS is a relative value or absolute - DOM read is always px.\n\t\tif ( tableWidthAttr ) {\n\t\t\ttable.style.width = _fnStringToCss( tableWidthAttr );\n\t\t}\n\t\n\t\tif ( (tableWidthAttr || scrollX) && ! oSettings._reszEvt ) {\n\t\t\tvar bindResize = function () {\n\t\t\t\t$(window).on('resize.DT-'+oSettings.sInstance, _fnThrottle( function () {\n\t\t\t\t\t_fnAdjustColumnSizing( oSettings );\n\t\t\t\t} ) );\n\t\t\t};\n\t\n\t\t\t// IE6/7 will crash if we bind a resize event handler on page load.\n\t\t\t// To be removed in 1.11 which drops IE6/7 support\n\t\t\tif ( ie67 ) {\n\t\t\t\tsetTimeout( bindResize, 1000 );\n\t\t\t}\n\t\t\telse {\n\t\t\t\tbindResize();\n\t\t\t}\n\t\n\t\t\toSettings._reszEvt = true;\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Throttle the calls to a function. Arguments and context are maintained for\n\t * the throttled function\n\t *  @param {function} fn Function to be called\n\t *  @param {int} [freq=200] call frequency in mS\n\t *  @returns {function} wrapped function\n\t *  @memberof DataTable#oApi\n\t */\n\tvar _fnThrottle = DataTable.util.throttle;\n\t\n\t\n\t/**\n\t * Convert a CSS unit width to pixels (e.g. 2em)\n\t *  @param {string} width width to be converted\n\t *  @param {node} parent parent to get the with for (required for relative widths) - optional\n\t *  @returns {int} width in pixels\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnConvertToWidth ( width, parent )\n\t{\n\t\tif ( ! width ) {\n\t\t\treturn 0;\n\t\t}\n\t\n\t\tvar n = $('<div/>')\n\t\t\t.css( 'width', _fnStringToCss( width ) )\n\t\t\t.appendTo( parent || document.body );\n\t\n\t\tvar val = n[0].offsetWidth;\n\t\tn.remove();\n\t\n\t\treturn val;\n\t}\n\t\n\t\n\t/**\n\t * Get the widest node\n\t *  @param {object} settings dataTables settings object\n\t *  @param {int} colIdx column of interest\n\t *  @returns {node} widest table node\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnGetWidestNode( settings, colIdx )\n\t{\n\t\tvar idx = _fnGetMaxLenString( settings, colIdx );\n\t\tif ( idx < 0 ) {\n\t\t\treturn null;\n\t\t}\n\t\n\t\tvar data = settings.aoData[ idx ];\n\t\treturn ! data.nTr ? // Might not have been created when deferred rendering\n\t\t\t$('<td/>').html( _fnGetCellData( settings, idx, colIdx, 'display' ) )[0] :\n\t\t\tdata.anCells[ colIdx ];\n\t}\n\t\n\t\n\t/**\n\t * Get the maximum strlen for each data column\n\t *  @param {object} settings dataTables settings object\n\t *  @param {int} colIdx column of interest\n\t *  @returns {string} max string length for each column\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnGetMaxLenString( settings, colIdx )\n\t{\n\t\tvar s, max=-1, maxIdx = -1;\n\t\n\t\tfor ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {\n\t\t\ts = _fnGetCellData( settings, i, colIdx, 'display' )+'';\n\t\t\ts = s.replace( __re_html_remove, '' );\n\t\t\ts = s.replace( /&nbsp;/g, ' ' );\n\t\n\t\t\tif ( s.length > max ) {\n\t\t\t\tmax = s.length;\n\t\t\t\tmaxIdx = i;\n\t\t\t}\n\t\t}\n\t\n\t\treturn maxIdx;\n\t}\n\t\n\t\n\t/**\n\t * Append a CSS unit (only if required) to a string\n\t *  @param {string} value to css-ify\n\t *  @returns {string} value with css unit\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnStringToCss( s )\n\t{\n\t\tif ( s === null ) {\n\t\t\treturn '0px';\n\t\t}\n\t\n\t\tif ( typeof s == 'number' ) {\n\t\t\treturn s < 0 ?\n\t\t\t\t'0px' :\n\t\t\t\ts+'px';\n\t\t}\n\t\n\t\t// Check it has a unit character already\n\t\treturn s.match(/\\d$/) ?\n\t\t\ts+'px' :\n\t\t\ts;\n\t}\n\t\n\t\n\t\n\tfunction _fnSortFlatten ( settings )\n\t{\n\t\tvar\n\t\t\ti, iLen, k, kLen,\n\t\t\taSort = [],\n\t\t\taiOrig = [],\n\t\t\taoColumns = settings.aoColumns,\n\t\t\taDataSort, iCol, sType, srcCol,\n\t\t\tfixed = settings.aaSortingFixed,\n\t\t\tfixedObj = $.isPlainObject( fixed ),\n\t\t\tnestedSort = [],\n\t\t\tadd = function ( a ) {\n\t\t\t\tif ( a.length && ! $.isArray( a[0] ) ) {\n\t\t\t\t\t// 1D array\n\t\t\t\t\tnestedSort.push( a );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// 2D array\n\t\t\t\t\t$.merge( nestedSort, a );\n\t\t\t\t}\n\t\t\t};\n\t\n\t\t// Build the sort array, with pre-fix and post-fix options if they have been\n\t\t// specified\n\t\tif ( $.isArray( fixed ) ) {\n\t\t\tadd( fixed );\n\t\t}\n\t\n\t\tif ( fixedObj && fixed.pre ) {\n\t\t\tadd( fixed.pre );\n\t\t}\n\t\n\t\tadd( settings.aaSorting );\n\t\n\t\tif (fixedObj && fixed.post ) {\n\t\t\tadd( fixed.post );\n\t\t}\n\t\n\t\tfor ( i=0 ; i<nestedSort.length ; i++ )\n\t\t{\n\t\t\tsrcCol = nestedSort[i][0];\n\t\t\taDataSort = aoColumns[ srcCol ].aDataSort;\n\t\n\t\t\tfor ( k=0, kLen=aDataSort.length ; k<kLen ; k++ )\n\t\t\t{\n\t\t\t\tiCol = aDataSort[k];\n\t\t\t\tsType = aoColumns[ iCol ].sType || 'string';\n\t\n\t\t\t\tif ( nestedSort[i]._idx === undefined ) {\n\t\t\t\t\tnestedSort[i]._idx = $.inArray( nestedSort[i][1], aoColumns[iCol].asSorting );\n\t\t\t\t}\n\t\n\t\t\t\taSort.push( {\n\t\t\t\t\tsrc:       srcCol,\n\t\t\t\t\tcol:       iCol,\n\t\t\t\t\tdir:       nestedSort[i][1],\n\t\t\t\t\tindex:     nestedSort[i]._idx,\n\t\t\t\t\ttype:      sType,\n\t\t\t\t\tformatter: DataTable.ext.type.order[ sType+\"-pre\" ]\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\t\n\t\treturn aSort;\n\t}\n\t\n\t/**\n\t * Change the order of the table\n\t *  @param {object} oSettings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t *  @todo This really needs split up!\n\t */\n\tfunction _fnSort ( oSettings )\n\t{\n\t\tvar\n\t\t\ti, ien, iLen, j, jLen, k, kLen,\n\t\t\tsDataType, nTh,\n\t\t\taiOrig = [],\n\t\t\toExtSort = DataTable.ext.type.order,\n\t\t\taoData = oSettings.aoData,\n\t\t\taoColumns = oSettings.aoColumns,\n\t\t\taDataSort, data, iCol, sType, oSort,\n\t\t\tformatters = 0,\n\t\t\tsortCol,\n\t\t\tdisplayMaster = oSettings.aiDisplayMaster,\n\t\t\taSort;\n\t\n\t\t// Resolve any column types that are unknown due to addition or invalidation\n\t\t// @todo Can this be moved into a 'data-ready' handler which is called when\n\t\t//   data is going to be used in the table?\n\t\t_fnColumnTypes( oSettings );\n\t\n\t\taSort = _fnSortFlatten( oSettings );\n\t\n\t\tfor ( i=0, ien=aSort.length ; i<ien ; i++ ) {\n\t\t\tsortCol = aSort[i];\n\t\n\t\t\t// Track if we can use the fast sort algorithm\n\t\t\tif ( sortCol.formatter ) {\n\t\t\t\tformatters++;\n\t\t\t}\n\t\n\t\t\t// Load the data needed for the sort, for each cell\n\t\t\t_fnSortData( oSettings, sortCol.col );\n\t\t}\n\t\n\t\t/* No sorting required if server-side or no sorting array */\n\t\tif ( _fnDataSource( oSettings ) != 'ssp' && aSort.length !== 0 )\n\t\t{\n\t\t\t// Create a value - key array of the current row positions such that we can use their\n\t\t\t// current position during the sort, if values match, in order to perform stable sorting\n\t\t\tfor ( i=0, iLen=displayMaster.length ; i<iLen ; i++ ) {\n\t\t\t\taiOrig[ displayMaster[i] ] = i;\n\t\t\t}\n\t\n\t\t\t/* Do the sort - here we want multi-column sorting based on a given data source (column)\n\t\t\t * and sorting function (from oSort) in a certain direction. It's reasonably complex to\n\t\t\t * follow on it's own, but this is what we want (example two column sorting):\n\t\t\t *  fnLocalSorting = function(a,b){\n\t\t\t *    var iTest;\n\t\t\t *    iTest = oSort['string-asc']('data11', 'data12');\n\t\t\t *      if (iTest !== 0)\n\t\t\t *        return iTest;\n\t\t\t *    iTest = oSort['numeric-desc']('data21', 'data22');\n\t\t\t *    if (iTest !== 0)\n\t\t\t *      return iTest;\n\t\t\t *    return oSort['numeric-asc']( aiOrig[a], aiOrig[b] );\n\t\t\t *  }\n\t\t\t * Basically we have a test for each sorting column, if the data in that column is equal,\n\t\t\t * test the next column. If all columns match, then we use a numeric sort on the row\n\t\t\t * positions in the original data array to provide a stable sort.\n\t\t\t *\n\t\t\t * Note - I know it seems excessive to have two sorting methods, but the first is around\n\t\t\t * 15% faster, so the second is only maintained for backwards compatibility with sorting\n\t\t\t * methods which do not have a pre-sort formatting function.\n\t\t\t */\n\t\t\tif ( formatters === aSort.length ) {\n\t\t\t\t// All sort types have formatting functions\n\t\t\t\tdisplayMaster.sort( function ( a, b ) {\n\t\t\t\t\tvar\n\t\t\t\t\t\tx, y, k, test, sort,\n\t\t\t\t\t\tlen=aSort.length,\n\t\t\t\t\t\tdataA = aoData[a]._aSortData,\n\t\t\t\t\t\tdataB = aoData[b]._aSortData;\n\t\n\t\t\t\t\tfor ( k=0 ; k<len ; k++ ) {\n\t\t\t\t\t\tsort = aSort[k];\n\t\n\t\t\t\t\t\tx = dataA[ sort.col ];\n\t\t\t\t\t\ty = dataB[ sort.col ];\n\t\n\t\t\t\t\t\ttest = x<y ? -1 : x>y ? 1 : 0;\n\t\t\t\t\t\tif ( test !== 0 ) {\n\t\t\t\t\t\t\treturn sort.dir === 'asc' ? test : -test;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\n\t\t\t\t\tx = aiOrig[a];\n\t\t\t\t\ty = aiOrig[b];\n\t\t\t\t\treturn x<y ? -1 : x>y ? 1 : 0;\n\t\t\t\t} );\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Depreciated - remove in 1.11 (providing a plug-in option)\n\t\t\t\t// Not all sort types have formatting methods, so we have to call their sorting\n\t\t\t\t// methods.\n\t\t\t\tdisplayMaster.sort( function ( a, b ) {\n\t\t\t\t\tvar\n\t\t\t\t\t\tx, y, k, l, test, sort, fn,\n\t\t\t\t\t\tlen=aSort.length,\n\t\t\t\t\t\tdataA = aoData[a]._aSortData,\n\t\t\t\t\t\tdataB = aoData[b]._aSortData;\n\t\n\t\t\t\t\tfor ( k=0 ; k<len ; k++ ) {\n\t\t\t\t\t\tsort = aSort[k];\n\t\n\t\t\t\t\t\tx = dataA[ sort.col ];\n\t\t\t\t\t\ty = dataB[ sort.col ];\n\t\n\t\t\t\t\t\tfn = oExtSort[ sort.type+\"-\"+sort.dir ] || oExtSort[ \"string-\"+sort.dir ];\n\t\t\t\t\t\ttest = fn( x, y );\n\t\t\t\t\t\tif ( test !== 0 ) {\n\t\t\t\t\t\t\treturn test;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\n\t\t\t\t\tx = aiOrig[a];\n\t\t\t\t\ty = aiOrig[b];\n\t\t\t\t\treturn x<y ? -1 : x>y ? 1 : 0;\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\t\n\t\t/* Tell the draw function that we have sorted the data */\n\t\toSettings.bSorted = true;\n\t}\n\t\n\t\n\tfunction _fnSortAria ( settings )\n\t{\n\t\tvar label;\n\t\tvar nextSort;\n\t\tvar columns = settings.aoColumns;\n\t\tvar aSort = _fnSortFlatten( settings );\n\t\tvar oAria = settings.oLanguage.oAria;\n\t\n\t\t// ARIA attributes - need to loop all columns, to update all (removing old\n\t\t// attributes as needed)\n\t\tfor ( var i=0, iLen=columns.length ; i<iLen ; i++ )\n\t\t{\n\t\t\tvar col = columns[i];\n\t\t\tvar asSorting = col.asSorting;\n\t\t\tvar sTitle = col.sTitle.replace( /<.*?>/g, \"\" );\n\t\t\tvar th = col.nTh;\n\t\n\t\t\t// IE7 is throwing an error when setting these properties with jQuery's\n\t\t\t// attr() and removeAttr() methods...\n\t\t\tth.removeAttribute('aria-sort');\n\t\n\t\t\t/* In ARIA only the first sorting column can be marked as sorting - no multi-sort option */\n\t\t\tif ( col.bSortable ) {\n\t\t\t\tif ( aSort.length > 0 && aSort[0].col == i ) {\n\t\t\t\t\tth.setAttribute('aria-sort', aSort[0].dir==\"asc\" ? \"ascending\" : \"descending\" );\n\t\t\t\t\tnextSort = asSorting[ aSort[0].index+1 ] || asSorting[0];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tnextSort = asSorting[0];\n\t\t\t\t}\n\t\n\t\t\t\tlabel = sTitle + ( nextSort === \"asc\" ?\n\t\t\t\t\toAria.sSortAscending :\n\t\t\t\t\toAria.sSortDescending\n\t\t\t\t);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlabel = sTitle;\n\t\t\t}\n\t\n\t\t\tth.setAttribute('aria-label', label);\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Function to run on user sort request\n\t *  @param {object} settings dataTables settings object\n\t *  @param {node} attachTo node to attach the handler to\n\t *  @param {int} colIdx column sorting index\n\t *  @param {boolean} [append=false] Append the requested sort to the existing\n\t *    sort if true (i.e. multi-column sort)\n\t *  @param {function} [callback] callback function\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnSortListener ( settings, colIdx, append, callback )\n\t{\n\t\tvar col = settings.aoColumns[ colIdx ];\n\t\tvar sorting = settings.aaSorting;\n\t\tvar asSorting = col.asSorting;\n\t\tvar nextSortIdx;\n\t\tvar next = function ( a, overflow ) {\n\t\t\tvar idx = a._idx;\n\t\t\tif ( idx === undefined ) {\n\t\t\t\tidx = $.inArray( a[1], asSorting );\n\t\t\t}\n\t\n\t\t\treturn idx+1 < asSorting.length ?\n\t\t\t\tidx+1 :\n\t\t\t\toverflow ?\n\t\t\t\t\tnull :\n\t\t\t\t\t0;\n\t\t};\n\t\n\t\t// Convert to 2D array if needed\n\t\tif ( typeof sorting[0] === 'number' ) {\n\t\t\tsorting = settings.aaSorting = [ sorting ];\n\t\t}\n\t\n\t\t// If appending the sort then we are multi-column sorting\n\t\tif ( append && settings.oFeatures.bSortMulti ) {\n\t\t\t// Are we already doing some kind of sort on this column?\n\t\t\tvar sortIdx = $.inArray( colIdx, _pluck(sorting, '0') );\n\t\n\t\t\tif ( sortIdx !== -1 ) {\n\t\t\t\t// Yes, modify the sort\n\t\t\t\tnextSortIdx = next( sorting[sortIdx], true );\n\t\n\t\t\t\tif ( nextSortIdx === null && sorting.length === 1 ) {\n\t\t\t\t\tnextSortIdx = 0; // can't remove sorting completely\n\t\t\t\t}\n\t\n\t\t\t\tif ( nextSortIdx === null ) {\n\t\t\t\t\tsorting.splice( sortIdx, 1 );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tsorting[sortIdx][1] = asSorting[ nextSortIdx ];\n\t\t\t\t\tsorting[sortIdx]._idx = nextSortIdx;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// No sort on this column yet\n\t\t\t\tsorting.push( [ colIdx, asSorting[0], 0 ] );\n\t\t\t\tsorting[sorting.length-1]._idx = 0;\n\t\t\t}\n\t\t}\n\t\telse if ( sorting.length && sorting[0][0] == colIdx ) {\n\t\t\t// Single column - already sorting on this column, modify the sort\n\t\t\tnextSortIdx = next( sorting[0] );\n\t\n\t\t\tsorting.length = 1;\n\t\t\tsorting[0][1] = asSorting[ nextSortIdx ];\n\t\t\tsorting[0]._idx = nextSortIdx;\n\t\t}\n\t\telse {\n\t\t\t// Single column - sort only on this column\n\t\t\tsorting.length = 0;\n\t\t\tsorting.push( [ colIdx, asSorting[0] ] );\n\t\t\tsorting[0]._idx = 0;\n\t\t}\n\t\n\t\t// Run the sort by calling a full redraw\n\t\t_fnReDraw( settings );\n\t\n\t\t// callback used for async user interaction\n\t\tif ( typeof callback == 'function' ) {\n\t\t\tcallback( settings );\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Attach a sort handler (click) to a node\n\t *  @param {object} settings dataTables settings object\n\t *  @param {node} attachTo node to attach the handler to\n\t *  @param {int} colIdx column sorting index\n\t *  @param {function} [callback] callback function\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnSortAttachListener ( settings, attachTo, colIdx, callback )\n\t{\n\t\tvar col = settings.aoColumns[ colIdx ];\n\t\n\t\t_fnBindAction( attachTo, {}, function (e) {\n\t\t\t/* If the column is not sortable - don't to anything */\n\t\t\tif ( col.bSortable === false ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\t// If processing is enabled use a timeout to allow the processing\n\t\t\t// display to be shown - otherwise to it synchronously\n\t\t\tif ( settings.oFeatures.bProcessing ) {\n\t\t\t\t_fnProcessingDisplay( settings, true );\n\t\n\t\t\t\tsetTimeout( function() {\n\t\t\t\t\t_fnSortListener( settings, colIdx, e.shiftKey, callback );\n\t\n\t\t\t\t\t// In server-side processing, the draw callback will remove the\n\t\t\t\t\t// processing display\n\t\t\t\t\tif ( _fnDataSource( settings ) !== 'ssp' ) {\n\t\t\t\t\t\t_fnProcessingDisplay( settings, false );\n\t\t\t\t\t}\n\t\t\t\t}, 0 );\n\t\t\t}\n\t\t\telse {\n\t\t\t\t_fnSortListener( settings, colIdx, e.shiftKey, callback );\n\t\t\t}\n\t\t} );\n\t}\n\t\n\t\n\t/**\n\t * Set the sorting classes on table's body, Note: it is safe to call this function\n\t * when bSort and bSortClasses are false\n\t *  @param {object} oSettings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnSortingClasses( settings )\n\t{\n\t\tvar oldSort = settings.aLastSort;\n\t\tvar sortClass = settings.oClasses.sSortColumn;\n\t\tvar sort = _fnSortFlatten( settings );\n\t\tvar features = settings.oFeatures;\n\t\tvar i, ien, colIdx;\n\t\n\t\tif ( features.bSort && features.bSortClasses ) {\n\t\t\t// Remove old sorting classes\n\t\t\tfor ( i=0, ien=oldSort.length ; i<ien ; i++ ) {\n\t\t\t\tcolIdx = oldSort[i].src;\n\t\n\t\t\t\t// Remove column sorting\n\t\t\t\t$( _pluck( settings.aoData, 'anCells', colIdx ) )\n\t\t\t\t\t.removeClass( sortClass + (i<2 ? i+1 : 3) );\n\t\t\t}\n\t\n\t\t\t// Add new column sorting\n\t\t\tfor ( i=0, ien=sort.length ; i<ien ; i++ ) {\n\t\t\t\tcolIdx = sort[i].src;\n\t\n\t\t\t\t$( _pluck( settings.aoData, 'anCells', colIdx ) )\n\t\t\t\t\t.addClass( sortClass + (i<2 ? i+1 : 3) );\n\t\t\t}\n\t\t}\n\t\n\t\tsettings.aLastSort = sort;\n\t}\n\t\n\t\n\t// Get the data to sort a column, be it from cache, fresh (populating the\n\t// cache), or from a sort formatter\n\tfunction _fnSortData( settings, idx )\n\t{\n\t\t// Custom sorting function - provided by the sort data type\n\t\tvar column = settings.aoColumns[ idx ];\n\t\tvar customSort = DataTable.ext.order[ column.sSortDataType ];\n\t\tvar customData;\n\t\n\t\tif ( customSort ) {\n\t\t\tcustomData = customSort.call( settings.oInstance, settings, idx,\n\t\t\t\t_fnColumnIndexToVisible( settings, idx )\n\t\t\t);\n\t\t}\n\t\n\t\t// Use / populate cache\n\t\tvar row, cellData;\n\t\tvar formatter = DataTable.ext.type.order[ column.sType+\"-pre\" ];\n\t\n\t\tfor ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {\n\t\t\trow = settings.aoData[i];\n\t\n\t\t\tif ( ! row._aSortData ) {\n\t\t\t\trow._aSortData = [];\n\t\t\t}\n\t\n\t\t\tif ( ! row._aSortData[idx] || customSort ) {\n\t\t\t\tcellData = customSort ?\n\t\t\t\t\tcustomData[i] : // If there was a custom sort function, use data from there\n\t\t\t\t\t_fnGetCellData( settings, i, idx, 'sort' );\n\t\n\t\t\t\trow._aSortData[ idx ] = formatter ?\n\t\t\t\t\tformatter( cellData ) :\n\t\t\t\t\tcellData;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\n\t\n\t/**\n\t * Save the state of a table\n\t *  @param {object} oSettings dataTables settings object\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnSaveState ( settings )\n\t{\n\t\tif ( !settings.oFeatures.bStateSave || settings.bDestroying )\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\n\t\t/* Store the interesting variables */\n\t\tvar state = {\n\t\t\ttime:    +new Date(),\n\t\t\tstart:   settings._iDisplayStart,\n\t\t\tlength:  settings._iDisplayLength,\n\t\t\torder:   $.extend( true, [], settings.aaSorting ),\n\t\t\tsearch:  _fnSearchToCamel( settings.oPreviousSearch ),\n\t\t\tcolumns: $.map( settings.aoColumns, function ( col, i ) {\n\t\t\t\treturn {\n\t\t\t\t\tvisible: col.bVisible,\n\t\t\t\t\tsearch: _fnSearchToCamel( settings.aoPreSearchCols[i] )\n\t\t\t\t};\n\t\t\t} )\n\t\t};\n\t\n\t\t_fnCallbackFire( settings, \"aoStateSaveParams\", 'stateSaveParams', [settings, state] );\n\t\n\t\tsettings.oSavedState = state;\n\t\tsettings.fnStateSaveCallback.call( settings.oInstance, settings, state );\n\t}\n\t\n\t\n\t/**\n\t * Attempt to load a saved table state\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param {object} oInit DataTables init object so we can override settings\n\t *  @param {function} callback Callback to execute when the state has been loaded\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnLoadState ( settings, oInit, callback )\n\t{\n\t\tvar i, ien;\n\t\tvar columns = settings.aoColumns;\n\t\tvar loaded = function ( s ) {\n\t\t\tif ( ! s || ! s.time ) {\n\t\t\t\tcallback();\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\t// Allow custom and plug-in manipulation functions to alter the saved data set and\n\t\t\t// cancelling of loading by returning false\n\t\t\tvar abStateLoad = _fnCallbackFire( settings, 'aoStateLoadParams', 'stateLoadParams', [settings, s] );\n\t\t\tif ( $.inArray( false, abStateLoad ) !== -1 ) {\n\t\t\t\tcallback();\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\t// Reject old data\n\t\t\tvar duration = settings.iStateDuration;\n\t\t\tif ( duration > 0 && s.time < +new Date() - (duration*1000) ) {\n\t\t\t\tcallback();\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\t// Number of columns have changed - all bets are off, no restore of settings\n\t\t\tif ( s.columns && columns.length !== s.columns.length ) {\n\t\t\t\tcallback();\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\t// Store the saved state so it might be accessed at any time\n\t\t\tsettings.oLoadedState = $.extend( true, {}, s );\n\t\n\t\t\t// Restore key features - todo - for 1.11 this needs to be done by\n\t\t\t// subscribed events\n\t\t\tif ( s.start !== undefined ) {\n\t\t\t\tsettings._iDisplayStart    = s.start;\n\t\t\t\tsettings.iInitDisplayStart = s.start;\n\t\t\t}\n\t\t\tif ( s.length !== undefined ) {\n\t\t\t\tsettings._iDisplayLength   = s.length;\n\t\t\t}\n\t\n\t\t\t// Order\n\t\t\tif ( s.order !== undefined ) {\n\t\t\t\tsettings.aaSorting = [];\n\t\t\t\t$.each( s.order, function ( i, col ) {\n\t\t\t\t\tsettings.aaSorting.push( col[0] >= columns.length ?\n\t\t\t\t\t\t[ 0, col[1] ] :\n\t\t\t\t\t\tcol\n\t\t\t\t\t);\n\t\t\t\t} );\n\t\t\t}\n\t\n\t\t\t// Search\n\t\t\tif ( s.search !== undefined ) {\n\t\t\t\t$.extend( settings.oPreviousSearch, _fnSearchToHung( s.search ) );\n\t\t\t}\n\t\n\t\t\t// Columns\n\t\t\t//\n\t\t\tif ( s.columns ) {\n\t\t\t\tfor ( i=0, ien=s.columns.length ; i<ien ; i++ ) {\n\t\t\t\t\tvar col = s.columns[i];\n\t\n\t\t\t\t\t// Visibility\n\t\t\t\t\tif ( col.visible !== undefined ) {\n\t\t\t\t\t\tcolumns[i].bVisible = col.visible;\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// Search\n\t\t\t\t\tif ( col.search !== undefined ) {\n\t\t\t\t\t\t$.extend( settings.aoPreSearchCols[i], _fnSearchToHung( col.search ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\t_fnCallbackFire( settings, 'aoStateLoaded', 'stateLoaded', [settings, s] );\n\t\t\tcallback();\n\t\t};\n\t\n\t\tif ( ! settings.oFeatures.bStateSave ) {\n\t\t\tcallback();\n\t\t\treturn;\n\t\t}\n\t\n\t\tvar state = settings.fnStateLoadCallback.call( settings.oInstance, settings, loaded );\n\t\n\t\tif ( state !== undefined ) {\n\t\t\tloaded( state );\n\t\t}\n\t\t// otherwise, wait for the loaded callback to be executed\n\t}\n\t\n\t\n\t/**\n\t * Return the settings object for a particular table\n\t *  @param {node} table table we are using as a dataTable\n\t *  @returns {object} Settings object - or null if not found\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnSettingsFromNode ( table )\n\t{\n\t\tvar settings = DataTable.settings;\n\t\tvar idx = $.inArray( table, _pluck( settings, 'nTable' ) );\n\t\n\t\treturn idx !== -1 ?\n\t\t\tsettings[ idx ] :\n\t\t\tnull;\n\t}\n\t\n\t\n\t/**\n\t * Log an error message\n\t *  @param {object} settings dataTables settings object\n\t *  @param {int} level log error messages, or display them to the user\n\t *  @param {string} msg error message\n\t *  @param {int} tn Technical note id to get more information about the error.\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnLog( settings, level, msg, tn )\n\t{\n\t\tmsg = 'DataTables warning: '+\n\t\t\t(settings ? 'table id='+settings.sTableId+' - ' : '')+msg;\n\t\n\t\tif ( tn ) {\n\t\t\tmsg += '. For more information about this error, please see '+\n\t\t\t'http://datatables.net/tn/'+tn;\n\t\t}\n\t\n\t\tif ( ! level  ) {\n\t\t\t// Backwards compatibility pre 1.10\n\t\t\tvar ext = DataTable.ext;\n\t\t\tvar type = ext.sErrMode || ext.errMode;\n\t\n\t\t\tif ( settings ) {\n\t\t\t\t_fnCallbackFire( settings, null, 'error', [ settings, tn, msg ] );\n\t\t\t}\n\t\n\t\t\tif ( type == 'alert' ) {\n\t\t\t\talert( msg );\n\t\t\t}\n\t\t\telse if ( type == 'throw' ) {\n\t\t\t\tthrow new Error(msg);\n\t\t\t}\n\t\t\telse if ( typeof type == 'function' ) {\n\t\t\t\ttype( settings, tn, msg );\n\t\t\t}\n\t\t}\n\t\telse if ( window.console && console.log ) {\n\t\t\tconsole.log( msg );\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * See if a property is defined on one object, if so assign it to the other object\n\t *  @param {object} ret target object\n\t *  @param {object} src source object\n\t *  @param {string} name property\n\t *  @param {string} [mappedName] name to map too - optional, name used if not given\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnMap( ret, src, name, mappedName )\n\t{\n\t\tif ( $.isArray( name ) ) {\n\t\t\t$.each( name, function (i, val) {\n\t\t\t\tif ( $.isArray( val ) ) {\n\t\t\t\t\t_fnMap( ret, src, val[0], val[1] );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t_fnMap( ret, src, val );\n\t\t\t\t}\n\t\t\t} );\n\t\n\t\t\treturn;\n\t\t}\n\t\n\t\tif ( mappedName === undefined ) {\n\t\t\tmappedName = name;\n\t\t}\n\t\n\t\tif ( src[name] !== undefined ) {\n\t\t\tret[mappedName] = src[name];\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Extend objects - very similar to jQuery.extend, but deep copy objects, and\n\t * shallow copy arrays. The reason we need to do this, is that we don't want to\n\t * deep copy array init values (such as aaSorting) since the dev wouldn't be\n\t * able to override them, but we do want to deep copy arrays.\n\t *  @param {object} out Object to extend\n\t *  @param {object} extender Object from which the properties will be applied to\n\t *      out\n\t *  @param {boolean} breakRefs If true, then arrays will be sliced to take an\n\t *      independent copy with the exception of the `data` or `aaData` parameters\n\t *      if they are present. This is so you can pass in a collection to\n\t *      DataTables and have that used as your data source without breaking the\n\t *      references\n\t *  @returns {object} out Reference, just for convenience - out === the return.\n\t *  @memberof DataTable#oApi\n\t *  @todo This doesn't take account of arrays inside the deep copied objects.\n\t */\n\tfunction _fnExtend( out, extender, breakRefs )\n\t{\n\t\tvar val;\n\t\n\t\tfor ( var prop in extender ) {\n\t\t\tif ( extender.hasOwnProperty(prop) ) {\n\t\t\t\tval = extender[prop];\n\t\n\t\t\t\tif ( $.isPlainObject( val ) ) {\n\t\t\t\t\tif ( ! $.isPlainObject( out[prop] ) ) {\n\t\t\t\t\t\tout[prop] = {};\n\t\t\t\t\t}\n\t\t\t\t\t$.extend( true, out[prop], val );\n\t\t\t\t}\n\t\t\t\telse if ( breakRefs && prop !== 'data' && prop !== 'aaData' && $.isArray(val) ) {\n\t\t\t\t\tout[prop] = val.slice();\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tout[prop] = val;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\treturn out;\n\t}\n\t\n\t\n\t/**\n\t * Bind an event handers to allow a click or return key to activate the callback.\n\t * This is good for accessibility since a return on the keyboard will have the\n\t * same effect as a click, if the element has focus.\n\t *  @param {element} n Element to bind the action to\n\t *  @param {object} oData Data object to pass to the triggered function\n\t *  @param {function} fn Callback function for when the event is triggered\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnBindAction( n, oData, fn )\n\t{\n\t\t$(n)\n\t\t\t.on( 'click.DT', oData, function (e) {\n\t\t\t\t\t$(n).trigger('blur'); // Remove focus outline for mouse users\n\t\t\t\t\tfn(e);\n\t\t\t\t} )\n\t\t\t.on( 'keypress.DT', oData, function (e){\n\t\t\t\t\tif ( e.which === 13 ) {\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\tfn(e);\n\t\t\t\t\t}\n\t\t\t\t} )\n\t\t\t.on( 'selectstart.DT', function () {\n\t\t\t\t\t/* Take the brutal approach to cancelling text selection */\n\t\t\t\t\treturn false;\n\t\t\t\t} );\n\t}\n\t\n\t\n\t/**\n\t * Register a callback function. Easily allows a callback function to be added to\n\t * an array store of callback functions that can then all be called together.\n\t *  @param {object} oSettings dataTables settings object\n\t *  @param {string} sStore Name of the array storage for the callbacks in oSettings\n\t *  @param {function} fn Function to be called back\n\t *  @param {string} sName Identifying name for the callback (i.e. a label)\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnCallbackReg( oSettings, sStore, fn, sName )\n\t{\n\t\tif ( fn )\n\t\t{\n\t\t\toSettings[sStore].push( {\n\t\t\t\t\"fn\": fn,\n\t\t\t\t\"sName\": sName\n\t\t\t} );\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Fire callback functions and trigger events. Note that the loop over the\n\t * callback array store is done backwards! Further note that you do not want to\n\t * fire off triggers in time sensitive applications (for example cell creation)\n\t * as its slow.\n\t *  @param {object} settings dataTables settings object\n\t *  @param {string} callbackArr Name of the array storage for the callbacks in\n\t *      oSettings\n\t *  @param {string} eventName Name of the jQuery custom event to trigger. If\n\t *      null no trigger is fired\n\t *  @param {array} args Array of arguments to pass to the callback function /\n\t *      trigger\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnCallbackFire( settings, callbackArr, eventName, args )\n\t{\n\t\tvar ret = [];\n\t\n\t\tif ( callbackArr ) {\n\t\t\tret = $.map( settings[callbackArr].slice().reverse(), function (val, i) {\n\t\t\t\treturn val.fn.apply( settings.oInstance, args );\n\t\t\t} );\n\t\t}\n\t\n\t\tif ( eventName !== null ) {\n\t\t\tvar e = $.Event( eventName+'.dt' );\n\t\n\t\t\t$(settings.nTable).trigger( e, args );\n\t\n\t\t\tret.push( e.result );\n\t\t}\n\t\n\t\treturn ret;\n\t}\n\t\n\t\n\tfunction _fnLengthOverflow ( settings )\n\t{\n\t\tvar\n\t\t\tstart = settings._iDisplayStart,\n\t\t\tend = settings.fnDisplayEnd(),\n\t\t\tlen = settings._iDisplayLength;\n\t\n\t\t/* If we have space to show extra rows (backing up from the end point - then do so */\n\t\tif ( start >= end )\n\t\t{\n\t\t\tstart = end - len;\n\t\t}\n\t\n\t\t// Keep the start record on the current page\n\t\tstart -= (start % len);\n\t\n\t\tif ( len === -1 || start < 0 )\n\t\t{\n\t\t\tstart = 0;\n\t\t}\n\t\n\t\tsettings._iDisplayStart = start;\n\t}\n\t\n\t\n\tfunction _fnRenderer( settings, type )\n\t{\n\t\tvar renderer = settings.renderer;\n\t\tvar host = DataTable.ext.renderer[type];\n\t\n\t\tif ( $.isPlainObject( renderer ) && renderer[type] ) {\n\t\t\t// Specific renderer for this type. If available use it, otherwise use\n\t\t\t// the default.\n\t\t\treturn host[renderer[type]] || host._;\n\t\t}\n\t\telse if ( typeof renderer === 'string' ) {\n\t\t\t// Common renderer - if there is one available for this type use it,\n\t\t\t// otherwise use the default\n\t\t\treturn host[renderer] || host._;\n\t\t}\n\t\n\t\t// Use the default\n\t\treturn host._;\n\t}\n\t\n\t\n\t/**\n\t * Detect the data source being used for the table. Used to simplify the code\n\t * a little (ajax) and to make it compress a little smaller.\n\t *\n\t *  @param {object} settings dataTables settings object\n\t *  @returns {string} Data source\n\t *  @memberof DataTable#oApi\n\t */\n\tfunction _fnDataSource ( settings )\n\t{\n\t\tif ( settings.oFeatures.bServerSide ) {\n\t\t\treturn 'ssp';\n\t\t}\n\t\telse if ( settings.ajax || settings.sAjaxSource ) {\n\t\t\treturn 'ajax';\n\t\t}\n\t\treturn 'dom';\n\t}\n\t\n\n\t\n\t\n\t/**\n\t * Computed structure of the DataTables API, defined by the options passed to\n\t * `DataTable.Api.register()` when building the API.\n\t *\n\t * The structure is built in order to speed creation and extension of the Api\n\t * objects since the extensions are effectively pre-parsed.\n\t *\n\t * The array is an array of objects with the following structure, where this\n\t * base array represents the Api prototype base:\n\t *\n\t *     [\n\t *       {\n\t *         name:      'data'                -- string   - Property name\n\t *         val:       function () {},       -- function - Api method (or undefined if just an object\n\t *         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result\n\t *         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property\n\t *       },\n\t *       {\n\t *         name:     'row'\n\t *         val:       {},\n\t *         methodExt: [ ... ],\n\t *         propExt:   [\n\t *           {\n\t *             name:      'data'\n\t *             val:       function () {},\n\t *             methodExt: [ ... ],\n\t *             propExt:   [ ... ]\n\t *           },\n\t *           ...\n\t *         ]\n\t *       }\n\t *     ]\n\t *\n\t * @type {Array}\n\t * @ignore\n\t */\n\tvar __apiStruct = [];\n\t\n\t\n\t/**\n\t * `Array.prototype` reference.\n\t *\n\t * @type object\n\t * @ignore\n\t */\n\tvar __arrayProto = Array.prototype;\n\t\n\t\n\t/**\n\t * Abstraction for `context` parameter of the `Api` constructor to allow it to\n\t * take several different forms for ease of use.\n\t *\n\t * Each of the input parameter types will be converted to a DataTables settings\n\t * object where possible.\n\t *\n\t * @param  {string|node|jQuery|object} mixed DataTable identifier. Can be one\n\t *   of:\n\t *\n\t *   * `string` - jQuery selector. Any DataTables' matching the given selector\n\t *     with be found and used.\n\t *   * `node` - `TABLE` node which has already been formed into a DataTable.\n\t *   * `jQuery` - A jQuery object of `TABLE` nodes.\n\t *   * `object` - DataTables settings object\n\t *   * `DataTables.Api` - API instance\n\t * @return {array|null} Matching DataTables settings objects. `null` or\n\t *   `undefined` is returned if no matching DataTable is found.\n\t * @ignore\n\t */\n\tvar _toSettings = function ( mixed )\n\t{\n\t\tvar idx, jq;\n\t\tvar settings = DataTable.settings;\n\t\tvar tables = $.map( settings, function (el, i) {\n\t\t\treturn el.nTable;\n\t\t} );\n\t\n\t\tif ( ! mixed ) {\n\t\t\treturn [];\n\t\t}\n\t\telse if ( mixed.nTable && mixed.oApi ) {\n\t\t\t// DataTables settings object\n\t\t\treturn [ mixed ];\n\t\t}\n\t\telse if ( mixed.nodeName && mixed.nodeName.toLowerCase() === 'table' ) {\n\t\t\t// Table node\n\t\t\tidx = $.inArray( mixed, tables );\n\t\t\treturn idx !== -1 ? [ settings[idx] ] : null;\n\t\t}\n\t\telse if ( mixed && typeof mixed.settings === 'function' ) {\n\t\t\treturn mixed.settings().toArray();\n\t\t}\n\t\telse if ( typeof mixed === 'string' ) {\n\t\t\t// jQuery selector\n\t\t\tjq = $(mixed);\n\t\t}\n\t\telse if ( mixed instanceof $ ) {\n\t\t\t// jQuery object (also DataTables instance)\n\t\t\tjq = mixed;\n\t\t}\n\t\n\t\tif ( jq ) {\n\t\t\treturn jq.map( function(i) {\n\t\t\t\tidx = $.inArray( this, tables );\n\t\t\t\treturn idx !== -1 ? settings[idx] : null;\n\t\t\t} ).toArray();\n\t\t}\n\t};\n\t\n\t\n\t/**\n\t * DataTables API class - used to control and interface with  one or more\n\t * DataTables enhanced tables.\n\t *\n\t * The API class is heavily based on jQuery, presenting a chainable interface\n\t * that you can use to interact with tables. Each instance of the API class has\n\t * a \"context\" - i.e. the tables that it will operate on. This could be a single\n\t * table, all tables on a page or a sub-set thereof.\n\t *\n\t * Additionally the API is designed to allow you to easily work with the data in\n\t * the tables, retrieving and manipulating it as required. This is done by\n\t * presenting the API class as an array like interface. The contents of the\n\t * array depend upon the actions requested by each method (for example\n\t * `rows().nodes()` will return an array of nodes, while `rows().data()` will\n\t * return an array of objects or arrays depending upon your table's\n\t * configuration). The API object has a number of array like methods (`push`,\n\t * `pop`, `reverse` etc) as well as additional helper methods (`each`, `pluck`,\n\t * `unique` etc) to assist your working with the data held in a table.\n\t *\n\t * Most methods (those which return an Api instance) are chainable, which means\n\t * the return from a method call also has all of the methods available that the\n\t * top level object had. For example, these two calls are equivalent:\n\t *\n\t *     // Not chained\n\t *     api.row.add( {...} );\n\t *     api.draw();\n\t *\n\t *     // Chained\n\t *     api.row.add( {...} ).draw();\n\t *\n\t * @class DataTable.Api\n\t * @param {array|object|string|jQuery} context DataTable identifier. This is\n\t *   used to define which DataTables enhanced tables this API will operate on.\n\t *   Can be one of:\n\t *\n\t *   * `string` - jQuery selector. Any DataTables' matching the given selector\n\t *     with be found and used.\n\t *   * `node` - `TABLE` node which has already been formed into a DataTable.\n\t *   * `jQuery` - A jQuery object of `TABLE` nodes.\n\t *   * `object` - DataTables settings object\n\t * @param {array} [data] Data to initialise the Api instance with.\n\t *\n\t * @example\n\t *   // Direct initialisation during DataTables construction\n\t *   var api = $('#example').DataTable();\n\t *\n\t * @example\n\t *   // Initialisation using a DataTables jQuery object\n\t *   var api = $('#example').dataTable().api();\n\t *\n\t * @example\n\t *   // Initialisation as a constructor\n\t *   var api = new $.fn.DataTable.Api( 'table.dataTable' );\n\t */\n\t_Api = function ( context, data )\n\t{\n\t\tif ( ! (this instanceof _Api) ) {\n\t\t\treturn new _Api( context, data );\n\t\t}\n\t\n\t\tvar settings = [];\n\t\tvar ctxSettings = function ( o ) {\n\t\t\tvar a = _toSettings( o );\n\t\t\tif ( a ) {\n\t\t\t\tsettings.push.apply( settings, a );\n\t\t\t}\n\t\t};\n\t\n\t\tif ( $.isArray( context ) ) {\n\t\t\tfor ( var i=0, ien=context.length ; i<ien ; i++ ) {\n\t\t\t\tctxSettings( context[i] );\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tctxSettings( context );\n\t\t}\n\t\n\t\t// Remove duplicates\n\t\tthis.context = _unique( settings );\n\t\n\t\t// Initial data\n\t\tif ( data ) {\n\t\t\t$.merge( this, data );\n\t\t}\n\t\n\t\t// selector\n\t\tthis.selector = {\n\t\t\trows: null,\n\t\t\tcols: null,\n\t\t\topts: null\n\t\t};\n\t\n\t\t_Api.extend( this, this, __apiStruct );\n\t};\n\t\n\tDataTable.Api = _Api;\n\t\n\t// Don't destroy the existing prototype, just extend it. Required for jQuery 2's\n\t// isPlainObject.\n\t$.extend( _Api.prototype, {\n\t\tany: function ()\n\t\t{\n\t\t\treturn this.count() !== 0;\n\t\t},\n\t\n\t\n\t\tconcat:  __arrayProto.concat,\n\t\n\t\n\t\tcontext: [], // array of table settings objects\n\t\n\t\n\t\tcount: function ()\n\t\t{\n\t\t\treturn this.flatten().length;\n\t\t},\n\t\n\t\n\t\teach: function ( fn )\n\t\t{\n\t\t\tfor ( var i=0, ien=this.length ; i<ien; i++ ) {\n\t\t\t\tfn.call( this, this[i], i, this );\n\t\t\t}\n\t\n\t\t\treturn this;\n\t\t},\n\t\n\t\n\t\teq: function ( idx )\n\t\t{\n\t\t\tvar ctx = this.context;\n\t\n\t\t\treturn ctx.length > idx ?\n\t\t\t\tnew _Api( ctx[idx], this[idx] ) :\n\t\t\t\tnull;\n\t\t},\n\t\n\t\n\t\tfilter: function ( fn )\n\t\t{\n\t\t\tvar a = [];\n\t\n\t\t\tif ( __arrayProto.filter ) {\n\t\t\t\ta = __arrayProto.filter.call( this, fn, this );\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Compatibility for browsers without EMCA-252-5 (JS 1.6)\n\t\t\t\tfor ( var i=0, ien=this.length ; i<ien ; i++ ) {\n\t\t\t\t\tif ( fn.call( this, this[i], i, this ) ) {\n\t\t\t\t\t\ta.push( this[i] );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\treturn new _Api( this.context, a );\n\t\t},\n\t\n\t\n\t\tflatten: function ()\n\t\t{\n\t\t\tvar a = [];\n\t\t\treturn new _Api( this.context, a.concat.apply( a, this.toArray() ) );\n\t\t},\n\t\n\t\n\t\tjoin:    __arrayProto.join,\n\t\n\t\n\t\tindexOf: __arrayProto.indexOf || function (obj, start)\n\t\t{\n\t\t\tfor ( var i=(start || 0), ien=this.length ; i<ien ; i++ ) {\n\t\t\t\tif ( this[i] === obj ) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn -1;\n\t\t},\n\t\n\t\titerator: function ( flatten, type, fn, alwaysNew ) {\n\t\t\tvar\n\t\t\t\ta = [], ret,\n\t\t\t\ti, ien, j, jen,\n\t\t\t\tcontext = this.context,\n\t\t\t\trows, items, item,\n\t\t\t\tselector = this.selector;\n\t\n\t\t\t// Argument shifting\n\t\t\tif ( typeof flatten === 'string' ) {\n\t\t\t\talwaysNew = fn;\n\t\t\t\tfn = type;\n\t\t\t\ttype = flatten;\n\t\t\t\tflatten = false;\n\t\t\t}\n\t\n\t\t\tfor ( i=0, ien=context.length ; i<ien ; i++ ) {\n\t\t\t\tvar apiInst = new _Api( context[i] );\n\t\n\t\t\t\tif ( type === 'table' ) {\n\t\t\t\t\tret = fn.call( apiInst, context[i], i );\n\t\n\t\t\t\t\tif ( ret !== undefined ) {\n\t\t\t\t\t\ta.push( ret );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if ( type === 'columns' || type === 'rows' ) {\n\t\t\t\t\t// this has same length as context - one entry for each table\n\t\t\t\t\tret = fn.call( apiInst, context[i], this[i], i );\n\t\n\t\t\t\t\tif ( ret !== undefined ) {\n\t\t\t\t\t\ta.push( ret );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if ( type === 'column' || type === 'column-rows' || type === 'row' || type === 'cell' ) {\n\t\t\t\t\t// columns and rows share the same structure.\n\t\t\t\t\t// 'this' is an array of column indexes for each context\n\t\t\t\t\titems = this[i];\n\t\n\t\t\t\t\tif ( type === 'column-rows' ) {\n\t\t\t\t\t\trows = _selector_row_indexes( context[i], selector.opts );\n\t\t\t\t\t}\n\t\n\t\t\t\t\tfor ( j=0, jen=items.length ; j<jen ; j++ ) {\n\t\t\t\t\t\titem = items[j];\n\t\n\t\t\t\t\t\tif ( type === 'cell' ) {\n\t\t\t\t\t\t\tret = fn.call( apiInst, context[i], item.row, item.column, i, j );\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tret = fn.call( apiInst, context[i], item, i, j, rows );\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tif ( ret !== undefined ) {\n\t\t\t\t\t\t\ta.push( ret );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tif ( a.length || alwaysNew ) {\n\t\t\t\tvar api = new _Api( context, flatten ? a.concat.apply( [], a ) : a );\n\t\t\t\tvar apiSelector = api.selector;\n\t\t\t\tapiSelector.rows = selector.rows;\n\t\t\t\tapiSelector.cols = selector.cols;\n\t\t\t\tapiSelector.opts = selector.opts;\n\t\t\t\treturn api;\n\t\t\t}\n\t\t\treturn this;\n\t\t},\n\t\n\t\n\t\tlastIndexOf: __arrayProto.lastIndexOf || function (obj, start)\n\t\t{\n\t\t\t// Bit cheeky...\n\t\t\treturn this.indexOf.apply( this.toArray.reverse(), arguments );\n\t\t},\n\t\n\t\n\t\tlength:  0,\n\t\n\t\n\t\tmap: function ( fn )\n\t\t{\n\t\t\tvar a = [];\n\t\n\t\t\tif ( __arrayProto.map ) {\n\t\t\t\ta = __arrayProto.map.call( this, fn, this );\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Compatibility for browsers without EMCA-252-5 (JS 1.6)\n\t\t\t\tfor ( var i=0, ien=this.length ; i<ien ; i++ ) {\n\t\t\t\t\ta.push( fn.call( this, this[i], i ) );\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\treturn new _Api( this.context, a );\n\t\t},\n\t\n\t\n\t\tpluck: function ( prop )\n\t\t{\n\t\t\treturn this.map( function ( el ) {\n\t\t\t\treturn el[ prop ];\n\t\t\t} );\n\t\t},\n\t\n\t\tpop:     __arrayProto.pop,\n\t\n\t\n\t\tpush:    __arrayProto.push,\n\t\n\t\n\t\t// Does not return an API instance\n\t\treduce: __arrayProto.reduce || function ( fn, init )\n\t\t{\n\t\t\treturn _fnReduce( this, fn, init, 0, this.length, 1 );\n\t\t},\n\t\n\t\n\t\treduceRight: __arrayProto.reduceRight || function ( fn, init )\n\t\t{\n\t\t\treturn _fnReduce( this, fn, init, this.length-1, -1, -1 );\n\t\t},\n\t\n\t\n\t\treverse: __arrayProto.reverse,\n\t\n\t\n\t\t// Object with rows, columns and opts\n\t\tselector: null,\n\t\n\t\n\t\tshift:   __arrayProto.shift,\n\t\n\t\n\t\tslice: function () {\n\t\t\treturn new _Api( this.context, this );\n\t\t},\n\t\n\t\n\t\tsort:    __arrayProto.sort, // ? name - order?\n\t\n\t\n\t\tsplice:  __arrayProto.splice,\n\t\n\t\n\t\ttoArray: function ()\n\t\t{\n\t\t\treturn __arrayProto.slice.call( this );\n\t\t},\n\t\n\t\n\t\tto$: function ()\n\t\t{\n\t\t\treturn $( this );\n\t\t},\n\t\n\t\n\t\ttoJQuery: function ()\n\t\t{\n\t\t\treturn $( this );\n\t\t},\n\t\n\t\n\t\tunique: function ()\n\t\t{\n\t\t\treturn new _Api( this.context, _unique(this) );\n\t\t},\n\t\n\t\n\t\tunshift: __arrayProto.unshift\n\t} );\n\t\n\t\n\t_Api.extend = function ( scope, obj, ext )\n\t{\n\t\t// Only extend API instances and static properties of the API\n\t\tif ( ! ext.length || ! obj || ( ! (obj instanceof _Api) && ! obj.__dt_wrapper ) ) {\n\t\t\treturn;\n\t\t}\n\t\n\t\tvar\n\t\t\ti, ien,\n\t\t\tstruct,\n\t\t\tmethodScoping = function ( scope, fn, struc ) {\n\t\t\t\treturn function () {\n\t\t\t\t\tvar ret = fn.apply( scope, arguments );\n\t\n\t\t\t\t\t// Method extension\n\t\t\t\t\t_Api.extend( ret, ret, struc.methodExt );\n\t\t\t\t\treturn ret;\n\t\t\t\t};\n\t\t\t};\n\t\n\t\tfor ( i=0, ien=ext.length ; i<ien ; i++ ) {\n\t\t\tstruct = ext[i];\n\t\n\t\t\t// Value\n\t\t\tobj[ struct.name ] = struct.type === 'function' ?\n\t\t\t\tmethodScoping( scope, struct.val, struct ) :\n\t\t\t\tstruct.type === 'object' ?\n\t\t\t\t\t{} :\n\t\t\t\t\tstruct.val;\n\t\n\t\t\tobj[ struct.name ].__dt_wrapper = true;\n\t\n\t\t\t// Property extension\n\t\t\t_Api.extend( scope, obj[ struct.name ], struct.propExt );\n\t\t}\n\t};\n\t\n\t\n\t// @todo - Is there need for an augment function?\n\t// _Api.augment = function ( inst, name )\n\t// {\n\t// \t// Find src object in the structure from the name\n\t// \tvar parts = name.split('.');\n\t\n\t// \t_Api.extend( inst, obj );\n\t// };\n\t\n\t\n\t//     [\n\t//       {\n\t//         name:      'data'                -- string   - Property name\n\t//         val:       function () {},       -- function - Api method (or undefined if just an object\n\t//         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result\n\t//         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property\n\t//       },\n\t//       {\n\t//         name:     'row'\n\t//         val:       {},\n\t//         methodExt: [ ... ],\n\t//         propExt:   [\n\t//           {\n\t//             name:      'data'\n\t//             val:       function () {},\n\t//             methodExt: [ ... ],\n\t//             propExt:   [ ... ]\n\t//           },\n\t//           ...\n\t//         ]\n\t//       }\n\t//     ]\n\t\n\t_Api.register = _api_register = function ( name, val )\n\t{\n\t\tif ( $.isArray( name ) ) {\n\t\t\tfor ( var j=0, jen=name.length ; j<jen ; j++ ) {\n\t\t\t\t_Api.register( name[j], val );\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\n\t\tvar\n\t\t\ti, ien,\n\t\t\their = name.split('.'),\n\t\t\tstruct = __apiStruct,\n\t\t\tkey, method;\n\t\n\t\tvar find = function ( src, name ) {\n\t\t\tfor ( var i=0, ien=src.length ; i<ien ; i++ ) {\n\t\t\t\tif ( src[i].name === name ) {\n\t\t\t\t\treturn src[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t};\n\t\n\t\tfor ( i=0, ien=heir.length ; i<ien ; i++ ) {\n\t\t\tmethod = heir[i].indexOf('()') !== -1;\n\t\t\tkey = method ?\n\t\t\t\their[i].replace('()', '') :\n\t\t\t\their[i];\n\t\n\t\t\tvar src = find( struct, key );\n\t\t\tif ( ! src ) {\n\t\t\t\tsrc = {\n\t\t\t\t\tname:      key,\n\t\t\t\t\tval:       {},\n\t\t\t\t\tmethodExt: [],\n\t\t\t\t\tpropExt:   [],\n\t\t\t\t\ttype:      'object'\n\t\t\t\t};\n\t\t\t\tstruct.push( src );\n\t\t\t}\n\t\n\t\t\tif ( i === ien-1 ) {\n\t\t\t\tsrc.val = val;\n\t\t\t\tsrc.type = typeof val === 'function' ?\n\t\t\t\t\t'function' :\n\t\t\t\t\t$.isPlainObject( val ) ?\n\t\t\t\t\t\t'object' :\n\t\t\t\t\t\t'other';\n\t\t\t}\n\t\t\telse {\n\t\t\t\tstruct = method ?\n\t\t\t\t\tsrc.methodExt :\n\t\t\t\t\tsrc.propExt;\n\t\t\t}\n\t\t}\n\t};\n\t\n\t_Api.registerPlural = _api_registerPlural = function ( pluralName, singularName, val ) {\n\t\t_Api.register( pluralName, val );\n\t\n\t\t_Api.register( singularName, function () {\n\t\t\tvar ret = val.apply( this, arguments );\n\t\n\t\t\tif ( ret === this ) {\n\t\t\t\t// Returned item is the API instance that was passed in, return it\n\t\t\t\treturn this;\n\t\t\t}\n\t\t\telse if ( ret instanceof _Api ) {\n\t\t\t\t// New API instance returned, want the value from the first item\n\t\t\t\t// in the returned array for the singular result.\n\t\t\t\treturn ret.length ?\n\t\t\t\t\t$.isArray( ret[0] ) ?\n\t\t\t\t\t\tnew _Api( ret.context, ret[0] ) : // Array results are 'enhanced'\n\t\t\t\t\t\tret[0] :\n\t\t\t\t\tundefined;\n\t\t\t}\n\t\n\t\t\t// Non-API return - just fire it back\n\t\t\treturn ret;\n\t\t} );\n\t};\n\t\n\t\n\t/**\n\t * Selector for HTML tables. Apply the given selector to the give array of\n\t * DataTables settings objects.\n\t *\n\t * @param {string|integer} [selector] jQuery selector string or integer\n\t * @param  {array} Array of DataTables settings objects to be filtered\n\t * @return {array}\n\t * @ignore\n\t */\n\tvar __table_selector = function ( selector, a )\n\t{\n\t\tif ( $.isArray(selector) ) {\n\t\t\treturn $.map( selector, function (item) {\n\t\t\t\treturn __table_selector(item, a);\n\t\t\t} );\n\t\t}\n\t\n\t\t// Integer is used to pick out a table by index\n\t\tif ( typeof selector === 'number' ) {\n\t\t\treturn [ a[ selector ] ];\n\t\t}\n\t\n\t\t// Perform a jQuery selector on the table nodes\n\t\tvar nodes = $.map( a, function (el, i) {\n\t\t\treturn el.nTable;\n\t\t} );\n\t\n\t\treturn $(nodes)\n\t\t\t.filter( selector )\n\t\t\t.map( function (i) {\n\t\t\t\t// Need to translate back from the table node to the settings\n\t\t\t\tvar idx = $.inArray( this, nodes );\n\t\t\t\treturn a[ idx ];\n\t\t\t} )\n\t\t\t.toArray();\n\t};\n\t\n\t\n\t\n\t/**\n\t * Context selector for the API's context (i.e. the tables the API instance\n\t * refers to.\n\t *\n\t * @name    DataTable.Api#tables\n\t * @param {string|integer} [selector] Selector to pick which tables the iterator\n\t *   should operate on. If not given, all tables in the current context are\n\t *   used. This can be given as a jQuery selector (for example `':gt(0)'`) to\n\t *   select multiple tables or as an integer to select a single table.\n\t * @returns {DataTable.Api} Returns a new API instance if a selector is given.\n\t */\n\t_api_register( 'tables()', function ( selector ) {\n\t\t// A new instance is created if there was a selector specified\n\t\treturn selector !== undefined && selector !== null ?\n\t\t\tnew _Api( __table_selector( selector, this.context ) ) :\n\t\t\tthis;\n\t} );\n\t\n\t\n\t_api_register( 'table()', function ( selector ) {\n\t\tvar tables = this.tables( selector );\n\t\tvar ctx = tables.context;\n\t\n\t\t// Truncate to the first matched table\n\t\treturn ctx.length ?\n\t\t\tnew _Api( ctx[0] ) :\n\t\t\ttables;\n\t} );\n\t\n\t\n\t_api_registerPlural( 'tables().nodes()', 'table().node()' , function () {\n\t\treturn this.iterator( 'table', function ( ctx ) {\n\t\t\treturn ctx.nTable;\n\t\t}, 1 );\n\t} );\n\t\n\t\n\t_api_registerPlural( 'tables().body()', 'table().body()' , function () {\n\t\treturn this.iterator( 'table', function ( ctx ) {\n\t\t\treturn ctx.nTBody;\n\t\t}, 1 );\n\t} );\n\t\n\t\n\t_api_registerPlural( 'tables().header()', 'table().header()' , function () {\n\t\treturn this.iterator( 'table', function ( ctx ) {\n\t\t\treturn ctx.nTHead;\n\t\t}, 1 );\n\t} );\n\t\n\t\n\t_api_registerPlural( 'tables().footer()', 'table().footer()' , function () {\n\t\treturn this.iterator( 'table', function ( ctx ) {\n\t\t\treturn ctx.nTFoot;\n\t\t}, 1 );\n\t} );\n\t\n\t\n\t_api_registerPlural( 'tables().containers()', 'table().container()' , function () {\n\t\treturn this.iterator( 'table', function ( ctx ) {\n\t\t\treturn ctx.nTableWrapper;\n\t\t}, 1 );\n\t} );\n\t\n\t\n\t\n\t/**\n\t * Redraw the tables in the current context.\n\t */\n\t_api_register( 'draw()', function ( paging ) {\n\t\treturn this.iterator( 'table', function ( settings ) {\n\t\t\tif ( paging === 'page' ) {\n\t\t\t\t_fnDraw( settings );\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif ( typeof paging === 'string' ) {\n\t\t\t\t\tpaging = paging === 'full-hold' ?\n\t\t\t\t\t\tfalse :\n\t\t\t\t\t\ttrue;\n\t\t\t\t}\n\t\n\t\t\t\t_fnReDraw( settings, paging===false );\n\t\t\t}\n\t\t} );\n\t} );\n\t\n\t\n\t\n\t/**\n\t * Get the current page index.\n\t *\n\t * @return {integer} Current page index (zero based)\n\t *//**\n\t * Set the current page.\n\t *\n\t * Note that if you attempt to show a page which does not exist, DataTables will\n\t * not throw an error, but rather reset the paging.\n\t *\n\t * @param {integer|string} action The paging action to take. This can be one of:\n\t *  * `integer` - The page index to jump to\n\t *  * `string` - An action to take:\n\t *    * `first` - Jump to first page.\n\t *    * `next` - Jump to the next page\n\t *    * `previous` - Jump to previous page\n\t *    * `last` - Jump to the last page.\n\t * @returns {DataTables.Api} this\n\t */\n\t_api_register( 'page()', function ( action ) {\n\t\tif ( action === undefined ) {\n\t\t\treturn this.page.info().page; // not an expensive call\n\t\t}\n\t\n\t\t// else, have an action to take on all tables\n\t\treturn this.iterator( 'table', function ( settings ) {\n\t\t\t_fnPageChange( settings, action );\n\t\t} );\n\t} );\n\t\n\t\n\t/**\n\t * Paging information for the first table in the current context.\n\t *\n\t * If you require paging information for another table, use the `table()` method\n\t * with a suitable selector.\n\t *\n\t * @return {object} Object with the following properties set:\n\t *  * `page` - Current page index (zero based - i.e. the first page is `0`)\n\t *  * `pages` - Total number of pages\n\t *  * `start` - Display index for the first record shown on the current page\n\t *  * `end` - Display index for the last record shown on the current page\n\t *  * `length` - Display length (number of records). Note that generally `start\n\t *    + length = end`, but this is not always true, for example if there are\n\t *    only 2 records to show on the final page, with a length of 10.\n\t *  * `recordsTotal` - Full data set length\n\t *  * `recordsDisplay` - Data set length once the current filtering criterion\n\t *    are applied.\n\t */\n\t_api_register( 'page.info()', function ( action ) {\n\t\tif ( this.context.length === 0 ) {\n\t\t\treturn undefined;\n\t\t}\n\t\n\t\tvar\n\t\t\tsettings   = this.context[0],\n\t\t\tstart      = settings._iDisplayStart,\n\t\t\tlen        = settings.oFeatures.bPaginate ? settings._iDisplayLength : -1,\n\t\t\tvisRecords = settings.fnRecordsDisplay(),\n\t\t\tall        = len === -1;\n\t\n\t\treturn {\n\t\t\t\"page\":           all ? 0 : Math.floor( start / len ),\n\t\t\t\"pages\":          all ? 1 : Math.ceil( visRecords / len ),\n\t\t\t\"start\":          start,\n\t\t\t\"end\":            settings.fnDisplayEnd(),\n\t\t\t\"length\":         len,\n\t\t\t\"recordsTotal\":   settings.fnRecordsTotal(),\n\t\t\t\"recordsDisplay\": visRecords,\n\t\t\t\"serverSide\":     _fnDataSource( settings ) === 'ssp'\n\t\t};\n\t} );\n\t\n\t\n\t/**\n\t * Get the current page length.\n\t *\n\t * @return {integer} Current page length. Note `-1` indicates that all records\n\t *   are to be shown.\n\t *//**\n\t * Set the current page length.\n\t *\n\t * @param {integer} Page length to set. Use `-1` to show all records.\n\t * @returns {DataTables.Api} this\n\t */\n\t_api_register( 'page.len()', function ( len ) {\n\t\t// Note that we can't call this function 'length()' because `length`\n\t\t// is a Javascript property of functions which defines how many arguments\n\t\t// the function expects.\n\t\tif ( len === undefined ) {\n\t\t\treturn this.context.length !== 0 ?\n\t\t\t\tthis.context[0]._iDisplayLength :\n\t\t\t\tundefined;\n\t\t}\n\t\n\t\t// else, set the page length\n\t\treturn this.iterator( 'table', function ( settings ) {\n\t\t\t_fnLengthChange( settings, len );\n\t\t} );\n\t} );\n\t\n\t\n\t\n\tvar __reload = function ( settings, holdPosition, callback ) {\n\t\t// Use the draw event to trigger a callback\n\t\tif ( callback ) {\n\t\t\tvar api = new _Api( settings );\n\t\n\t\t\tapi.one( 'draw', function () {\n\t\t\t\tcallback( api.ajax.json() );\n\t\t\t} );\n\t\t}\n\t\n\t\tif ( _fnDataSource( settings ) == 'ssp' ) {\n\t\t\t_fnReDraw( settings, holdPosition );\n\t\t}\n\t\telse {\n\t\t\t_fnProcessingDisplay( settings, true );\n\t\n\t\t\t// Cancel an existing request\n\t\t\tvar xhr = settings.jqXHR;\n\t\t\tif ( xhr && xhr.readyState !== 4 ) {\n\t\t\t\txhr.abort();\n\t\t\t}\n\t\n\t\t\t// Trigger xhr\n\t\t\t_fnBuildAjax( settings, [], function( json ) {\n\t\t\t\t_fnClearTable( settings );\n\t\n\t\t\t\tvar data = _fnAjaxDataSrc( settings, json );\n\t\t\t\tfor ( var i=0, ien=data.length ; i<ien ; i++ ) {\n\t\t\t\t\t_fnAddData( settings, data[i] );\n\t\t\t\t}\n\t\n\t\t\t\t_fnReDraw( settings, holdPosition );\n\t\t\t\t_fnProcessingDisplay( settings, false );\n\t\t\t} );\n\t\t}\n\t};\n\t\n\t\n\t/**\n\t * Get the JSON response from the last Ajax request that DataTables made to the\n\t * server. Note that this returns the JSON from the first table in the current\n\t * context.\n\t *\n\t * @return {object} JSON received from the server.\n\t */\n\t_api_register( 'ajax.json()', function () {\n\t\tvar ctx = this.context;\n\t\n\t\tif ( ctx.length > 0 ) {\n\t\t\treturn ctx[0].json;\n\t\t}\n\t\n\t\t// else return undefined;\n\t} );\n\t\n\t\n\t/**\n\t * Get the data submitted in the last Ajax request\n\t */\n\t_api_register( 'ajax.params()', function () {\n\t\tvar ctx = this.context;\n\t\n\t\tif ( ctx.length > 0 ) {\n\t\t\treturn ctx[0].oAjaxData;\n\t\t}\n\t\n\t\t// else return undefined;\n\t} );\n\t\n\t\n\t/**\n\t * Reload tables from the Ajax data source. Note that this function will\n\t * automatically re-draw the table when the remote data has been loaded.\n\t *\n\t * @param {boolean} [reset=true] Reset (default) or hold the current paging\n\t *   position. A full re-sort and re-filter is performed when this method is\n\t *   called, which is why the pagination reset is the default action.\n\t * @returns {DataTables.Api} this\n\t */\n\t_api_register( 'ajax.reload()', function ( callback, resetPaging ) {\n\t\treturn this.iterator( 'table', function (settings) {\n\t\t\t__reload( settings, resetPaging===false, callback );\n\t\t} );\n\t} );\n\t\n\t\n\t/**\n\t * Get the current Ajax URL. Note that this returns the URL from the first\n\t * table in the current context.\n\t *\n\t * @return {string} Current Ajax source URL\n\t *//**\n\t * Set the Ajax URL. Note that this will set the URL for all tables in the\n\t * current context.\n\t *\n\t * @param {string} url URL to set.\n\t * @returns {DataTables.Api} this\n\t */\n\t_api_register( 'ajax.url()', function ( url ) {\n\t\tvar ctx = this.context;\n\t\n\t\tif ( url === undefined ) {\n\t\t\t// get\n\t\t\tif ( ctx.length === 0 ) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tctx = ctx[0];\n\t\n\t\t\treturn ctx.ajax ?\n\t\t\t\t$.isPlainObject( ctx.ajax ) ?\n\t\t\t\t\tctx.ajax.url :\n\t\t\t\t\tctx.ajax :\n\t\t\t\tctx.sAjaxSource;\n\t\t}\n\t\n\t\t// set\n\t\treturn this.iterator( 'table', function ( settings ) {\n\t\t\tif ( $.isPlainObject( settings.ajax ) ) {\n\t\t\t\tsettings.ajax.url = url;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsettings.ajax = url;\n\t\t\t}\n\t\t\t// No need to consider sAjaxSource here since DataTables gives priority\n\t\t\t// to `ajax` over `sAjaxSource`. So setting `ajax` here, renders any\n\t\t\t// value of `sAjaxSource` redundant.\n\t\t} );\n\t} );\n\t\n\t\n\t/**\n\t * Load data from the newly set Ajax URL. Note that this method is only\n\t * available when `ajax.url()` is used to set a URL. Additionally, this method\n\t * has the same effect as calling `ajax.reload()` but is provided for\n\t * convenience when setting a new URL. Like `ajax.reload()` it will\n\t * automatically redraw the table once the remote data has been loaded.\n\t *\n\t * @returns {DataTables.Api} this\n\t */\n\t_api_register( 'ajax.url().load()', function ( callback, resetPaging ) {\n\t\t// Same as a reload, but makes sense to present it for easy access after a\n\t\t// url change\n\t\treturn this.iterator( 'table', function ( ctx ) {\n\t\t\t__reload( ctx, resetPaging===false, callback );\n\t\t} );\n\t} );\n\t\n\t\n\t\n\t\n\tvar _selector_run = function ( type, selector, selectFn, settings, opts )\n\t{\n\t\tvar\n\t\t\tout = [], res,\n\t\t\ta, i, ien, j, jen,\n\t\t\tselectorType = typeof selector;\n\t\n\t\t// Can't just check for isArray here, as an API or jQuery instance might be\n\t\t// given with their array like look\n\t\tif ( ! selector || selectorType === 'string' || selectorType === 'function' || selector.length === undefined ) {\n\t\t\tselector = [ selector ];\n\t\t}\n\t\n\t\tfor ( i=0, ien=selector.length ; i<ien ; i++ ) {\n\t\t\t// Only split on simple strings - complex expressions will be jQuery selectors\n\t\t\ta = selector[i] && selector[i].split && ! selector[i].match(/[\\[\\(:]/) ?\n\t\t\t\tselector[i].split(',') :\n\t\t\t\t[ selector[i] ];\n\t\n\t\t\tfor ( j=0, jen=a.length ; j<jen ; j++ ) {\n\t\t\t\tres = selectFn( typeof a[j] === 'string' ? $.trim(a[j]) : a[j] );\n\t\n\t\t\t\tif ( res && res.length ) {\n\t\t\t\t\tout = out.concat( res );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\t// selector extensions\n\t\tvar ext = _ext.selector[ type ];\n\t\tif ( ext.length ) {\n\t\t\tfor ( i=0, ien=ext.length ; i<ien ; i++ ) {\n\t\t\t\tout = ext[i]( settings, opts, out );\n\t\t\t}\n\t\t}\n\t\n\t\treturn _unique( out );\n\t};\n\t\n\t\n\tvar _selector_opts = function ( opts )\n\t{\n\t\tif ( ! opts ) {\n\t\t\topts = {};\n\t\t}\n\t\n\t\t// Backwards compatibility for 1.9- which used the terminology filter rather\n\t\t// than search\n\t\tif ( opts.filter && opts.search === undefined ) {\n\t\t\topts.search = opts.filter;\n\t\t}\n\t\n\t\treturn $.extend( {\n\t\t\tsearch: 'none',\n\t\t\torder: 'current',\n\t\t\tpage: 'all'\n\t\t}, opts );\n\t};\n\t\n\t\n\tvar _selector_first = function ( inst )\n\t{\n\t\t// Reduce the API instance to the first item found\n\t\tfor ( var i=0, ien=inst.length ; i<ien ; i++ ) {\n\t\t\tif ( inst[i].length > 0 ) {\n\t\t\t\t// Assign the first element to the first item in the instance\n\t\t\t\t// and truncate the instance and context\n\t\t\t\tinst[0] = inst[i];\n\t\t\t\tinst[0].length = 1;\n\t\t\t\tinst.length = 1;\n\t\t\t\tinst.context = [ inst.context[i] ];\n\t\n\t\t\t\treturn inst;\n\t\t\t}\n\t\t}\n\t\n\t\t// Not found - return an empty instance\n\t\tinst.length = 0;\n\t\treturn inst;\n\t};\n\t\n\t\n\tvar _selector_row_indexes = function ( settings, opts )\n\t{\n\t\tvar\n\t\t\ti, ien, tmp, a=[],\n\t\t\tdisplayFiltered = settings.aiDisplay,\n\t\t\tdisplayMaster = settings.aiDisplayMaster;\n\t\n\t\tvar\n\t\t\tsearch = opts.search,  // none, applied, removed\n\t\t\torder  = opts.order,   // applied, current, index (original - compatibility with 1.9)\n\t\t\tpage   = opts.page;    // all, current\n\t\n\t\tif ( _fnDataSource( settings ) == 'ssp' ) {\n\t\t\t// In server-side processing mode, most options are irrelevant since\n\t\t\t// rows not shown don't exist and the index order is the applied order\n\t\t\t// Removed is a special case - for consistency just return an empty\n\t\t\t// array\n\t\t\treturn search === 'removed' ?\n\t\t\t\t[] :\n\t\t\t\t_range( 0, displayMaster.length );\n\t\t}\n\t\telse if ( page == 'current' ) {\n\t\t\t// Current page implies that order=current and fitler=applied, since it is\n\t\t\t// fairly senseless otherwise, regardless of what order and search actually\n\t\t\t// are\n\t\t\tfor ( i=settings._iDisplayStart, ien=settings.fnDisplayEnd() ; i<ien ; i++ ) {\n\t\t\t\ta.push( displayFiltered[i] );\n\t\t\t}\n\t\t}\n\t\telse if ( order == 'current' || order == 'applied' ) {\n\t\t\tif ( search == 'none') {\n\t\t\t\ta = displayMaster.slice();\n\t\t\t}\n\t\t\telse if ( search == 'applied' ) {\n\t\t\t\ta = displayFiltered.slice();\n\t\t\t}\n\t\t\telse if ( search == 'removed' ) {\n\t\t\t\t// O(n+m) solution by creating a hash map\n\t\t\t\tvar displayFilteredMap = {};\n\t\n\t\t\t\tfor ( var i=0, ien=displayFiltered.length ; i<ien ; i++ ) {\n\t\t\t\t\tdisplayFilteredMap[displayFiltered[i]] = null;\n\t\t\t\t}\n\t\n\t\t\t\ta = $.map( displayMaster, function (el) {\n\t\t\t\t\treturn ! displayFilteredMap.hasOwnProperty(el) ?\n\t\t\t\t\t\tel :\n\t\t\t\t\t\tnull;\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\t\telse if ( order == 'index' || order == 'original' ) {\n\t\t\tfor ( i=0, ien=settings.aoData.length ; i<ien ; i++ ) {\n\t\t\t\tif ( search == 'none' ) {\n\t\t\t\t\ta.push( i );\n\t\t\t\t}\n\t\t\t\telse { // applied | removed\n\t\t\t\t\ttmp = $.inArray( i, displayFiltered );\n\t\n\t\t\t\t\tif ((tmp === -1 && search == 'removed') ||\n\t\t\t\t\t\t(tmp >= 0   && search == 'applied') )\n\t\t\t\t\t{\n\t\t\t\t\t\ta.push( i );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\treturn a;\n\t};\n\t\n\t\n\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\t * Rows\n\t *\n\t * {}          - no selector - use all available rows\n\t * {integer}   - row aoData index\n\t * {node}      - TR node\n\t * {string}    - jQuery selector to apply to the TR elements\n\t * {array}     - jQuery array of nodes, or simply an array of TR nodes\n\t *\n\t */\n\tvar __row_selector = function ( settings, selector, opts )\n\t{\n\t\tvar rows;\n\t\tvar run = function ( sel ) {\n\t\t\tvar selInt = _intVal( sel );\n\t\t\tvar i, ien;\n\t\t\tvar aoData = settings.aoData;\n\t\n\t\t\t// Short cut - selector is a number and no options provided (default is\n\t\t\t// all records, so no need to check if the index is in there, since it\n\t\t\t// must be - dev error if the index doesn't exist).\n\t\t\tif ( selInt !== null && ! opts ) {\n\t\t\t\treturn [ selInt ];\n\t\t\t}\n\t\n\t\t\tif ( ! rows ) {\n\t\t\t\trows = _selector_row_indexes( settings, opts );\n\t\t\t}\n\t\n\t\t\tif ( selInt !== null && $.inArray( selInt, rows ) !== -1 ) {\n\t\t\t\t// Selector - integer\n\t\t\t\treturn [ selInt ];\n\t\t\t}\n\t\t\telse if ( sel === null || sel === undefined || sel === '' ) {\n\t\t\t\t// Selector - none\n\t\t\t\treturn rows;\n\t\t\t}\n\t\n\t\t\t// Selector - function\n\t\t\tif ( typeof sel === 'function' ) {\n\t\t\t\treturn $.map( rows, function (idx) {\n\t\t\t\t\tvar row = aoData[ idx ];\n\t\t\t\t\treturn sel( idx, row._aData, row.nTr ) ? idx : null;\n\t\t\t\t} );\n\t\t\t}\n\t\n\t\t\t// Selector - node\n\t\t\tif ( sel.nodeName ) {\n\t\t\t\tvar rowIdx = sel._DT_RowIndex;  // Property added by DT for fast lookup\n\t\t\t\tvar cellIdx = sel._DT_CellIndex;\n\t\n\t\t\t\tif ( rowIdx !== undefined ) {\n\t\t\t\t\t// Make sure that the row is actually still present in the table\n\t\t\t\t\treturn aoData[ rowIdx ] && aoData[ rowIdx ].nTr === sel ?\n\t\t\t\t\t\t[ rowIdx ] :\n\t\t\t\t\t\t[];\n\t\t\t\t}\n\t\t\t\telse if ( cellIdx ) {\n\t\t\t\t\treturn aoData[ cellIdx.row ] && aoData[ cellIdx.row ].nTr === sel.parentNode ?\n\t\t\t\t\t\t[ cellIdx.row ] :\n\t\t\t\t\t\t[];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tvar host = $(sel).closest('*[data-dt-row]');\n\t\t\t\t\treturn host.length ?\n\t\t\t\t\t\t[ host.data('dt-row') ] :\n\t\t\t\t\t\t[];\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\t// ID selector. Want to always be able to select rows by id, regardless\n\t\t\t// of if the tr element has been created or not, so can't rely upon\n\t\t\t// jQuery here - hence a custom implementation. This does not match\n\t\t\t// Sizzle's fast selector or HTML4 - in HTML5 the ID can be anything,\n\t\t\t// but to select it using a CSS selector engine (like Sizzle or\n\t\t\t// querySelect) it would need to need to be escaped for some characters.\n\t\t\t// DataTables simplifies this for row selectors since you can select\n\t\t\t// only a row. A # indicates an id any anything that follows is the id -\n\t\t\t// unescaped.\n\t\t\tif ( typeof sel === 'string' && sel.charAt(0) === '#' ) {\n\t\t\t\t// get row index from id\n\t\t\t\tvar rowObj = settings.aIds[ sel.replace( /^#/, '' ) ];\n\t\t\t\tif ( rowObj !== undefined ) {\n\t\t\t\t\treturn [ rowObj.idx ];\n\t\t\t\t}\n\t\n\t\t\t\t// need to fall through to jQuery in case there is DOM id that\n\t\t\t\t// matches\n\t\t\t}\n\t\t\t\n\t\t\t// Get nodes in the order from the `rows` array with null values removed\n\t\t\tvar nodes = _removeEmpty(\n\t\t\t\t_pluck_order( settings.aoData, rows, 'nTr' )\n\t\t\t);\n\t\n\t\t\t// Selector - jQuery selector string, array of nodes or jQuery object/\n\t\t\t// As jQuery's .filter() allows jQuery objects to be passed in filter,\n\t\t\t// it also allows arrays, so this will cope with all three options\n\t\t\treturn $(nodes)\n\t\t\t\t.filter( sel )\n\t\t\t\t.map( function () {\n\t\t\t\t\treturn this._DT_RowIndex;\n\t\t\t\t} )\n\t\t\t\t.toArray();\n\t\t};\n\t\n\t\treturn _selector_run( 'row', selector, run, settings, opts );\n\t};\n\t\n\t\n\t_api_register( 'rows()', function ( selector, opts ) {\n\t\t// argument shifting\n\t\tif ( selector === undefined ) {\n\t\t\tselector = '';\n\t\t}\n\t\telse if ( $.isPlainObject( selector ) ) {\n\t\t\topts = selector;\n\t\t\tselector = '';\n\t\t}\n\t\n\t\topts = _selector_opts( opts );\n\t\n\t\tvar inst = this.iterator( 'table', function ( settings ) {\n\t\t\treturn __row_selector( settings, selector, opts );\n\t\t}, 1 );\n\t\n\t\t// Want argument shifting here and in __row_selector?\n\t\tinst.selector.rows = selector;\n\t\tinst.selector.opts = opts;\n\t\n\t\treturn inst;\n\t} );\n\t\n\t_api_register( 'rows().nodes()', function () {\n\t\treturn this.iterator( 'row', function ( settings, row ) {\n\t\t\treturn settings.aoData[ row ].nTr || undefined;\n\t\t}, 1 );\n\t} );\n\t\n\t_api_register( 'rows().data()', function () {\n\t\treturn this.iterator( true, 'rows', function ( settings, rows ) {\n\t\t\treturn _pluck_order( settings.aoData, rows, '_aData' );\n\t\t}, 1 );\n\t} );\n\t\n\t_api_registerPlural( 'rows().cache()', 'row().cache()', function ( type ) {\n\t\treturn this.iterator( 'row', function ( settings, row ) {\n\t\t\tvar r = settings.aoData[ row ];\n\t\t\treturn type === 'search' ? r._aFilterData : r._aSortData;\n\t\t}, 1 );\n\t} );\n\t\n\t_api_registerPlural( 'rows().invalidate()', 'row().invalidate()', function ( src ) {\n\t\treturn this.iterator( 'row', function ( settings, row ) {\n\t\t\t_fnInvalidate( settings, row, src );\n\t\t} );\n\t} );\n\t\n\t_api_registerPlural( 'rows().indexes()', 'row().index()', function () {\n\t\treturn this.iterator( 'row', function ( settings, row ) {\n\t\t\treturn row;\n\t\t}, 1 );\n\t} );\n\t\n\t_api_registerPlural( 'rows().ids()', 'row().id()', function ( hash ) {\n\t\tvar a = [];\n\t\tvar context = this.context;\n\t\n\t\t// `iterator` will drop undefined values, but in this case we want them\n\t\tfor ( var i=0, ien=context.length ; i<ien ; i++ ) {\n\t\t\tfor ( var j=0, jen=this[i].length ; j<jen ; j++ ) {\n\t\t\t\tvar id = context[i].rowIdFn( context[i].aoData[ this[i][j] ]._aData );\n\t\t\t\ta.push( (hash === true ? '#' : '' )+ id );\n\t\t\t}\n\t\t}\n\t\n\t\treturn new _Api( context, a );\n\t} );\n\t\n\t_api_registerPlural( 'rows().remove()', 'row().remove()', function () {\n\t\tvar that = this;\n\t\n\t\tthis.iterator( 'row', function ( settings, row, thatIdx ) {\n\t\t\tvar data = settings.aoData;\n\t\t\tvar rowData = data[ row ];\n\t\t\tvar i, ien, j, jen;\n\t\t\tvar loopRow, loopCells;\n\t\n\t\t\tdata.splice( row, 1 );\n\t\n\t\t\t// Update the cached indexes\n\t\t\tfor ( i=0, ien=data.length ; i<ien ; i++ ) {\n\t\t\t\tloopRow = data[i];\n\t\t\t\tloopCells = loopRow.anCells;\n\t\n\t\t\t\t// Rows\n\t\t\t\tif ( loopRow.nTr !== null ) {\n\t\t\t\t\tloopRow.nTr._DT_RowIndex = i;\n\t\t\t\t}\n\t\n\t\t\t\t// Cells\n\t\t\t\tif ( loopCells !== null ) {\n\t\t\t\t\tfor ( j=0, jen=loopCells.length ; j<jen ; j++ ) {\n\t\t\t\t\t\tloopCells[j]._DT_CellIndex.row = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\t// Delete from the display arrays\n\t\t\t_fnDeleteIndex( settings.aiDisplayMaster, row );\n\t\t\t_fnDeleteIndex( settings.aiDisplay, row );\n\t\t\t_fnDeleteIndex( that[ thatIdx ], row, false ); // maintain local indexes\n\t\n\t\t\t// For server-side processing tables - subtract the deleted row from the count\n\t\t\tif ( settings._iRecordsDisplay > 0 ) {\n\t\t\t\tsettings._iRecordsDisplay--;\n\t\t\t}\n\t\n\t\t\t// Check for an 'overflow' they case for displaying the table\n\t\t\t_fnLengthOverflow( settings );\n\t\n\t\t\t// Remove the row's ID reference if there is one\n\t\t\tvar id = settings.rowIdFn( rowData._aData );\n\t\t\tif ( id !== undefined ) {\n\t\t\t\tdelete settings.aIds[ id ];\n\t\t\t}\n\t\t} );\n\t\n\t\tthis.iterator( 'table', function ( settings ) {\n\t\t\tfor ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {\n\t\t\t\tsettings.aoData[i].idx = i;\n\t\t\t}\n\t\t} );\n\t\n\t\treturn this;\n\t} );\n\t\n\t\n\t_api_register( 'rows.add()', function ( rows ) {\n\t\tvar newRows = this.iterator( 'table', function ( settings ) {\n\t\t\t\tvar row, i, ien;\n\t\t\t\tvar out = [];\n\t\n\t\t\t\tfor ( i=0, ien=rows.length ; i<ien ; i++ ) {\n\t\t\t\t\trow = rows[i];\n\t\n\t\t\t\t\tif ( row.nodeName && row.nodeName.toUpperCase() === 'TR' ) {\n\t\t\t\t\t\tout.push( _fnAddTr( settings, row )[0] );\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tout.push( _fnAddData( settings, row ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\treturn out;\n\t\t\t}, 1 );\n\t\n\t\t// Return an Api.rows() extended instance, so rows().nodes() etc can be used\n\t\tvar modRows = this.rows( -1 );\n\t\tmodRows.pop();\n\t\t$.merge( modRows, newRows );\n\t\n\t\treturn modRows;\n\t} );\n\t\n\t\n\t\n\t\n\t\n\t/**\n\t *\n\t */\n\t_api_register( 'row()', function ( selector, opts ) {\n\t\treturn _selector_first( this.rows( selector, opts ) );\n\t} );\n\t\n\t\n\t_api_register( 'row().data()', function ( data ) {\n\t\tvar ctx = this.context;\n\t\n\t\tif ( data === undefined ) {\n\t\t\t// Get\n\t\t\treturn ctx.length && this.length ?\n\t\t\t\tctx[0].aoData[ this[0] ]._aData :\n\t\t\t\tundefined;\n\t\t}\n\t\n\t\t// Set\n\t\tvar row = ctx[0].aoData[ this[0] ];\n\t\trow._aData = data;\n\t\n\t\t// If the DOM has an id, and the data source is an array\n\t\tif ( $.isArray( data ) && row.nTr && row.nTr.id ) {\n\t\t\t_fnSetObjectDataFn( ctx[0].rowId )( data, row.nTr.id );\n\t\t}\n\t\n\t\t// Automatically invalidate\n\t\t_fnInvalidate( ctx[0], this[0], 'data' );\n\t\n\t\treturn this;\n\t} );\n\t\n\t\n\t_api_register( 'row().node()', function () {\n\t\tvar ctx = this.context;\n\t\n\t\treturn ctx.length && this.length ?\n\t\t\tctx[0].aoData[ this[0] ].nTr || null :\n\t\t\tnull;\n\t} );\n\t\n\t\n\t_api_register( 'row.add()', function ( row ) {\n\t\t// Allow a jQuery object to be passed in - only a single row is added from\n\t\t// it though - the first element in the set\n\t\tif ( row instanceof $ && row.length ) {\n\t\t\trow = row[0];\n\t\t}\n\t\n\t\tvar rows = this.iterator( 'table', function ( settings ) {\n\t\t\tif ( row.nodeName && row.nodeName.toUpperCase() === 'TR' ) {\n\t\t\t\treturn _fnAddTr( settings, row )[0];\n\t\t\t}\n\t\t\treturn _fnAddData( settings, row );\n\t\t} );\n\t\n\t\t// Return an Api.rows() extended instance, with the newly added row selected\n\t\treturn this.row( rows[0] );\n\t} );\n\t\n\t\n\t\n\tvar __details_add = function ( ctx, row, data, klass )\n\t{\n\t\t// Convert to array of TR elements\n\t\tvar rows = [];\n\t\tvar addRow = function ( r, k ) {\n\t\t\t// Recursion to allow for arrays of jQuery objects\n\t\t\tif ( $.isArray( r ) || r instanceof $ ) {\n\t\t\t\tfor ( var i=0, ien=r.length ; i<ien ; i++ ) {\n\t\t\t\t\taddRow( r[i], k );\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\t// If we get a TR element, then just add it directly - up to the dev\n\t\t\t// to add the correct number of columns etc\n\t\t\tif ( r.nodeName && r.nodeName.toLowerCase() === 'tr' ) {\n\t\t\t\trows.push( r );\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Otherwise create a row with a wrapper\n\t\t\t\tvar created = $('<tr><td/></tr>').addClass( k );\n\t\t\t\t$('td', created)\n\t\t\t\t\t.addClass( k )\n\t\t\t\t\t.html( r )\n\t\t\t\t\t[0].colSpan = _fnVisbleColumns( ctx );\n\t\n\t\t\t\trows.push( created[0] );\n\t\t\t}\n\t\t};\n\t\n\t\taddRow( data, klass );\n\t\n\t\tif ( row._details ) {\n\t\t\trow._details.detach();\n\t\t}\n\t\n\t\trow._details = $(rows);\n\t\n\t\t// If the children were already shown, that state should be retained\n\t\tif ( row._detailsShow ) {\n\t\t\trow._details.insertAfter( row.nTr );\n\t\t}\n\t};\n\t\n\t\n\tvar __details_remove = function ( api, idx )\n\t{\n\t\tvar ctx = api.context;\n\t\n\t\tif ( ctx.length ) {\n\t\t\tvar row = ctx[0].aoData[ idx !== undefined ? idx : api[0] ];\n\t\n\t\t\tif ( row && row._details ) {\n\t\t\t\trow._details.remove();\n\t\n\t\t\t\trow._detailsShow = undefined;\n\t\t\t\trow._details = undefined;\n\t\t\t}\n\t\t}\n\t};\n\t\n\t\n\tvar __details_display = function ( api, show ) {\n\t\tvar ctx = api.context;\n\t\n\t\tif ( ctx.length && api.length ) {\n\t\t\tvar row = ctx[0].aoData[ api[0] ];\n\t\n\t\t\tif ( row._details ) {\n\t\t\t\trow._detailsShow = show;\n\t\n\t\t\t\tif ( show ) {\n\t\t\t\t\trow._details.insertAfter( row.nTr );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\trow._details.detach();\n\t\t\t\t}\n\t\n\t\t\t\t__details_events( ctx[0] );\n\t\t\t}\n\t\t}\n\t};\n\t\n\t\n\tvar __details_events = function ( settings )\n\t{\n\t\tvar api = new _Api( settings );\n\t\tvar namespace = '.dt.DT_details';\n\t\tvar drawEvent = 'draw'+namespace;\n\t\tvar colvisEvent = 'column-visibility'+namespace;\n\t\tvar destroyEvent = 'destroy'+namespace;\n\t\tvar data = settings.aoData;\n\t\n\t\tapi.off( drawEvent +' '+ colvisEvent +' '+ destroyEvent );\n\t\n\t\tif ( _pluck( data, '_details' ).length > 0 ) {\n\t\t\t// On each draw, insert the required elements into the document\n\t\t\tapi.on( drawEvent, function ( e, ctx ) {\n\t\t\t\tif ( settings !== ctx ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\n\t\t\t\tapi.rows( {page:'current'} ).eq(0).each( function (idx) {\n\t\t\t\t\t// Internal data grab\n\t\t\t\t\tvar row = data[ idx ];\n\t\n\t\t\t\t\tif ( row._detailsShow ) {\n\t\t\t\t\t\trow._details.insertAfter( row.nTr );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t} );\n\t\n\t\t\t// Column visibility change - update the colspan\n\t\t\tapi.on( colvisEvent, function ( e, ctx, idx, vis ) {\n\t\t\t\tif ( settings !== ctx ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\n\t\t\t\t// Update the colspan for the details rows (note, only if it already has\n\t\t\t\t// a colspan)\n\t\t\t\tvar row, visible = _fnVisbleColumns( ctx );\n\t\n\t\t\t\tfor ( var i=0, ien=data.length ; i<ien ; i++ ) {\n\t\t\t\t\trow = data[i];\n\t\n\t\t\t\t\tif ( row._details ) {\n\t\t\t\t\t\trow._details.children('td[colspan]').attr('colspan', visible );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\t\n\t\t\t// Table destroyed - nuke any child rows\n\t\t\tapi.on( destroyEvent, function ( e, ctx ) {\n\t\t\t\tif ( settings !== ctx ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\n\t\t\t\tfor ( var i=0, ien=data.length ; i<ien ; i++ ) {\n\t\t\t\t\tif ( data[i]._details ) {\n\t\t\t\t\t\t__details_remove( api, i );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\t};\n\t\n\t// Strings for the method names to help minification\n\tvar _emp = '';\n\tvar _child_obj = _emp+'row().child';\n\tvar _child_mth = _child_obj+'()';\n\t\n\t// data can be:\n\t//  tr\n\t//  string\n\t//  jQuery or array of any of the above\n\t_api_register( _child_mth, function ( data, klass ) {\n\t\tvar ctx = this.context;\n\t\n\t\tif ( data === undefined ) {\n\t\t\t// get\n\t\t\treturn ctx.length && this.length ?\n\t\t\t\tctx[0].aoData[ this[0] ]._details :\n\t\t\t\tundefined;\n\t\t}\n\t\telse if ( data === true ) {\n\t\t\t// show\n\t\t\tthis.child.show();\n\t\t}\n\t\telse if ( data === false ) {\n\t\t\t// remove\n\t\t\t__details_remove( this );\n\t\t}\n\t\telse if ( ctx.length && this.length ) {\n\t\t\t// set\n\t\t\t__details_add( ctx[0], ctx[0].aoData[ this[0] ], data, klass );\n\t\t}\n\t\n\t\treturn this;\n\t} );\n\t\n\t\n\t_api_register( [\n\t\t_child_obj+'.show()',\n\t\t_child_mth+'.show()' // only when `child()` was called with parameters (without\n\t], function ( show ) {   // it returns an object and this method is not executed)\n\t\t__details_display( this, true );\n\t\treturn this;\n\t} );\n\t\n\t\n\t_api_register( [\n\t\t_child_obj+'.hide()',\n\t\t_child_mth+'.hide()' // only when `child()` was called with parameters (without\n\t], function () {         // it returns an object and this method is not executed)\n\t\t__details_display( this, false );\n\t\treturn this;\n\t} );\n\t\n\t\n\t_api_register( [\n\t\t_child_obj+'.remove()',\n\t\t_child_mth+'.remove()' // only when `child()` was called with parameters (without\n\t], function () {           // it returns an object and this method is not executed)\n\t\t__details_remove( this );\n\t\treturn this;\n\t} );\n\t\n\t\n\t_api_register( _child_obj+'.isShown()', function () {\n\t\tvar ctx = this.context;\n\t\n\t\tif ( ctx.length && this.length ) {\n\t\t\t// _detailsShown as false or undefined will fall through to return false\n\t\t\treturn ctx[0].aoData[ this[0] ]._detailsShow || false;\n\t\t}\n\t\treturn false;\n\t} );\n\t\n\t\n\t\n\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\t * Columns\n\t *\n\t * {integer}           - column index (>=0 count from left, <0 count from right)\n\t * \"{integer}:visIdx\"  - visible column index (i.e. translate to column index)  (>=0 count from left, <0 count from right)\n\t * \"{integer}:visible\" - alias for {integer}:visIdx  (>=0 count from left, <0 count from right)\n\t * \"{string}:name\"     - column name\n\t * \"{string}\"          - jQuery selector on column header nodes\n\t *\n\t */\n\t\n\t// can be an array of these items, comma separated list, or an array of comma\n\t// separated lists\n\t\n\tvar __re_column_selector = /^([^:]+):(name|visIdx|visible)$/;\n\t\n\t\n\t// r1 and r2 are redundant - but it means that the parameters match for the\n\t// iterator callback in columns().data()\n\tvar __columnData = function ( settings, column, r1, r2, rows ) {\n\t\tvar a = [];\n\t\tfor ( var row=0, ien=rows.length ; row<ien ; row++ ) {\n\t\t\ta.push( _fnGetCellData( settings, rows[row], column ) );\n\t\t}\n\t\treturn a;\n\t};\n\t\n\t\n\tvar __column_selector = function ( settings, selector, opts )\n\t{\n\t\tvar\n\t\t\tcolumns = settings.aoColumns,\n\t\t\tnames = _pluck( columns, 'sName' ),\n\t\t\tnodes = _pluck( columns, 'nTh' );\n\t\n\t\tvar run = function ( s ) {\n\t\t\tvar selInt = _intVal( s );\n\t\n\t\t\t// Selector - all\n\t\t\tif ( s === '' ) {\n\t\t\t\treturn _range( columns.length );\n\t\t\t}\n\t\n\t\t\t// Selector - index\n\t\t\tif ( selInt !== null ) {\n\t\t\t\treturn [ selInt >= 0 ?\n\t\t\t\t\tselInt : // Count from left\n\t\t\t\t\tcolumns.length + selInt // Count from right (+ because its a negative value)\n\t\t\t\t];\n\t\t\t}\n\t\n\t\t\t// Selector = function\n\t\t\tif ( typeof s === 'function' ) {\n\t\t\t\tvar rows = _selector_row_indexes( settings, opts );\n\t\n\t\t\t\treturn $.map( columns, function (col, idx) {\n\t\t\t\t\treturn s(\n\t\t\t\t\t\t\tidx,\n\t\t\t\t\t\t\t__columnData( settings, idx, 0, 0, rows ),\n\t\t\t\t\t\t\tnodes[ idx ]\n\t\t\t\t\t\t) ? idx : null;\n\t\t\t\t} );\n\t\t\t}\n\t\n\t\t\t// jQuery or string selector\n\t\t\tvar match = typeof s === 'string' ?\n\t\t\t\ts.match( __re_column_selector ) :\n\t\t\t\t'';\n\t\n\t\t\tif ( match ) {\n\t\t\t\tswitch( match[2] ) {\n\t\t\t\t\tcase 'visIdx':\n\t\t\t\t\tcase 'visible':\n\t\t\t\t\t\tvar idx = parseInt( match[1], 10 );\n\t\t\t\t\t\t// Visible index given, convert to column index\n\t\t\t\t\t\tif ( idx < 0 ) {\n\t\t\t\t\t\t\t// Counting from the right\n\t\t\t\t\t\t\tvar visColumns = $.map( columns, function (col,i) {\n\t\t\t\t\t\t\t\treturn col.bVisible ? i : null;\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t\treturn [ visColumns[ visColumns.length + idx ] ];\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Counting from the left\n\t\t\t\t\t\treturn [ _fnVisibleToColumnIndex( settings, idx ) ];\n\t\n\t\t\t\t\tcase 'name':\n\t\t\t\t\t\t// match by name. `names` is column index complete and in order\n\t\t\t\t\t\treturn $.map( names, function (name, i) {\n\t\t\t\t\t\t\treturn name === match[1] ? i : null;\n\t\t\t\t\t\t} );\n\t\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn [];\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\t// Cell in the table body\n\t\t\tif ( s.nodeName && s._DT_CellIndex ) {\n\t\t\t\treturn [ s._DT_CellIndex.column ];\n\t\t\t}\n\t\n\t\t\t// jQuery selector on the TH elements for the columns\n\t\t\tvar jqResult = $( nodes )\n\t\t\t\t.filter( s )\n\t\t\t\t.map( function () {\n\t\t\t\t\treturn $.inArray( this, nodes ); // `nodes` is column index complete and in order\n\t\t\t\t} )\n\t\t\t\t.toArray();\n\t\n\t\t\tif ( jqResult.length || ! s.nodeName ) {\n\t\t\t\treturn jqResult;\n\t\t\t}\n\t\n\t\t\t// Otherwise a node which might have a `dt-column` data attribute, or be\n\t\t\t// a child or such an element\n\t\t\tvar host = $(s).closest('*[data-dt-column]');\n\t\t\treturn host.length ?\n\t\t\t\t[ host.data('dt-column') ] :\n\t\t\t\t[];\n\t\t};\n\t\n\t\treturn _selector_run( 'column', selector, run, settings, opts );\n\t};\n\t\n\t\n\tvar __setColumnVis = function ( settings, column, vis ) {\n\t\tvar\n\t\t\tcols = settings.aoColumns,\n\t\t\tcol  = cols[ column ],\n\t\t\tdata = settings.aoData,\n\t\t\trow, cells, i, ien, tr;\n\t\n\t\t// Get\n\t\tif ( vis === undefined ) {\n\t\t\treturn col.bVisible;\n\t\t}\n\t\n\t\t// Set\n\t\t// No change\n\t\tif ( col.bVisible === vis ) {\n\t\t\treturn;\n\t\t}\n\t\n\t\tif ( vis ) {\n\t\t\t// Insert column\n\t\t\t// Need to decide if we should use appendChild or insertBefore\n\t\t\tvar insertBefore = $.inArray( true, _pluck(cols, 'bVisible'), column+1 );\n\t\n\t\t\tfor ( i=0, ien=data.length ; i<ien ; i++ ) {\n\t\t\t\ttr = data[i].nTr;\n\t\t\t\tcells = data[i].anCells;\n\t\n\t\t\t\tif ( tr ) {\n\t\t\t\t\t// insertBefore can act like appendChild if 2nd arg is null\n\t\t\t\t\ttr.insertBefore( cells[ column ], cells[ insertBefore ] || null );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// Remove column\n\t\t\t$( _pluck( settings.aoData, 'anCells', column ) ).detach();\n\t\t}\n\t\n\t\t// Common actions\n\t\tcol.bVisible = vis;\n\t};\n\t\n\t\n\t_api_register( 'columns()', function ( selector, opts ) {\n\t\t// argument shifting\n\t\tif ( selector === undefined ) {\n\t\t\tselector = '';\n\t\t}\n\t\telse if ( $.isPlainObject( selector ) ) {\n\t\t\topts = selector;\n\t\t\tselector = '';\n\t\t}\n\t\n\t\topts = _selector_opts( opts );\n\t\n\t\tvar inst = this.iterator( 'table', function ( settings ) {\n\t\t\treturn __column_selector( settings, selector, opts );\n\t\t}, 1 );\n\t\n\t\t// Want argument shifting here and in _row_selector?\n\t\tinst.selector.cols = selector;\n\t\tinst.selector.opts = opts;\n\t\n\t\treturn inst;\n\t} );\n\t\n\t_api_registerPlural( 'columns().header()', 'column().header()', function ( selector, opts ) {\n\t\treturn this.iterator( 'column', function ( settings, column ) {\n\t\t\treturn settings.aoColumns[column].nTh;\n\t\t}, 1 );\n\t} );\n\t\n\t_api_registerPlural( 'columns().footer()', 'column().footer()', function ( selector, opts ) {\n\t\treturn this.iterator( 'column', function ( settings, column ) {\n\t\t\treturn settings.aoColumns[column].nTf;\n\t\t}, 1 );\n\t} );\n\t\n\t_api_registerPlural( 'columns().data()', 'column().data()', function () {\n\t\treturn this.iterator( 'column-rows', __columnData, 1 );\n\t} );\n\t\n\t_api_registerPlural( 'columns().dataSrc()', 'column().dataSrc()', function () {\n\t\treturn this.iterator( 'column', function ( settings, column ) {\n\t\t\treturn settings.aoColumns[column].mData;\n\t\t}, 1 );\n\t} );\n\t\n\t_api_registerPlural( 'columns().cache()', 'column().cache()', function ( type ) {\n\t\treturn this.iterator( 'column-rows', function ( settings, column, i, j, rows ) {\n\t\t\treturn _pluck_order( settings.aoData, rows,\n\t\t\t\ttype === 'search' ? '_aFilterData' : '_aSortData', column\n\t\t\t);\n\t\t}, 1 );\n\t} );\n\t\n\t_api_registerPlural( 'columns().nodes()', 'column().nodes()', function () {\n\t\treturn this.iterator( 'column-rows', function ( settings, column, i, j, rows ) {\n\t\t\treturn _pluck_order( settings.aoData, rows, 'anCells', column ) ;\n\t\t}, 1 );\n\t} );\n\t\n\t_api_registerPlural( 'columns().visible()', 'column().visible()', function ( vis, calc ) {\n\t\tvar that = this;\n\t\tvar ret = this.iterator( 'column', function ( settings, column ) {\n\t\t\tif ( vis === undefined ) {\n\t\t\t\treturn settings.aoColumns[ column ].bVisible;\n\t\t\t} // else\n\t\t\t__setColumnVis( settings, column, vis );\n\t\t} );\n\t\n\t\t// Group the column visibility changes\n\t\tif ( vis !== undefined ) {\n\t\t\tthis.iterator( 'table', function ( settings ) {\n\t\t\t\t// Redraw the header after changes\n\t\t\t\t_fnDrawHead( settings, settings.aoHeader );\n\t\t\t\t_fnDrawHead( settings, settings.aoFooter );\n\t\t\n\t\t\t\t// Update colspan for no records display. Child rows and extensions will use their own\n\t\t\t\t// listeners to do this - only need to update the empty table item here\n\t\t\t\tif ( ! settings.aiDisplay.length ) {\n\t\t\t\t\t$(settings.nTBody).find('td[colspan]').attr('colspan', _fnVisbleColumns(settings));\n\t\t\t\t}\n\t\t\n\t\t\t\t_fnSaveState( settings );\n\t\n\t\t\t\t// Second loop once the first is done for events\n\t\t\t\tthat.iterator( 'column', function ( settings, column ) {\n\t\t\t\t\t_fnCallbackFire( settings, null, 'column-visibility', [settings, column, vis, calc] );\n\t\t\t\t} );\n\t\n\t\t\t\tif ( calc === undefined || calc ) {\n\t\t\t\t\tthat.columns.adjust();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\n\t\treturn ret;\n\t} );\n\t\n\t_api_registerPlural( 'columns().indexes()', 'column().index()', function ( type ) {\n\t\treturn this.iterator( 'column', function ( settings, column ) {\n\t\t\treturn type === 'visible' ?\n\t\t\t\t_fnColumnIndexToVisible( settings, column ) :\n\t\t\t\tcolumn;\n\t\t}, 1 );\n\t} );\n\t\n\t_api_register( 'columns.adjust()', function () {\n\t\treturn this.iterator( 'table', function ( settings ) {\n\t\t\t_fnAdjustColumnSizing( settings );\n\t\t}, 1 );\n\t} );\n\t\n\t_api_register( 'column.index()', function ( type, idx ) {\n\t\tif ( this.context.length !== 0 ) {\n\t\t\tvar ctx = this.context[0];\n\t\n\t\t\tif ( type === 'fromVisible' || type === 'toData' ) {\n\t\t\t\treturn _fnVisibleToColumnIndex( ctx, idx );\n\t\t\t}\n\t\t\telse if ( type === 'fromData' || type === 'toVisible' ) {\n\t\t\t\treturn _fnColumnIndexToVisible( ctx, idx );\n\t\t\t}\n\t\t}\n\t} );\n\t\n\t_api_register( 'column()', function ( selector, opts ) {\n\t\treturn _selector_first( this.columns( selector, opts ) );\n\t} );\n\t\n\t\n\t\n\tvar __cell_selector = function ( settings, selector, opts )\n\t{\n\t\tvar data = settings.aoData;\n\t\tvar rows = _selector_row_indexes( settings, opts );\n\t\tvar cells = _removeEmpty( _pluck_order( data, rows, 'anCells' ) );\n\t\tvar allCells = $( [].concat.apply([], cells) );\n\t\tvar row;\n\t\tvar columns = settings.aoColumns.length;\n\t\tvar a, i, ien, j, o, host;\n\t\n\t\tvar run = function ( s ) {\n\t\t\tvar fnSelector = typeof s === 'function';\n\t\n\t\t\tif ( s === null || s === undefined || fnSelector ) {\n\t\t\t\t// All cells and function selectors\n\t\t\t\ta = [];\n\t\n\t\t\t\tfor ( i=0, ien=rows.length ; i<ien ; i++ ) {\n\t\t\t\t\trow = rows[i];\n\t\n\t\t\t\t\tfor ( j=0 ; j<columns ; j++ ) {\n\t\t\t\t\t\to = {\n\t\t\t\t\t\t\trow: row,\n\t\t\t\t\t\t\tcolumn: j\n\t\t\t\t\t\t};\n\t\n\t\t\t\t\t\tif ( fnSelector ) {\n\t\t\t\t\t\t\t// Selector - function\n\t\t\t\t\t\t\thost = data[ row ];\n\t\n\t\t\t\t\t\t\tif ( s( o, _fnGetCellData(settings, row, j), host.anCells ? host.anCells[j] : null ) ) {\n\t\t\t\t\t\t\t\ta.push( o );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t// Selector - all\n\t\t\t\t\t\t\ta.push( o );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\treturn a;\n\t\t\t}\n\t\t\t\n\t\t\t// Selector - index\n\t\t\tif ( $.isPlainObject( s ) ) {\n\t\t\t\t// Valid cell index and its in the array of selectable rows\n\t\t\t\treturn s.column !== undefined && s.row !== undefined && $.inArray( s.row, rows ) !== -1 ?\n\t\t\t\t\t[s] :\n\t\t\t\t\t[];\n\t\t\t}\n\t\n\t\t\t// Selector - jQuery filtered cells\n\t\t\tvar jqResult = allCells\n\t\t\t\t.filter( s )\n\t\t\t\t.map( function (i, el) {\n\t\t\t\t\treturn { // use a new object, in case someone changes the values\n\t\t\t\t\t\trow:    el._DT_CellIndex.row,\n\t\t\t\t\t\tcolumn: el._DT_CellIndex.column\n\t \t\t\t\t};\n\t\t\t\t} )\n\t\t\t\t.toArray();\n\t\n\t\t\tif ( jqResult.length || ! s.nodeName ) {\n\t\t\t\treturn jqResult;\n\t\t\t}\n\t\n\t\t\t// Otherwise the selector is a node, and there is one last option - the\n\t\t\t// element might be a child of an element which has dt-row and dt-column\n\t\t\t// data attributes\n\t\t\thost = $(s).closest('*[data-dt-row]');\n\t\t\treturn host.length ?\n\t\t\t\t[ {\n\t\t\t\t\trow: host.data('dt-row'),\n\t\t\t\t\tcolumn: host.data('dt-column')\n\t\t\t\t} ] :\n\t\t\t\t[];\n\t\t};\n\t\n\t\treturn _selector_run( 'cell', selector, run, settings, opts );\n\t};\n\t\n\t\n\t\n\t\n\t_api_register( 'cells()', function ( rowSelector, columnSelector, opts ) {\n\t\t// Argument shifting\n\t\tif ( $.isPlainObject( rowSelector ) ) {\n\t\t\t// Indexes\n\t\t\tif ( rowSelector.row === undefined ) {\n\t\t\t\t// Selector options in first parameter\n\t\t\t\topts = rowSelector;\n\t\t\t\trowSelector = null;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Cell index objects in first parameter\n\t\t\t\topts = columnSelector;\n\t\t\t\tcolumnSelector = null;\n\t\t\t}\n\t\t}\n\t\tif ( $.isPlainObject( columnSelector ) ) {\n\t\t\topts = columnSelector;\n\t\t\tcolumnSelector = null;\n\t\t}\n\t\n\t\t// Cell selector\n\t\tif ( columnSelector === null || columnSelector === undefined ) {\n\t\t\treturn this.iterator( 'table', function ( settings ) {\n\t\t\t\treturn __cell_selector( settings, rowSelector, _selector_opts( opts ) );\n\t\t\t} );\n\t\t}\n\t\n\t\t// The default built in options need to apply to row and columns\n\t\tvar internalOpts = opts ? {\n\t\t\tpage: opts.page,\n\t\t\torder: opts.order,\n\t\t\tsearch: opts.search\n\t\t} : {};\n\t\n\t\t// Row + column selector\n\t\tvar columns = this.columns( columnSelector, internalOpts );\n\t\tvar rows = this.rows( rowSelector, internalOpts );\n\t\tvar i, ien, j, jen;\n\t\n\t\tvar cellsNoOpts = this.iterator( 'table', function ( settings, idx ) {\n\t\t\tvar a = [];\n\t\n\t\t\tfor ( i=0, ien=rows[idx].length ; i<ien ; i++ ) {\n\t\t\t\tfor ( j=0, jen=columns[idx].length ; j<jen ; j++ ) {\n\t\t\t\t\ta.push( {\n\t\t\t\t\t\trow:    rows[idx][i],\n\t\t\t\t\t\tcolumn: columns[idx][j]\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\treturn a;\n\t\t}, 1 );\n\t\n\t\t// There is currently only one extension which uses a cell selector extension\n\t\t// It is a _major_ performance drag to run this if it isn't needed, so this is\n\t\t// an extension specific check at the moment\n\t\tvar cells = opts && opts.selected ?\n\t\t\tthis.cells( cellsNoOpts, opts ) :\n\t\t\tcellsNoOpts;\n\t\n\t\t$.extend( cells.selector, {\n\t\t\tcols: columnSelector,\n\t\t\trows: rowSelector,\n\t\t\topts: opts\n\t\t} );\n\t\n\t\treturn cells;\n\t} );\n\t\n\t\n\t_api_registerPlural( 'cells().nodes()', 'cell().node()', function () {\n\t\treturn this.iterator( 'cell', function ( settings, row, column ) {\n\t\t\tvar data = settings.aoData[ row ];\n\t\n\t\t\treturn data && data.anCells ?\n\t\t\t\tdata.anCells[ column ] :\n\t\t\t\tundefined;\n\t\t}, 1 );\n\t} );\n\t\n\t\n\t_api_register( 'cells().data()', function () {\n\t\treturn this.iterator( 'cell', function ( settings, row, column ) {\n\t\t\treturn _fnGetCellData( settings, row, column );\n\t\t}, 1 );\n\t} );\n\t\n\t\n\t_api_registerPlural( 'cells().cache()', 'cell().cache()', function ( type ) {\n\t\ttype = type === 'search' ? '_aFilterData' : '_aSortData';\n\t\n\t\treturn this.iterator( 'cell', function ( settings, row, column ) {\n\t\t\treturn settings.aoData[ row ][ type ][ column ];\n\t\t}, 1 );\n\t} );\n\t\n\t\n\t_api_registerPlural( 'cells().render()', 'cell().render()', function ( type ) {\n\t\treturn this.iterator( 'cell', function ( settings, row, column ) {\n\t\t\treturn _fnGetCellData( settings, row, column, type );\n\t\t}, 1 );\n\t} );\n\t\n\t\n\t_api_registerPlural( 'cells().indexes()', 'cell().index()', function () {\n\t\treturn this.iterator( 'cell', function ( settings, row, column ) {\n\t\t\treturn {\n\t\t\t\trow: row,\n\t\t\t\tcolumn: column,\n\t\t\t\tcolumnVisible: _fnColumnIndexToVisible( settings, column )\n\t\t\t};\n\t\t}, 1 );\n\t} );\n\t\n\t\n\t_api_registerPlural( 'cells().invalidate()', 'cell().invalidate()', function ( src ) {\n\t\treturn this.iterator( 'cell', function ( settings, row, column ) {\n\t\t\t_fnInvalidate( settings, row, src, column );\n\t\t} );\n\t} );\n\t\n\t\n\t\n\t_api_register( 'cell()', function ( rowSelector, columnSelector, opts ) {\n\t\treturn _selector_first( this.cells( rowSelector, columnSelector, opts ) );\n\t} );\n\t\n\t\n\t_api_register( 'cell().data()', function ( data ) {\n\t\tvar ctx = this.context;\n\t\tvar cell = this[0];\n\t\n\t\tif ( data === undefined ) {\n\t\t\t// Get\n\t\t\treturn ctx.length && cell.length ?\n\t\t\t\t_fnGetCellData( ctx[0], cell[0].row, cell[0].column ) :\n\t\t\t\tundefined;\n\t\t}\n\t\n\t\t// Set\n\t\t_fnSetCellData( ctx[0], cell[0].row, cell[0].column, data );\n\t\t_fnInvalidate( ctx[0], cell[0].row, 'data', cell[0].column );\n\t\n\t\treturn this;\n\t} );\n\t\n\t\n\t\n\t/**\n\t * Get current ordering (sorting) that has been applied to the table.\n\t *\n\t * @returns {array} 2D array containing the sorting information for the first\n\t *   table in the current context. Each element in the parent array represents\n\t *   a column being sorted upon (i.e. multi-sorting with two columns would have\n\t *   2 inner arrays). The inner arrays may have 2 or 3 elements. The first is\n\t *   the column index that the sorting condition applies to, the second is the\n\t *   direction of the sort (`desc` or `asc`) and, optionally, the third is the\n\t *   index of the sorting order from the `column.sorting` initialisation array.\n\t *//**\n\t * Set the ordering for the table.\n\t *\n\t * @param {integer} order Column index to sort upon.\n\t * @param {string} direction Direction of the sort to be applied (`asc` or `desc`)\n\t * @returns {DataTables.Api} this\n\t *//**\n\t * Set the ordering for the table.\n\t *\n\t * @param {array} order 1D array of sorting information to be applied.\n\t * @param {array} [...] Optional additional sorting conditions\n\t * @returns {DataTables.Api} this\n\t *//**\n\t * Set the ordering for the table.\n\t *\n\t * @param {array} order 2D array of sorting information to be applied.\n\t * @returns {DataTables.Api} this\n\t */\n\t_api_register( 'order()', function ( order, dir ) {\n\t\tvar ctx = this.context;\n\t\n\t\tif ( order === undefined ) {\n\t\t\t// get\n\t\t\treturn ctx.length !== 0 ?\n\t\t\t\tctx[0].aaSorting :\n\t\t\t\tundefined;\n\t\t}\n\t\n\t\t// set\n\t\tif ( typeof order === 'number' ) {\n\t\t\t// Simple column / direction passed in\n\t\t\torder = [ [ order, dir ] ];\n\t\t}\n\t\telse if ( order.length && ! $.isArray( order[0] ) ) {\n\t\t\t// Arguments passed in (list of 1D arrays)\n\t\t\torder = Array.prototype.slice.call( arguments );\n\t\t}\n\t\t// otherwise a 2D array was passed in\n\t\n\t\treturn this.iterator( 'table', function ( settings ) {\n\t\t\tsettings.aaSorting = order.slice();\n\t\t} );\n\t} );\n\t\n\t\n\t/**\n\t * Attach a sort listener to an element for a given column\n\t *\n\t * @param {node|jQuery|string} node Identifier for the element(s) to attach the\n\t *   listener to. This can take the form of a single DOM node, a jQuery\n\t *   collection of nodes or a jQuery selector which will identify the node(s).\n\t * @param {integer} column the column that a click on this node will sort on\n\t * @param {function} [callback] callback function when sort is run\n\t * @returns {DataTables.Api} this\n\t */\n\t_api_register( 'order.listener()', function ( node, column, callback ) {\n\t\treturn this.iterator( 'table', function ( settings ) {\n\t\t\t_fnSortAttachListener( settings, node, column, callback );\n\t\t} );\n\t} );\n\t\n\t\n\t_api_register( 'order.fixed()', function ( set ) {\n\t\tif ( ! set ) {\n\t\t\tvar ctx = this.context;\n\t\t\tvar fixed = ctx.length ?\n\t\t\t\tctx[0].aaSortingFixed :\n\t\t\t\tundefined;\n\t\n\t\t\treturn $.isArray( fixed ) ?\n\t\t\t\t{ pre: fixed } :\n\t\t\t\tfixed;\n\t\t}\n\t\n\t\treturn this.iterator( 'table', function ( settings ) {\n\t\t\tsettings.aaSortingFixed = $.extend( true, {}, set );\n\t\t} );\n\t} );\n\t\n\t\n\t// Order by the selected column(s)\n\t_api_register( [\n\t\t'columns().order()',\n\t\t'column().order()'\n\t], function ( dir ) {\n\t\tvar that = this;\n\t\n\t\treturn this.iterator( 'table', function ( settings, i ) {\n\t\t\tvar sort = [];\n\t\n\t\t\t$.each( that[i], function (j, col) {\n\t\t\t\tsort.push( [ col, dir ] );\n\t\t\t} );\n\t\n\t\t\tsettings.aaSorting = sort;\n\t\t} );\n\t} );\n\t\n\t\n\t\n\t_api_register( 'search()', function ( input, regex, smart, caseInsen ) {\n\t\tvar ctx = this.context;\n\t\n\t\tif ( input === undefined ) {\n\t\t\t// get\n\t\t\treturn ctx.length !== 0 ?\n\t\t\t\tctx[0].oPreviousSearch.sSearch :\n\t\t\t\tundefined;\n\t\t}\n\t\n\t\t// set\n\t\treturn this.iterator( 'table', function ( settings ) {\n\t\t\tif ( ! settings.oFeatures.bFilter ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\t_fnFilterComplete( settings, $.extend( {}, settings.oPreviousSearch, {\n\t\t\t\t\"sSearch\": input+\"\",\n\t\t\t\t\"bRegex\":  regex === null ? false : regex,\n\t\t\t\t\"bSmart\":  smart === null ? true  : smart,\n\t\t\t\t\"bCaseInsensitive\": caseInsen === null ? true : caseInsen\n\t\t\t} ), 1 );\n\t\t} );\n\t} );\n\t\n\t\n\t_api_registerPlural(\n\t\t'columns().search()',\n\t\t'column().search()',\n\t\tfunction ( input, regex, smart, caseInsen ) {\n\t\t\treturn this.iterator( 'column', function ( settings, column ) {\n\t\t\t\tvar preSearch = settings.aoPreSearchCols;\n\t\n\t\t\t\tif ( input === undefined ) {\n\t\t\t\t\t// get\n\t\t\t\t\treturn preSearch[ column ].sSearch;\n\t\t\t\t}\n\t\n\t\t\t\t// set\n\t\t\t\tif ( ! settings.oFeatures.bFilter ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\n\t\t\t\t$.extend( preSearch[ column ], {\n\t\t\t\t\t\"sSearch\": input+\"\",\n\t\t\t\t\t\"bRegex\":  regex === null ? false : regex,\n\t\t\t\t\t\"bSmart\":  smart === null ? true  : smart,\n\t\t\t\t\t\"bCaseInsensitive\": caseInsen === null ? true : caseInsen\n\t\t\t\t} );\n\t\n\t\t\t\t_fnFilterComplete( settings, settings.oPreviousSearch, 1 );\n\t\t\t} );\n\t\t}\n\t);\n\t\n\t/*\n\t * State API methods\n\t */\n\t\n\t_api_register( 'state()', function () {\n\t\treturn this.context.length ?\n\t\t\tthis.context[0].oSavedState :\n\t\t\tnull;\n\t} );\n\t\n\t\n\t_api_register( 'state.clear()', function () {\n\t\treturn this.iterator( 'table', function ( settings ) {\n\t\t\t// Save an empty object\n\t\t\tsettings.fnStateSaveCallback.call( settings.oInstance, settings, {} );\n\t\t} );\n\t} );\n\t\n\t\n\t_api_register( 'state.loaded()', function () {\n\t\treturn this.context.length ?\n\t\t\tthis.context[0].oLoadedState :\n\t\t\tnull;\n\t} );\n\t\n\t\n\t_api_register( 'state.save()', function () {\n\t\treturn this.iterator( 'table', function ( settings ) {\n\t\t\t_fnSaveState( settings );\n\t\t} );\n\t} );\n\t\n\t\n\t\n\t/**\n\t * Provide a common method for plug-ins to check the version of DataTables being\n\t * used, in order to ensure compatibility.\n\t *\n\t *  @param {string} version Version string to check for, in the format \"X.Y.Z\".\n\t *    Note that the formats \"X\" and \"X.Y\" are also acceptable.\n\t *  @returns {boolean} true if this version of DataTables is greater or equal to\n\t *    the required version, or false if this version of DataTales is not\n\t *    suitable\n\t *  @static\n\t *  @dtopt API-Static\n\t *\n\t *  @example\n\t *    alert( $.fn.dataTable.versionCheck( '1.9.0' ) );\n\t */\n\tDataTable.versionCheck = DataTable.fnVersionCheck = function( version )\n\t{\n\t\tvar aThis = DataTable.version.split('.');\n\t\tvar aThat = version.split('.');\n\t\tvar iThis, iThat;\n\t\n\t\tfor ( var i=0, iLen=aThat.length ; i<iLen ; i++ ) {\n\t\t\tiThis = parseInt( aThis[i], 10 ) || 0;\n\t\t\tiThat = parseInt( aThat[i], 10 ) || 0;\n\t\n\t\t\t// Parts are the same, keep comparing\n\t\t\tif (iThis === iThat) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\n\t\t\t// Parts are different, return immediately\n\t\t\treturn iThis > iThat;\n\t\t}\n\t\n\t\treturn true;\n\t};\n\t\n\t\n\t/**\n\t * Check if a `<table>` node is a DataTable table already or not.\n\t *\n\t *  @param {node|jquery|string} table Table node, jQuery object or jQuery\n\t *      selector for the table to test. Note that if more than more than one\n\t *      table is passed on, only the first will be checked\n\t *  @returns {boolean} true the table given is a DataTable, or false otherwise\n\t *  @static\n\t *  @dtopt API-Static\n\t *\n\t *  @example\n\t *    if ( ! $.fn.DataTable.isDataTable( '#example' ) ) {\n\t *      $('#example').dataTable();\n\t *    }\n\t */\n\tDataTable.isDataTable = DataTable.fnIsDataTable = function ( table )\n\t{\n\t\tvar t = $(table).get(0);\n\t\tvar is = false;\n\t\n\t\tif ( table instanceof DataTable.Api ) {\n\t\t\treturn true;\n\t\t}\n\t\n\t\t$.each( DataTable.settings, function (i, o) {\n\t\t\tvar head = o.nScrollHead ? $('table', o.nScrollHead)[0] : null;\n\t\t\tvar foot = o.nScrollFoot ? $('table', o.nScrollFoot)[0] : null;\n\t\n\t\t\tif ( o.nTable === t || head === t || foot === t ) {\n\t\t\t\tis = true;\n\t\t\t}\n\t\t} );\n\t\n\t\treturn is;\n\t};\n\t\n\t\n\t/**\n\t * Get all DataTable tables that have been initialised - optionally you can\n\t * select to get only currently visible tables.\n\t *\n\t *  @param {boolean} [visible=false] Flag to indicate if you want all (default)\n\t *    or visible tables only.\n\t *  @returns {array} Array of `table` nodes (not DataTable instances) which are\n\t *    DataTables\n\t *  @static\n\t *  @dtopt API-Static\n\t *\n\t *  @example\n\t *    $.each( $.fn.dataTable.tables(true), function () {\n\t *      $(table).DataTable().columns.adjust();\n\t *    } );\n\t */\n\tDataTable.tables = DataTable.fnTables = function ( visible )\n\t{\n\t\tvar api = false;\n\t\n\t\tif ( $.isPlainObject( visible ) ) {\n\t\t\tapi = visible.api;\n\t\t\tvisible = visible.visible;\n\t\t}\n\t\n\t\tvar a = $.map( DataTable.settings, function (o) {\n\t\t\tif ( !visible || (visible && $(o.nTable).is(':visible')) ) {\n\t\t\t\treturn o.nTable;\n\t\t\t}\n\t\t} );\n\t\n\t\treturn api ?\n\t\t\tnew _Api( a ) :\n\t\t\ta;\n\t};\n\t\n\t\n\t/**\n\t * Convert from camel case parameters to Hungarian notation. This is made public\n\t * for the extensions to provide the same ability as DataTables core to accept\n\t * either the 1.9 style Hungarian notation, or the 1.10+ style camelCase\n\t * parameters.\n\t *\n\t *  @param {object} src The model object which holds all parameters that can be\n\t *    mapped.\n\t *  @param {object} user The object to convert from camel case to Hungarian.\n\t *  @param {boolean} force When set to `true`, properties which already have a\n\t *    Hungarian value in the `user` object will be overwritten. Otherwise they\n\t *    won't be.\n\t */\n\tDataTable.camelToHungarian = _fnCamelToHungarian;\n\t\n\t\n\t\n\t/**\n\t *\n\t */\n\t_api_register( '$()', function ( selector, opts ) {\n\t\tvar\n\t\t\trows   = this.rows( opts ).nodes(), // Get all rows\n\t\t\tjqRows = $(rows);\n\t\n\t\treturn $( [].concat(\n\t\t\tjqRows.filter( selector ).toArray(),\n\t\t\tjqRows.find( selector ).toArray()\n\t\t) );\n\t} );\n\t\n\t\n\t// jQuery functions to operate on the tables\n\t$.each( [ 'on', 'one', 'off' ], function (i, key) {\n\t\t_api_register( key+'()', function ( /* event, handler */ ) {\n\t\t\tvar args = Array.prototype.slice.call(arguments);\n\t\n\t\t\t// Add the `dt` namespace automatically if it isn't already present\n\t\t\targs[0] = $.map( args[0].split( /\\s/ ), function ( e ) {\n\t\t\t\treturn ! e.match(/\\.dt\\b/) ?\n\t\t\t\t\te+'.dt' :\n\t\t\t\t\te;\n\t\t\t\t} ).join( ' ' );\n\t\n\t\t\tvar inst = $( this.tables().nodes() );\n\t\t\tinst[key].apply( inst, args );\n\t\t\treturn this;\n\t\t} );\n\t} );\n\t\n\t\n\t_api_register( 'clear()', function () {\n\t\treturn this.iterator( 'table', function ( settings ) {\n\t\t\t_fnClearTable( settings );\n\t\t} );\n\t} );\n\t\n\t\n\t_api_register( 'settings()', function () {\n\t\treturn new _Api( this.context, this.context );\n\t} );\n\t\n\t\n\t_api_register( 'init()', function () {\n\t\tvar ctx = this.context;\n\t\treturn ctx.length ? ctx[0].oInit : null;\n\t} );\n\t\n\t\n\t_api_register( 'data()', function () {\n\t\treturn this.iterator( 'table', function ( settings ) {\n\t\t\treturn _pluck( settings.aoData, '_aData' );\n\t\t} ).flatten();\n\t} );\n\t\n\t\n\t_api_register( 'destroy()', function ( remove ) {\n\t\tremove = remove || false;\n\t\n\t\treturn this.iterator( 'table', function ( settings ) {\n\t\t\tvar orig      = settings.nTableWrapper.parentNode;\n\t\t\tvar classes   = settings.oClasses;\n\t\t\tvar table     = settings.nTable;\n\t\t\tvar tbody     = settings.nTBody;\n\t\t\tvar thead     = settings.nTHead;\n\t\t\tvar tfoot     = settings.nTFoot;\n\t\t\tvar jqTable   = $(table);\n\t\t\tvar jqTbody   = $(tbody);\n\t\t\tvar jqWrapper = $(settings.nTableWrapper);\n\t\t\tvar rows      = $.map( settings.aoData, function (r) { return r.nTr; } );\n\t\t\tvar i, ien;\n\t\n\t\t\t// Flag to note that the table is currently being destroyed - no action\n\t\t\t// should be taken\n\t\t\tsettings.bDestroying = true;\n\t\n\t\t\t// Fire off the destroy callbacks for plug-ins etc\n\t\t\t_fnCallbackFire( settings, \"aoDestroyCallback\", \"destroy\", [settings] );\n\t\n\t\t\t// If not being removed from the document, make all columns visible\n\t\t\tif ( ! remove ) {\n\t\t\t\tnew _Api( settings ).columns().visible( true );\n\t\t\t}\n\t\n\t\t\t// Blitz all `DT` namespaced events (these are internal events, the\n\t\t\t// lowercase, `dt` events are user subscribed and they are responsible\n\t\t\t// for removing them\n\t\t\tjqWrapper.off('.DT').find(':not(tbody *)').off('.DT');\n\t\t\t$(window).off('.DT-'+settings.sInstance);\n\t\n\t\t\t// When scrolling we had to break the table up - restore it\n\t\t\tif ( table != thead.parentNode ) {\n\t\t\t\tjqTable.children('thead').detach();\n\t\t\t\tjqTable.append( thead );\n\t\t\t}\n\t\n\t\t\tif ( tfoot && table != tfoot.parentNode ) {\n\t\t\t\tjqTable.children('tfoot').detach();\n\t\t\t\tjqTable.append( tfoot );\n\t\t\t}\n\t\n\t\t\tsettings.aaSorting = [];\n\t\t\tsettings.aaSortingFixed = [];\n\t\t\t_fnSortingClasses( settings );\n\t\n\t\t\t$( rows ).removeClass( settings.asStripeClasses.join(' ') );\n\t\n\t\t\t$('th, td', thead).removeClass( classes.sSortable+' '+\n\t\t\t\tclasses.sSortableAsc+' '+classes.sSortableDesc+' '+classes.sSortableNone\n\t\t\t);\n\t\n\t\t\t// Add the TR elements back into the table in their original order\n\t\t\tjqTbody.children().detach();\n\t\t\tjqTbody.append( rows );\n\t\n\t\t\t// Remove the DataTables generated nodes, events and classes\n\t\t\tvar removedMethod = remove ? 'remove' : 'detach';\n\t\t\tjqTable[ removedMethod ]();\n\t\t\tjqWrapper[ removedMethod ]();\n\t\n\t\t\t// If we need to reattach the table to the document\n\t\t\tif ( ! remove && orig ) {\n\t\t\t\t// insertBefore acts like appendChild if !arg[1]\n\t\t\t\torig.insertBefore( table, settings.nTableReinsertBefore );\n\t\n\t\t\t\t// Restore the width of the original table - was read from the style property,\n\t\t\t\t// so we can restore directly to that\n\t\t\t\tjqTable\n\t\t\t\t\t.css( 'width', settings.sDestroyWidth )\n\t\t\t\t\t.removeClass( classes.sTable );\n\t\n\t\t\t\t// If the were originally stripe classes - then we add them back here.\n\t\t\t\t// Note this is not fool proof (for example if not all rows had stripe\n\t\t\t\t// classes - but it's a good effort without getting carried away\n\t\t\t\tien = settings.asDestroyStripes.length;\n\t\n\t\t\t\tif ( ien ) {\n\t\t\t\t\tjqTbody.children().each( function (i) {\n\t\t\t\t\t\t$(this).addClass( settings.asDestroyStripes[i % ien] );\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\t/* Remove the settings object from the settings array */\n\t\t\tvar idx = $.inArray( settings, DataTable.settings );\n\t\t\tif ( idx !== -1 ) {\n\t\t\t\tDataTable.settings.splice( idx, 1 );\n\t\t\t}\n\t\t} );\n\t} );\n\t\n\t\n\t// Add the `every()` method for rows, columns and cells in a compact form\n\t$.each( [ 'column', 'row', 'cell' ], function ( i, type ) {\n\t\t_api_register( type+'s().every()', function ( fn ) {\n\t\t\tvar opts = this.selector.opts;\n\t\t\tvar api = this;\n\t\n\t\t\treturn this.iterator( type, function ( settings, arg1, arg2, arg3, arg4 ) {\n\t\t\t\t// Rows and columns:\n\t\t\t\t//  arg1 - index\n\t\t\t\t//  arg2 - table counter\n\t\t\t\t//  arg3 - loop counter\n\t\t\t\t//  arg4 - undefined\n\t\t\t\t// Cells:\n\t\t\t\t//  arg1 - row index\n\t\t\t\t//  arg2 - column index\n\t\t\t\t//  arg3 - table counter\n\t\t\t\t//  arg4 - loop counter\n\t\t\t\tfn.call(\n\t\t\t\t\tapi[ type ](\n\t\t\t\t\t\targ1,\n\t\t\t\t\t\ttype==='cell' ? arg2 : opts,\n\t\t\t\t\t\ttype==='cell' ? opts : undefined\n\t\t\t\t\t),\n\t\t\t\t\targ1, arg2, arg3, arg4\n\t\t\t\t);\n\t\t\t} );\n\t\t} );\n\t} );\n\t\n\t\n\t// i18n method for extensions to be able to use the language object from the\n\t// DataTable\n\t_api_register( 'i18n()', function ( token, def, plural ) {\n\t\tvar ctx = this.context[0];\n\t\tvar resolved = _fnGetObjectDataFn( token )( ctx.oLanguage );\n\t\n\t\tif ( resolved === undefined ) {\n\t\t\tresolved = def;\n\t\t}\n\t\n\t\tif ( plural !== undefined && $.isPlainObject( resolved ) ) {\n\t\t\tresolved = resolved[ plural ] !== undefined ?\n\t\t\t\tresolved[ plural ] :\n\t\t\t\tresolved._;\n\t\t}\n\t\n\t\treturn resolved.replace( '%d', plural ); // nb: plural might be undefined,\n\t} );\n\t/**\n\t * Version string for plug-ins to check compatibility. Allowed format is\n\t * `a.b.c-d` where: a:int, b:int, c:int, d:string(dev|beta|alpha). `d` is used\n\t * only for non-release builds. See http://semver.org/ for more information.\n\t *  @member\n\t *  @type string\n\t *  @default Version number\n\t */\n\tDataTable.version = \"1.10.21\";\n\n\t/**\n\t * Private data store, containing all of the settings objects that are\n\t * created for the tables on a given page.\n\t *\n\t * Note that the `DataTable.settings` object is aliased to\n\t * `jQuery.fn.dataTableExt` through which it may be accessed and\n\t * manipulated, or `jQuery.fn.dataTable.settings`.\n\t *  @member\n\t *  @type array\n\t *  @default []\n\t *  @private\n\t */\n\tDataTable.settings = [];\n\n\t/**\n\t * Object models container, for the various models that DataTables has\n\t * available to it. These models define the objects that are used to hold\n\t * the active state and configuration of the table.\n\t *  @namespace\n\t */\n\tDataTable.models = {};\n\t\n\t\n\t\n\t/**\n\t * Template object for the way in which DataTables holds information about\n\t * search information for the global filter and individual column filters.\n\t *  @namespace\n\t */\n\tDataTable.models.oSearch = {\n\t\t/**\n\t\t * Flag to indicate if the filtering should be case insensitive or not\n\t\t *  @type boolean\n\t\t *  @default true\n\t\t */\n\t\t\"bCaseInsensitive\": true,\n\t\n\t\t/**\n\t\t * Applied search term\n\t\t *  @type string\n\t\t *  @default <i>Empty string</i>\n\t\t */\n\t\t\"sSearch\": \"\",\n\t\n\t\t/**\n\t\t * Flag to indicate if the search term should be interpreted as a\n\t\t * regular expression (true) or not (false) and therefore and special\n\t\t * regex characters escaped.\n\t\t *  @type boolean\n\t\t *  @default false\n\t\t */\n\t\t\"bRegex\": false,\n\t\n\t\t/**\n\t\t * Flag to indicate if DataTables is to use its smart filtering or not.\n\t\t *  @type boolean\n\t\t *  @default true\n\t\t */\n\t\t\"bSmart\": true\n\t};\n\t\n\t\n\t\n\t\n\t/**\n\t * Template object for the way in which DataTables holds information about\n\t * each individual row. This is the object format used for the settings\n\t * aoData array.\n\t *  @namespace\n\t */\n\tDataTable.models.oRow = {\n\t\t/**\n\t\t * TR element for the row\n\t\t *  @type node\n\t\t *  @default null\n\t\t */\n\t\t\"nTr\": null,\n\t\n\t\t/**\n\t\t * Array of TD elements for each row. This is null until the row has been\n\t\t * created.\n\t\t *  @type array nodes\n\t\t *  @default []\n\t\t */\n\t\t\"anCells\": null,\n\t\n\t\t/**\n\t\t * Data object from the original data source for the row. This is either\n\t\t * an array if using the traditional form of DataTables, or an object if\n\t\t * using mData options. The exact type will depend on the passed in\n\t\t * data from the data source, or will be an array if using DOM a data\n\t\t * source.\n\t\t *  @type array|object\n\t\t *  @default []\n\t\t */\n\t\t\"_aData\": [],\n\t\n\t\t/**\n\t\t * Sorting data cache - this array is ostensibly the same length as the\n\t\t * number of columns (although each index is generated only as it is\n\t\t * needed), and holds the data that is used for sorting each column in the\n\t\t * row. We do this cache generation at the start of the sort in order that\n\t\t * the formatting of the sort data need be done only once for each cell\n\t\t * per sort. This array should not be read from or written to by anything\n\t\t * other than the master sorting methods.\n\t\t *  @type array\n\t\t *  @default null\n\t\t *  @private\n\t\t */\n\t\t\"_aSortData\": null,\n\t\n\t\t/**\n\t\t * Per cell filtering data cache. As per the sort data cache, used to\n\t\t * increase the performance of the filtering in DataTables\n\t\t *  @type array\n\t\t *  @default null\n\t\t *  @private\n\t\t */\n\t\t\"_aFilterData\": null,\n\t\n\t\t/**\n\t\t * Filtering data cache. This is the same as the cell filtering cache, but\n\t\t * in this case a string rather than an array. This is easily computed with\n\t\t * a join on `_aFilterData`, but is provided as a cache so the join isn't\n\t\t * needed on every search (memory traded for performance)\n\t\t *  @type array\n\t\t *  @default null\n\t\t *  @private\n\t\t */\n\t\t\"_sFilterRow\": null,\n\t\n\t\t/**\n\t\t * Cache of the class name that DataTables has applied to the row, so we\n\t\t * can quickly look at this variable rather than needing to do a DOM check\n\t\t * on className for the nTr property.\n\t\t *  @type string\n\t\t *  @default <i>Empty string</i>\n\t\t *  @private\n\t\t */\n\t\t\"_sRowStripe\": \"\",\n\t\n\t\t/**\n\t\t * Denote if the original data source was from the DOM, or the data source\n\t\t * object. This is used for invalidating data, so DataTables can\n\t\t * automatically read data from the original source, unless uninstructed\n\t\t * otherwise.\n\t\t *  @type string\n\t\t *  @default null\n\t\t *  @private\n\t\t */\n\t\t\"src\": null,\n\t\n\t\t/**\n\t\t * Index in the aoData array. This saves an indexOf lookup when we have the\n\t\t * object, but want to know the index\n\t\t *  @type integer\n\t\t *  @default -1\n\t\t *  @private\n\t\t */\n\t\t\"idx\": -1\n\t};\n\t\n\t\n\t/**\n\t * Template object for the column information object in DataTables. This object\n\t * is held in the settings aoColumns array and contains all the information that\n\t * DataTables needs about each individual column.\n\t *\n\t * Note that this object is related to {@link DataTable.defaults.column}\n\t * but this one is the internal data store for DataTables's cache of columns.\n\t * It should NOT be manipulated outside of DataTables. Any configuration should\n\t * be done through the initialisation options.\n\t *  @namespace\n\t */\n\tDataTable.models.oColumn = {\n\t\t/**\n\t\t * Column index. This could be worked out on-the-fly with $.inArray, but it\n\t\t * is faster to just hold it as a variable\n\t\t *  @type integer\n\t\t *  @default null\n\t\t */\n\t\t\"idx\": null,\n\t\n\t\t/**\n\t\t * A list of the columns that sorting should occur on when this column\n\t\t * is sorted. That this property is an array allows multi-column sorting\n\t\t * to be defined for a column (for example first name / last name columns\n\t\t * would benefit from this). The values are integers pointing to the\n\t\t * columns to be sorted on (typically it will be a single integer pointing\n\t\t * at itself, but that doesn't need to be the case).\n\t\t *  @type array\n\t\t */\n\t\t\"aDataSort\": null,\n\t\n\t\t/**\n\t\t * Define the sorting directions that are applied to the column, in sequence\n\t\t * as the column is repeatedly sorted upon - i.e. the first value is used\n\t\t * as the sorting direction when the column if first sorted (clicked on).\n\t\t * Sort it again (click again) and it will move on to the next index.\n\t\t * Repeat until loop.\n\t\t *  @type array\n\t\t */\n\t\t\"asSorting\": null,\n\t\n\t\t/**\n\t\t * Flag to indicate if the column is searchable, and thus should be included\n\t\t * in the filtering or not.\n\t\t *  @type boolean\n\t\t */\n\t\t\"bSearchable\": null,\n\t\n\t\t/**\n\t\t * Flag to indicate if the column is sortable or not.\n\t\t *  @type boolean\n\t\t */\n\t\t\"bSortable\": null,\n\t\n\t\t/**\n\t\t * Flag to indicate if the column is currently visible in the table or not\n\t\t *  @type boolean\n\t\t */\n\t\t\"bVisible\": null,\n\t\n\t\t/**\n\t\t * Store for manual type assignment using the `column.type` option. This\n\t\t * is held in store so we can manipulate the column's `sType` property.\n\t\t *  @type string\n\t\t *  @default null\n\t\t *  @private\n\t\t */\n\t\t\"_sManualType\": null,\n\t\n\t\t/**\n\t\t * Flag to indicate if HTML5 data attributes should be used as the data\n\t\t * source for filtering or sorting. True is either are.\n\t\t *  @type boolean\n\t\t *  @default false\n\t\t *  @private\n\t\t */\n\t\t\"_bAttrSrc\": false,\n\t\n\t\t/**\n\t\t * Developer definable function that is called whenever a cell is created (Ajax source,\n\t\t * etc) or processed for input (DOM source). This can be used as a compliment to mRender\n\t\t * allowing you to modify the DOM element (add background colour for example) when the\n\t\t * element is available.\n\t\t *  @type function\n\t\t *  @param {element} nTd The TD node that has been created\n\t\t *  @param {*} sData The Data for the cell\n\t\t *  @param {array|object} oData The data for the whole row\n\t\t *  @param {int} iRow The row index for the aoData data store\n\t\t *  @default null\n\t\t */\n\t\t\"fnCreatedCell\": null,\n\t\n\t\t/**\n\t\t * Function to get data from a cell in a column. You should <b>never</b>\n\t\t * access data directly through _aData internally in DataTables - always use\n\t\t * the method attached to this property. It allows mData to function as\n\t\t * required. This function is automatically assigned by the column\n\t\t * initialisation method\n\t\t *  @type function\n\t\t *  @param {array|object} oData The data array/object for the array\n\t\t *    (i.e. aoData[]._aData)\n\t\t *  @param {string} sSpecific The specific data type you want to get -\n\t\t *    'display', 'type' 'filter' 'sort'\n\t\t *  @returns {*} The data for the cell from the given row's data\n\t\t *  @default null\n\t\t */\n\t\t\"fnGetData\": null,\n\t\n\t\t/**\n\t\t * Function to set data for a cell in the column. You should <b>never</b>\n\t\t * set the data directly to _aData internally in DataTables - always use\n\t\t * this method. It allows mData to function as required. This function\n\t\t * is automatically assigned by the column initialisation method\n\t\t *  @type function\n\t\t *  @param {array|object} oData The data array/object for the array\n\t\t *    (i.e. aoData[]._aData)\n\t\t *  @param {*} sValue Value to set\n\t\t *  @default null\n\t\t */\n\t\t\"fnSetData\": null,\n\t\n\t\t/**\n\t\t * Property to read the value for the cells in the column from the data\n\t\t * source array / object. If null, then the default content is used, if a\n\t\t * function is given then the return from the function is used.\n\t\t *  @type function|int|string|null\n\t\t *  @default null\n\t\t */\n\t\t\"mData\": null,\n\t\n\t\t/**\n\t\t * Partner property to mData which is used (only when defined) to get\n\t\t * the data - i.e. it is basically the same as mData, but without the\n\t\t * 'set' option, and also the data fed to it is the result from mData.\n\t\t * This is the rendering method to match the data method of mData.\n\t\t *  @type function|int|string|null\n\t\t *  @default null\n\t\t */\n\t\t\"mRender\": null,\n\t\n\t\t/**\n\t\t * Unique header TH/TD element for this column - this is what the sorting\n\t\t * listener is attached to (if sorting is enabled.)\n\t\t *  @type node\n\t\t *  @default null\n\t\t */\n\t\t\"nTh\": null,\n\t\n\t\t/**\n\t\t * Unique footer TH/TD element for this column (if there is one). Not used\n\t\t * in DataTables as such, but can be used for plug-ins to reference the\n\t\t * footer for each column.\n\t\t *  @type node\n\t\t *  @default null\n\t\t */\n\t\t\"nTf\": null,\n\t\n\t\t/**\n\t\t * The class to apply to all TD elements in the table's TBODY for the column\n\t\t *  @type string\n\t\t *  @default null\n\t\t */\n\t\t\"sClass\": null,\n\t\n\t\t/**\n\t\t * When DataTables calculates the column widths to assign to each column,\n\t\t * it finds the longest string in each column and then constructs a\n\t\t * temporary table and reads the widths from that. The problem with this\n\t\t * is that \"mmm\" is much wider then \"iiii\", but the latter is a longer\n\t\t * string - thus the calculation can go wrong (doing it properly and putting\n\t\t * it into an DOM object and measuring that is horribly(!) slow). Thus as\n\t\t * a \"work around\" we provide this option. It will append its value to the\n\t\t * text that is found to be the longest string for the column - i.e. padding.\n\t\t *  @type string\n\t\t */\n\t\t\"sContentPadding\": null,\n\t\n\t\t/**\n\t\t * Allows a default value to be given for a column's data, and will be used\n\t\t * whenever a null data source is encountered (this can be because mData\n\t\t * is set to null, or because the data source itself is null).\n\t\t *  @type string\n\t\t *  @default null\n\t\t */\n\t\t\"sDefaultContent\": null,\n\t\n\t\t/**\n\t\t * Name for the column, allowing reference to the column by name as well as\n\t\t * by index (needs a lookup to work by name).\n\t\t *  @type string\n\t\t */\n\t\t\"sName\": null,\n\t\n\t\t/**\n\t\t * Custom sorting data type - defines which of the available plug-ins in\n\t\t * afnSortData the custom sorting will use - if any is defined.\n\t\t *  @type string\n\t\t *  @default std\n\t\t */\n\t\t\"sSortDataType\": 'std',\n\t\n\t\t/**\n\t\t * Class to be applied to the header element when sorting on this column\n\t\t *  @type string\n\t\t *  @default null\n\t\t */\n\t\t\"sSortingClass\": null,\n\t\n\t\t/**\n\t\t * Class to be applied to the header element when sorting on this column -\n\t\t * when jQuery UI theming is used.\n\t\t *  @type string\n\t\t *  @default null\n\t\t */\n\t\t\"sSortingClassJUI\": null,\n\t\n\t\t/**\n\t\t * Title of the column - what is seen in the TH element (nTh).\n\t\t *  @type string\n\t\t */\n\t\t\"sTitle\": null,\n\t\n\t\t/**\n\t\t * Column sorting and filtering type\n\t\t *  @type string\n\t\t *  @default null\n\t\t */\n\t\t\"sType\": null,\n\t\n\t\t/**\n\t\t * Width of the column\n\t\t *  @type string\n\t\t *  @default null\n\t\t */\n\t\t\"sWidth\": null,\n\t\n\t\t/**\n\t\t * Width of the column when it was first \"encountered\"\n\t\t *  @type string\n\t\t *  @default null\n\t\t */\n\t\t\"sWidthOrig\": null\n\t};\n\t\n\t\n\t/*\n\t * Developer note: The properties of the object below are given in Hungarian\n\t * notation, that was used as the interface for DataTables prior to v1.10, however\n\t * from v1.10 onwards the primary interface is camel case. In order to avoid\n\t * breaking backwards compatibility utterly with this change, the Hungarian\n\t * version is still, internally the primary interface, but is is not documented\n\t * - hence the @name tags in each doc comment. This allows a Javascript function\n\t * to create a map from Hungarian notation to camel case (going the other direction\n\t * would require each property to be listed, which would at around 3K to the size\n\t * of DataTables, while this method is about a 0.5K hit.\n\t *\n\t * Ultimately this does pave the way for Hungarian notation to be dropped\n\t * completely, but that is a massive amount of work and will break current\n\t * installs (therefore is on-hold until v2).\n\t */\n\t\n\t/**\n\t * Initialisation options that can be given to DataTables at initialisation\n\t * time.\n\t *  @namespace\n\t */\n\tDataTable.defaults = {\n\t\t/**\n\t\t * An array of data to use for the table, passed in at initialisation which\n\t\t * will be used in preference to any data which is already in the DOM. This is\n\t\t * particularly useful for constructing tables purely in Javascript, for\n\t\t * example with a custom Ajax call.\n\t\t *  @type array\n\t\t *  @default null\n\t\t *\n\t\t *  @dtopt Option\n\t\t *  @name DataTable.defaults.data\n\t\t *\n\t\t *  @example\n\t\t *    // Using a 2D array data source\n\t\t *    $(document).ready( function () {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"data\": [\n\t\t *          ['Trident', 'Internet Explorer 4.0', 'Win 95+', 4, 'X'],\n\t\t *          ['Trident', 'Internet Explorer 5.0', 'Win 95+', 5, 'C'],\n\t\t *        ],\n\t\t *        \"columns\": [\n\t\t *          { \"title\": \"Engine\" },\n\t\t *          { \"title\": \"Browser\" },\n\t\t *          { \"title\": \"Platform\" },\n\t\t *          { \"title\": \"Version\" },\n\t\t *          { \"title\": \"Grade\" }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Using an array of objects as a data source (`data`)\n\t\t *    $(document).ready( function () {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"data\": [\n\t\t *          {\n\t\t *            \"engine\":   \"Trident\",\n\t\t *            \"browser\":  \"Internet Explorer 4.0\",\n\t\t *            \"platform\": \"Win 95+\",\n\t\t *            \"version\":  4,\n\t\t *            \"grade\":    \"X\"\n\t\t *          },\n\t\t *          {\n\t\t *            \"engine\":   \"Trident\",\n\t\t *            \"browser\":  \"Internet Explorer 5.0\",\n\t\t *            \"platform\": \"Win 95+\",\n\t\t *            \"version\":  5,\n\t\t *            \"grade\":    \"C\"\n\t\t *          }\n\t\t *        ],\n\t\t *        \"columns\": [\n\t\t *          { \"title\": \"Engine\",   \"data\": \"engine\" },\n\t\t *          { \"title\": \"Browser\",  \"data\": \"browser\" },\n\t\t *          { \"title\": \"Platform\", \"data\": \"platform\" },\n\t\t *          { \"title\": \"Version\",  \"data\": \"version\" },\n\t\t *          { \"title\": \"Grade\",    \"data\": \"grade\" }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"aaData\": null,\n\t\n\t\n\t\t/**\n\t\t * If ordering is enabled, then DataTables will perform a first pass sort on\n\t\t * initialisation. You can define which column(s) the sort is performed\n\t\t * upon, and the sorting direction, with this variable. The `sorting` array\n\t\t * should contain an array for each column to be sorted initially containing\n\t\t * the column's index and a direction string ('asc' or 'desc').\n\t\t *  @type array\n\t\t *  @default [[0,'asc']]\n\t\t *\n\t\t *  @dtopt Option\n\t\t *  @name DataTable.defaults.order\n\t\t *\n\t\t *  @example\n\t\t *    // Sort by 3rd column first, and then 4th column\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"order\": [[2,'asc'], [3,'desc']]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *    // No initial sorting\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"order\": []\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"aaSorting\": [[0,'asc']],\n\t\n\t\n\t\t/**\n\t\t * This parameter is basically identical to the `sorting` parameter, but\n\t\t * cannot be overridden by user interaction with the table. What this means\n\t\t * is that you could have a column (visible or hidden) which the sorting\n\t\t * will always be forced on first - any sorting after that (from the user)\n\t\t * will then be performed as required. This can be useful for grouping rows\n\t\t * together.\n\t\t *  @type array\n\t\t *  @default null\n\t\t *\n\t\t *  @dtopt Option\n\t\t *  @name DataTable.defaults.orderFixed\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"orderFixed\": [[0,'asc']]\n\t\t *      } );\n\t\t *    } )\n\t\t */\n\t\t\"aaSortingFixed\": [],\n\t\n\t\n\t\t/**\n\t\t * DataTables can be instructed to load data to display in the table from a\n\t\t * Ajax source. This option defines how that Ajax call is made and where to.\n\t\t *\n\t\t * The `ajax` property has three different modes of operation, depending on\n\t\t * how it is defined. These are:\n\t\t *\n\t\t * * `string` - Set the URL from where the data should be loaded from.\n\t\t * * `object` - Define properties for `jQuery.ajax`.\n\t\t * * `function` - Custom data get function\n\t\t *\n\t\t * `string`\n\t\t * --------\n\t\t *\n\t\t * As a string, the `ajax` property simply defines the URL from which\n\t\t * DataTables will load data.\n\t\t *\n\t\t * `object`\n\t\t * --------\n\t\t *\n\t\t * As an object, the parameters in the object are passed to\n\t\t * [jQuery.ajax](http://api.jquery.com/jQuery.ajax/) allowing fine control\n\t\t * of the Ajax request. DataTables has a number of default parameters which\n\t\t * you can override using this option. Please refer to the jQuery\n\t\t * documentation for a full description of the options available, although\n\t\t * the following parameters provide additional options in DataTables or\n\t\t * require special consideration:\n\t\t *\n\t\t * * `data` - As with jQuery, `data` can be provided as an object, but it\n\t\t *   can also be used as a function to manipulate the data DataTables sends\n\t\t *   to the server. The function takes a single parameter, an object of\n\t\t *   parameters with the values that DataTables has readied for sending. An\n\t\t *   object may be returned which will be merged into the DataTables\n\t\t *   defaults, or you can add the items to the object that was passed in and\n\t\t *   not return anything from the function. This supersedes `fnServerParams`\n\t\t *   from DataTables 1.9-.\n\t\t *\n\t\t * * `dataSrc` - By default DataTables will look for the property `data` (or\n\t\t *   `aaData` for compatibility with DataTables 1.9-) when obtaining data\n\t\t *   from an Ajax source or for server-side processing - this parameter\n\t\t *   allows that property to be changed. You can use Javascript dotted\n\t\t *   object notation to get a data source for multiple levels of nesting, or\n\t\t *   it my be used as a function. As a function it takes a single parameter,\n\t\t *   the JSON returned from the server, which can be manipulated as\n\t\t *   required, with the returned value being that used by DataTables as the\n\t\t *   data source for the table. This supersedes `sAjaxDataProp` from\n\t\t *   DataTables 1.9-.\n\t\t *\n\t\t * * `success` - Should not be overridden it is used internally in\n\t\t *   DataTables. To manipulate / transform the data returned by the server\n\t\t *   use `ajax.dataSrc`, or use `ajax` as a function (see below).\n\t\t *\n\t\t * `function`\n\t\t * ----------\n\t\t *\n\t\t * As a function, making the Ajax call is left up to yourself allowing\n\t\t * complete control of the Ajax request. Indeed, if desired, a method other\n\t\t * than Ajax could be used to obtain the required data, such as Web storage\n\t\t * or an AIR database.\n\t\t *\n\t\t * The function is given four parameters and no return is required. The\n\t\t * parameters are:\n\t\t *\n\t\t * 1. _object_ - Data to send to the server\n\t\t * 2. _function_ - Callback function that must be executed when the required\n\t\t *    data has been obtained. That data should be passed into the callback\n\t\t *    as the only parameter\n\t\t * 3. _object_ - DataTables settings object for the table\n\t\t *\n\t\t * Note that this supersedes `fnServerData` from DataTables 1.9-.\n\t\t *\n\t\t *  @type string|object|function\n\t\t *  @default null\n\t\t *\n\t\t *  @dtopt Option\n\t\t *  @name DataTable.defaults.ajax\n\t\t *  @since 1.10.0\n\t\t *\n\t\t * @example\n\t\t *   // Get JSON data from a file via Ajax.\n\t\t *   // Note DataTables expects data in the form `{ data: [ ...data... ] }` by default).\n\t\t *   $('#example').dataTable( {\n\t\t *     \"ajax\": \"data.json\"\n\t\t *   } );\n\t\t *\n\t\t * @example\n\t\t *   // Get JSON data from a file via Ajax, using `dataSrc` to change\n\t\t *   // `data` to `tableData` (i.e. `{ tableData: [ ...data... ] }`)\n\t\t *   $('#example').dataTable( {\n\t\t *     \"ajax\": {\n\t\t *       \"url\": \"data.json\",\n\t\t *       \"dataSrc\": \"tableData\"\n\t\t *     }\n\t\t *   } );\n\t\t *\n\t\t * @example\n\t\t *   // Get JSON data from a file via Ajax, using `dataSrc` to read data\n\t\t *   // from a plain array rather than an array in an object\n\t\t *   $('#example').dataTable( {\n\t\t *     \"ajax\": {\n\t\t *       \"url\": \"data.json\",\n\t\t *       \"dataSrc\": \"\"\n\t\t *     }\n\t\t *   } );\n\t\t *\n\t\t * @example\n\t\t *   // Manipulate the data returned from the server - add a link to data\n\t\t *   // (note this can, should, be done using `render` for the column - this\n\t\t *   // is just a simple example of how the data can be manipulated).\n\t\t *   $('#example').dataTable( {\n\t\t *     \"ajax\": {\n\t\t *       \"url\": \"data.json\",\n\t\t *       \"dataSrc\": function ( json ) {\n\t\t *         for ( var i=0, ien=json.length ; i<ien ; i++ ) {\n\t\t *           json[i][0] = '<a href=\"/message/'+json[i][0]+'>View message</a>';\n\t\t *         }\n\t\t *         return json;\n\t\t *       }\n\t\t *     }\n\t\t *   } );\n\t\t *\n\t\t * @example\n\t\t *   // Add data to the request\n\t\t *   $('#example').dataTable( {\n\t\t *     \"ajax\": {\n\t\t *       \"url\": \"data.json\",\n\t\t *       \"data\": function ( d ) {\n\t\t *         return {\n\t\t *           \"extra_search\": $('#extra').val()\n\t\t *         };\n\t\t *       }\n\t\t *     }\n\t\t *   } );\n\t\t *\n\t\t * @example\n\t\t *   // Send request as POST\n\t\t *   $('#example').dataTable( {\n\t\t *     \"ajax\": {\n\t\t *       \"url\": \"data.json\",\n\t\t *       \"type\": \"POST\"\n\t\t *     }\n\t\t *   } );\n\t\t *\n\t\t * @example\n\t\t *   // Get the data from localStorage (could interface with a form for\n\t\t *   // adding, editing and removing rows).\n\t\t *   $('#example').dataTable( {\n\t\t *     \"ajax\": function (data, callback, settings) {\n\t\t *       callback(\n\t\t *         JSON.parse( localStorage.getItem('dataTablesData') )\n\t\t *       );\n\t\t *     }\n\t\t *   } );\n\t\t */\n\t\t\"ajax\": null,\n\t\n\t\n\t\t/**\n\t\t * This parameter allows you to readily specify the entries in the length drop\n\t\t * down menu that DataTables shows when pagination is enabled. It can be\n\t\t * either a 1D array of options which will be used for both the displayed\n\t\t * option and the value, or a 2D array which will use the array in the first\n\t\t * position as the value, and the array in the second position as the\n\t\t * displayed options (useful for language strings such as 'All').\n\t\t *\n\t\t * Note that the `pageLength` property will be automatically set to the\n\t\t * first value given in this array, unless `pageLength` is also provided.\n\t\t *  @type array\n\t\t *  @default [ 10, 25, 50, 100 ]\n\t\t *\n\t\t *  @dtopt Option\n\t\t *  @name DataTable.defaults.lengthMenu\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"lengthMenu\": [[10, 25, 50, -1], [10, 25, 50, \"All\"]]\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"aLengthMenu\": [ 10, 25, 50, 100 ],\n\t\n\t\n\t\t/**\n\t\t * The `columns` option in the initialisation parameter allows you to define\n\t\t * details about the way individual columns behave. For a full list of\n\t\t * column options that can be set, please see\n\t\t * {@link DataTable.defaults.column}. Note that if you use `columns` to\n\t\t * define your columns, you must have an entry in the array for every single\n\t\t * column that you have in your table (these can be null if you don't which\n\t\t * to specify any options).\n\t\t *  @member\n\t\t *\n\t\t *  @name DataTable.defaults.column\n\t\t */\n\t\t\"aoColumns\": null,\n\t\n\t\t/**\n\t\t * Very similar to `columns`, `columnDefs` allows you to target a specific\n\t\t * column, multiple columns, or all columns, using the `targets` property of\n\t\t * each object in the array. This allows great flexibility when creating\n\t\t * tables, as the `columnDefs` arrays can be of any length, targeting the\n\t\t * columns you specifically want. `columnDefs` may use any of the column\n\t\t * options available: {@link DataTable.defaults.column}, but it _must_\n\t\t * have `targets` defined in each object in the array. Values in the `targets`\n\t\t * array may be:\n\t\t *   <ul>\n\t\t *     <li>a string - class name will be matched on the TH for the column</li>\n\t\t *     <li>0 or a positive integer - column index counting from the left</li>\n\t\t *     <li>a negative integer - column index counting from the right</li>\n\t\t *     <li>the string \"_all\" - all columns (i.e. assign a default)</li>\n\t\t *   </ul>\n\t\t *  @member\n\t\t *\n\t\t *  @name DataTable.defaults.columnDefs\n\t\t */\n\t\t\"aoColumnDefs\": null,\n\t\n\t\n\t\t/**\n\t\t * Basically the same as `search`, this parameter defines the individual column\n\t\t * filtering state at initialisation time. The array must be of the same size\n\t\t * as the number of columns, and each element be an object with the parameters\n\t\t * `search` and `escapeRegex` (the latter is optional). 'null' is also\n\t\t * accepted and the default will be used.\n\t\t *  @type array\n\t\t *  @default []\n\t\t *\n\t\t *  @dtopt Option\n\t\t *  @name DataTable.defaults.searchCols\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"searchCols\": [\n\t\t *          null,\n\t\t *          { \"search\": \"My filter\" },\n\t\t *          null,\n\t\t *          { \"search\": \"^[0-9]\", \"escapeRegex\": false }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } )\n\t\t */\n\t\t\"aoSearchCols\": [],\n\t\n\t\n\t\t/**\n\t\t * An array of CSS classes that should be applied to displayed rows. This\n\t\t * array may be of any length, and DataTables will apply each class\n\t\t * sequentially, looping when required.\n\t\t *  @type array\n\t\t *  @default null <i>Will take the values determined by the `oClasses.stripe*`\n\t\t *    options</i>\n\t\t *\n\t\t *  @dtopt Option\n\t\t *  @name DataTable.defaults.stripeClasses\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"stripeClasses\": [ 'strip1', 'strip2', 'strip3' ]\n\t\t *      } );\n\t\t *    } )\n\t\t */\n\t\t\"asStripeClasses\": null,\n\t\n\t\n\t\t/**\n\t\t * Enable or disable automatic column width calculation. This can be disabled\n\t\t * as an optimisation (it takes some time to calculate the widths) if the\n\t\t * tables widths are passed in using `columns`.\n\t\t *  @type boolean\n\t\t *  @default true\n\t\t *\n\t\t *  @dtopt Features\n\t\t *  @name DataTable.defaults.autoWidth\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function () {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"autoWidth\": false\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"bAutoWidth\": true,\n\t\n\t\n\t\t/**\n\t\t * Deferred rendering can provide DataTables with a huge speed boost when you\n\t\t * are using an Ajax or JS data source for the table. This option, when set to\n\t\t * true, will cause DataTables to defer the creation of the table elements for\n\t\t * each row until they are needed for a draw - saving a significant amount of\n\t\t * time.\n\t\t *  @type boolean\n\t\t *  @default false\n\t\t *\n\t\t *  @dtopt Features\n\t\t *  @name DataTable.defaults.deferRender\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"ajax\": \"sources/arrays.txt\",\n\t\t *        \"deferRender\": true\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"bDeferRender\": false,\n\t\n\t\n\t\t/**\n\t\t * Replace a DataTable which matches the given selector and replace it with\n\t\t * one which has the properties of the new initialisation object passed. If no\n\t\t * table matches the selector, then the new DataTable will be constructed as\n\t\t * per normal.\n\t\t *  @type boolean\n\t\t *  @default false\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @name DataTable.defaults.destroy\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"srollY\": \"200px\",\n\t\t *        \"paginate\": false\n\t\t *      } );\n\t\t *\n\t\t *      // Some time later....\n\t\t *      $('#example').dataTable( {\n\t\t *        \"filter\": false,\n\t\t *        \"destroy\": true\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"bDestroy\": false,\n\t\n\t\n\t\t/**\n\t\t * Enable or disable filtering of data. Filtering in DataTables is \"smart\" in\n\t\t * that it allows the end user to input multiple words (space separated) and\n\t\t * will match a row containing those words, even if not in the order that was\n\t\t * specified (this allow matching across multiple columns). Note that if you\n\t\t * wish to use filtering in DataTables this must remain 'true' - to remove the\n\t\t * default filtering input box and retain filtering abilities, please use\n\t\t * {@link DataTable.defaults.dom}.\n\t\t *  @type boolean\n\t\t *  @default true\n\t\t *\n\t\t *  @dtopt Features\n\t\t *  @name DataTable.defaults.searching\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function () {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"searching\": false\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"bFilter\": true,\n\t\n\t\n\t\t/**\n\t\t * Enable or disable the table information display. This shows information\n\t\t * about the data that is currently visible on the page, including information\n\t\t * about filtered data if that action is being performed.\n\t\t *  @type boolean\n\t\t *  @default true\n\t\t *\n\t\t *  @dtopt Features\n\t\t *  @name DataTable.defaults.info\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function () {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"info\": false\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"bInfo\": true,\n\t\n\t\n\t\t/**\n\t\t * Allows the end user to select the size of a formatted page from a select\n\t\t * menu (sizes are 10, 25, 50 and 100). Requires pagination (`paginate`).\n\t\t *  @type boolean\n\t\t *  @default true\n\t\t *\n\t\t *  @dtopt Features\n\t\t *  @name DataTable.defaults.lengthChange\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function () {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"lengthChange\": false\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"bLengthChange\": true,\n\t\n\t\n\t\t/**\n\t\t * Enable or disable pagination.\n\t\t *  @type boolean\n\t\t *  @default true\n\t\t *\n\t\t *  @dtopt Features\n\t\t *  @name DataTable.defaults.paging\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function () {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"paging\": false\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"bPaginate\": true,\n\t\n\t\n\t\t/**\n\t\t * Enable or disable the display of a 'processing' indicator when the table is\n\t\t * being processed (e.g. a sort). This is particularly useful for tables with\n\t\t * large amounts of data where it can take a noticeable amount of time to sort\n\t\t * the entries.\n\t\t *  @type boolean\n\t\t *  @default false\n\t\t *\n\t\t *  @dtopt Features\n\t\t *  @name DataTable.defaults.processing\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function () {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"processing\": true\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"bProcessing\": false,\n\t\n\t\n\t\t/**\n\t\t * Retrieve the DataTables object for the given selector. Note that if the\n\t\t * table has already been initialised, this parameter will cause DataTables\n\t\t * to simply return the object that has already been set up - it will not take\n\t\t * account of any changes you might have made to the initialisation object\n\t\t * passed to DataTables (setting this parameter to true is an acknowledgement\n\t\t * that you understand this). `destroy` can be used to reinitialise a table if\n\t\t * you need.\n\t\t *  @type boolean\n\t\t *  @default false\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @name DataTable.defaults.retrieve\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      initTable();\n\t\t *      tableActions();\n\t\t *    } );\n\t\t *\n\t\t *    function initTable ()\n\t\t *    {\n\t\t *      return $('#example').dataTable( {\n\t\t *        \"scrollY\": \"200px\",\n\t\t *        \"paginate\": false,\n\t\t *        \"retrieve\": true\n\t\t *      } );\n\t\t *    }\n\t\t *\n\t\t *    function tableActions ()\n\t\t *    {\n\t\t *      var table = initTable();\n\t\t *      // perform API operations with oTable\n\t\t *    }\n\t\t */\n\t\t\"bRetrieve\": false,\n\t\n\t\n\t\t/**\n\t\t * When vertical (y) scrolling is enabled, DataTables will force the height of\n\t\t * the table's viewport to the given height at all times (useful for layout).\n\t\t * However, this can look odd when filtering data down to a small data set,\n\t\t * and the footer is left \"floating\" further down. This parameter (when\n\t\t * enabled) will cause DataTables to collapse the table's viewport down when\n\t\t * the result set will fit within the given Y height.\n\t\t *  @type boolean\n\t\t *  @default false\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @name DataTable.defaults.scrollCollapse\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"scrollY\": \"200\",\n\t\t *        \"scrollCollapse\": true\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"bScrollCollapse\": false,\n\t\n\t\n\t\t/**\n\t\t * Configure DataTables to use server-side processing. Note that the\n\t\t * `ajax` parameter must also be given in order to give DataTables a\n\t\t * source to obtain the required data for each draw.\n\t\t *  @type boolean\n\t\t *  @default false\n\t\t *\n\t\t *  @dtopt Features\n\t\t *  @dtopt Server-side\n\t\t *  @name DataTable.defaults.serverSide\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function () {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"serverSide\": true,\n\t\t *        \"ajax\": \"xhr.php\"\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"bServerSide\": false,\n\t\n\t\n\t\t/**\n\t\t * Enable or disable sorting of columns. Sorting of individual columns can be\n\t\t * disabled by the `sortable` option for each column.\n\t\t *  @type boolean\n\t\t *  @default true\n\t\t *\n\t\t *  @dtopt Features\n\t\t *  @name DataTable.defaults.ordering\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function () {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"ordering\": false\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"bSort\": true,\n\t\n\t\n\t\t/**\n\t\t * Enable or display DataTables' ability to sort multiple columns at the\n\t\t * same time (activated by shift-click by the user).\n\t\t *  @type boolean\n\t\t *  @default true\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @name DataTable.defaults.orderMulti\n\t\t *\n\t\t *  @example\n\t\t *    // Disable multiple column sorting ability\n\t\t *    $(document).ready( function () {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"orderMulti\": false\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"bSortMulti\": true,\n\t\n\t\n\t\t/**\n\t\t * Allows control over whether DataTables should use the top (true) unique\n\t\t * cell that is found for a single column, or the bottom (false - default).\n\t\t * This is useful when using complex headers.\n\t\t *  @type boolean\n\t\t *  @default false\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @name DataTable.defaults.orderCellsTop\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"orderCellsTop\": true\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"bSortCellsTop\": false,\n\t\n\t\n\t\t/**\n\t\t * Enable or disable the addition of the classes `sorting\\_1`, `sorting\\_2` and\n\t\t * `sorting\\_3` to the columns which are currently being sorted on. This is\n\t\t * presented as a feature switch as it can increase processing time (while\n\t\t * classes are removed and added) so for large data sets you might want to\n\t\t * turn this off.\n\t\t *  @type boolean\n\t\t *  @default true\n\t\t *\n\t\t *  @dtopt Features\n\t\t *  @name DataTable.defaults.orderClasses\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function () {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"orderClasses\": false\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"bSortClasses\": true,\n\t\n\t\n\t\t/**\n\t\t * Enable or disable state saving. When enabled HTML5 `localStorage` will be\n\t\t * used to save table display information such as pagination information,\n\t\t * display length, filtering and sorting. As such when the end user reloads\n\t\t * the page the display display will match what thy had previously set up.\n\t\t *\n\t\t * Due to the use of `localStorage` the default state saving is not supported\n\t\t * in IE6 or 7. If state saving is required in those browsers, use\n\t\t * `stateSaveCallback` to provide a storage solution such as cookies.\n\t\t *  @type boolean\n\t\t *  @default false\n\t\t *\n\t\t *  @dtopt Features\n\t\t *  @name DataTable.defaults.stateSave\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function () {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"stateSave\": true\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"bStateSave\": false,\n\t\n\t\n\t\t/**\n\t\t * This function is called when a TR element is created (and all TD child\n\t\t * elements have been inserted), or registered if using a DOM source, allowing\n\t\t * manipulation of the TR element (adding classes etc).\n\t\t *  @type function\n\t\t *  @param {node} row \"TR\" element for the current row\n\t\t *  @param {array} data Raw data array for this row\n\t\t *  @param {int} dataIndex The index of this row in the internal aoData array\n\t\t *\n\t\t *  @dtopt Callbacks\n\t\t *  @name DataTable.defaults.createdRow\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"createdRow\": function( row, data, dataIndex ) {\n\t\t *          // Bold the grade for all 'A' grade browsers\n\t\t *          if ( data[4] == \"A\" )\n\t\t *          {\n\t\t *            $('td:eq(4)', row).html( '<b>A</b>' );\n\t\t *          }\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"fnCreatedRow\": null,\n\t\n\t\n\t\t/**\n\t\t * This function is called on every 'draw' event, and allows you to\n\t\t * dynamically modify any aspect you want about the created DOM.\n\t\t *  @type function\n\t\t *  @param {object} settings DataTables settings object\n\t\t *\n\t\t *  @dtopt Callbacks\n\t\t *  @name DataTable.defaults.drawCallback\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"drawCallback\": function( settings ) {\n\t\t *          alert( 'DataTables has redrawn the table' );\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"fnDrawCallback\": null,\n\t\n\t\n\t\t/**\n\t\t * Identical to fnHeaderCallback() but for the table footer this function\n\t\t * allows you to modify the table footer on every 'draw' event.\n\t\t *  @type function\n\t\t *  @param {node} foot \"TR\" element for the footer\n\t\t *  @param {array} data Full table data (as derived from the original HTML)\n\t\t *  @param {int} start Index for the current display starting point in the\n\t\t *    display array\n\t\t *  @param {int} end Index for the current display ending point in the\n\t\t *    display array\n\t\t *  @param {array int} display Index array to translate the visual position\n\t\t *    to the full data array\n\t\t *\n\t\t *  @dtopt Callbacks\n\t\t *  @name DataTable.defaults.footerCallback\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"footerCallback\": function( tfoot, data, start, end, display ) {\n\t\t *          tfoot.getElementsByTagName('th')[0].innerHTML = \"Starting index is \"+start;\n\t\t *        }\n\t\t *      } );\n\t\t *    } )\n\t\t */\n\t\t\"fnFooterCallback\": null,\n\t\n\t\n\t\t/**\n\t\t * When rendering large numbers in the information element for the table\n\t\t * (i.e. \"Showing 1 to 10 of 57 entries\") DataTables will render large numbers\n\t\t * to have a comma separator for the 'thousands' units (e.g. 1 million is\n\t\t * rendered as \"1,000,000\") to help readability for the end user. This\n\t\t * function will override the default method DataTables uses.\n\t\t *  @type function\n\t\t *  @member\n\t\t *  @param {int} toFormat number to be formatted\n\t\t *  @returns {string} formatted string for DataTables to show the number\n\t\t *\n\t\t *  @dtopt Callbacks\n\t\t *  @name DataTable.defaults.formatNumber\n\t\t *\n\t\t *  @example\n\t\t *    // Format a number using a single quote for the separator (note that\n\t\t *    // this can also be done with the language.thousands option)\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"formatNumber\": function ( toFormat ) {\n\t\t *          return toFormat.toString().replace(\n\t\t *            /\\B(?=(\\d{3})+(?!\\d))/g, \"'\"\n\t\t *          );\n\t\t *        };\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"fnFormatNumber\": function ( toFormat ) {\n\t\t\treturn toFormat.toString().replace(\n\t\t\t\t/\\B(?=(\\d{3})+(?!\\d))/g,\n\t\t\t\tthis.oLanguage.sThousands\n\t\t\t);\n\t\t},\n\t\n\t\n\t\t/**\n\t\t * This function is called on every 'draw' event, and allows you to\n\t\t * dynamically modify the header row. This can be used to calculate and\n\t\t * display useful information about the table.\n\t\t *  @type function\n\t\t *  @param {node} head \"TR\" element for the header\n\t\t *  @param {array} data Full table data (as derived from the original HTML)\n\t\t *  @param {int} start Index for the current display starting point in the\n\t\t *    display array\n\t\t *  @param {int} end Index for the current display ending point in the\n\t\t *    display array\n\t\t *  @param {array int} display Index array to translate the visual position\n\t\t *    to the full data array\n\t\t *\n\t\t *  @dtopt Callbacks\n\t\t *  @name DataTable.defaults.headerCallback\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"fheaderCallback\": function( head, data, start, end, display ) {\n\t\t *          head.getElementsByTagName('th')[0].innerHTML = \"Displaying \"+(end-start)+\" records\";\n\t\t *        }\n\t\t *      } );\n\t\t *    } )\n\t\t */\n\t\t\"fnHeaderCallback\": null,\n\t\n\t\n\t\t/**\n\t\t * The information element can be used to convey information about the current\n\t\t * state of the table. Although the internationalisation options presented by\n\t\t * DataTables are quite capable of dealing with most customisations, there may\n\t\t * be times where you wish to customise the string further. This callback\n\t\t * allows you to do exactly that.\n\t\t *  @type function\n\t\t *  @param {object} oSettings DataTables settings object\n\t\t *  @param {int} start Starting position in data for the draw\n\t\t *  @param {int} end End position in data for the draw\n\t\t *  @param {int} max Total number of rows in the table (regardless of\n\t\t *    filtering)\n\t\t *  @param {int} total Total number of rows in the data set, after filtering\n\t\t *  @param {string} pre The string that DataTables has formatted using it's\n\t\t *    own rules\n\t\t *  @returns {string} The string to be displayed in the information element.\n\t\t *\n\t\t *  @dtopt Callbacks\n\t\t *  @name DataTable.defaults.infoCallback\n\t\t *\n\t\t *  @example\n\t\t *    $('#example').dataTable( {\n\t\t *      \"infoCallback\": function( settings, start, end, max, total, pre ) {\n\t\t *        return start +\" to \"+ end;\n\t\t *      }\n\t\t *    } );\n\t\t */\n\t\t\"fnInfoCallback\": null,\n\t\n\t\n\t\t/**\n\t\t * Called when the table has been initialised. Normally DataTables will\n\t\t * initialise sequentially and there will be no need for this function,\n\t\t * however, this does not hold true when using external language information\n\t\t * since that is obtained using an async XHR call.\n\t\t *  @type function\n\t\t *  @param {object} settings DataTables settings object\n\t\t *  @param {object} json The JSON object request from the server - only\n\t\t *    present if client-side Ajax sourced data is used\n\t\t *\n\t\t *  @dtopt Callbacks\n\t\t *  @name DataTable.defaults.initComplete\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"initComplete\": function(settings, json) {\n\t\t *          alert( 'DataTables has finished its initialisation.' );\n\t\t *        }\n\t\t *      } );\n\t\t *    } )\n\t\t */\n\t\t\"fnInitComplete\": null,\n\t\n\t\n\t\t/**\n\t\t * Called at the very start of each table draw and can be used to cancel the\n\t\t * draw by returning false, any other return (including undefined) results in\n\t\t * the full draw occurring).\n\t\t *  @type function\n\t\t *  @param {object} settings DataTables settings object\n\t\t *  @returns {boolean} False will cancel the draw, anything else (including no\n\t\t *    return) will allow it to complete.\n\t\t *\n\t\t *  @dtopt Callbacks\n\t\t *  @name DataTable.defaults.preDrawCallback\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"preDrawCallback\": function( settings ) {\n\t\t *          if ( $('#test').val() == 1 ) {\n\t\t *            return false;\n\t\t *          }\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"fnPreDrawCallback\": null,\n\t\n\t\n\t\t/**\n\t\t * This function allows you to 'post process' each row after it have been\n\t\t * generated for each table draw, but before it is rendered on screen. This\n\t\t * function might be used for setting the row class name etc.\n\t\t *  @type function\n\t\t *  @param {node} row \"TR\" element for the current row\n\t\t *  @param {array} data Raw data array for this row\n\t\t *  @param {int} displayIndex The display index for the current table draw\n\t\t *  @param {int} displayIndexFull The index of the data in the full list of\n\t\t *    rows (after filtering)\n\t\t *\n\t\t *  @dtopt Callbacks\n\t\t *  @name DataTable.defaults.rowCallback\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"rowCallback\": function( row, data, displayIndex, displayIndexFull ) {\n\t\t *          // Bold the grade for all 'A' grade browsers\n\t\t *          if ( data[4] == \"A\" ) {\n\t\t *            $('td:eq(4)', row).html( '<b>A</b>' );\n\t\t *          }\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"fnRowCallback\": null,\n\t\n\t\n\t\t/**\n\t\t * __Deprecated__ The functionality provided by this parameter has now been\n\t\t * superseded by that provided through `ajax`, which should be used instead.\n\t\t *\n\t\t * This parameter allows you to override the default function which obtains\n\t\t * the data from the server so something more suitable for your application.\n\t\t * For example you could use POST data, or pull information from a Gears or\n\t\t * AIR database.\n\t\t *  @type function\n\t\t *  @member\n\t\t *  @param {string} source HTTP source to obtain the data from (`ajax`)\n\t\t *  @param {array} data A key/value pair object containing the data to send\n\t\t *    to the server\n\t\t *  @param {function} callback to be called on completion of the data get\n\t\t *    process that will draw the data on the page.\n\t\t *  @param {object} settings DataTables settings object\n\t\t *\n\t\t *  @dtopt Callbacks\n\t\t *  @dtopt Server-side\n\t\t *  @name DataTable.defaults.serverData\n\t\t *\n\t\t *  @deprecated 1.10. Please use `ajax` for this functionality now.\n\t\t */\n\t\t\"fnServerData\": null,\n\t\n\t\n\t\t/**\n\t\t * __Deprecated__ The functionality provided by this parameter has now been\n\t\t * superseded by that provided through `ajax`, which should be used instead.\n\t\t *\n\t\t *  It is often useful to send extra data to the server when making an Ajax\n\t\t * request - for example custom filtering information, and this callback\n\t\t * function makes it trivial to send extra information to the server. The\n\t\t * passed in parameter is the data set that has been constructed by\n\t\t * DataTables, and you can add to this or modify it as you require.\n\t\t *  @type function\n\t\t *  @param {array} data Data array (array of objects which are name/value\n\t\t *    pairs) that has been constructed by DataTables and will be sent to the\n\t\t *    server. In the case of Ajax sourced data with server-side processing\n\t\t *    this will be an empty array, for server-side processing there will be a\n\t\t *    significant number of parameters!\n\t\t *  @returns {undefined} Ensure that you modify the data array passed in,\n\t\t *    as this is passed by reference.\n\t\t *\n\t\t *  @dtopt Callbacks\n\t\t *  @dtopt Server-side\n\t\t *  @name DataTable.defaults.serverParams\n\t\t *\n\t\t *  @deprecated 1.10. Please use `ajax` for this functionality now.\n\t\t */\n\t\t\"fnServerParams\": null,\n\t\n\t\n\t\t/**\n\t\t * Load the table state. With this function you can define from where, and how, the\n\t\t * state of a table is loaded. By default DataTables will load from `localStorage`\n\t\t * but you might wish to use a server-side database or cookies.\n\t\t *  @type function\n\t\t *  @member\n\t\t *  @param {object} settings DataTables settings object\n\t\t *  @param {object} callback Callback that can be executed when done. It\n\t\t *    should be passed the loaded state object.\n\t\t *  @return {object} The DataTables state object to be loaded\n\t\t *\n\t\t *  @dtopt Callbacks\n\t\t *  @name DataTable.defaults.stateLoadCallback\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"stateSave\": true,\n\t\t *        \"stateLoadCallback\": function (settings, callback) {\n\t\t *          $.ajax( {\n\t\t *            \"url\": \"/state_load\",\n\t\t *            \"dataType\": \"json\",\n\t\t *            \"success\": function (json) {\n\t\t *              callback( json );\n\t\t *            }\n\t\t *          } );\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"fnStateLoadCallback\": function ( settings ) {\n\t\t\ttry {\n\t\t\t\treturn JSON.parse(\n\t\t\t\t\t(settings.iStateDuration === -1 ? sessionStorage : localStorage).getItem(\n\t\t\t\t\t\t'DataTables_'+settings.sInstance+'_'+location.pathname\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t} catch (e) {\n\t\t\t\treturn {};\n\t\t\t}\n\t\t},\n\t\n\t\n\t\t/**\n\t\t * Callback which allows modification of the saved state prior to loading that state.\n\t\t * This callback is called when the table is loading state from the stored data, but\n\t\t * prior to the settings object being modified by the saved state. Note that for\n\t\t * plug-in authors, you should use the `stateLoadParams` event to load parameters for\n\t\t * a plug-in.\n\t\t *  @type function\n\t\t *  @param {object} settings DataTables settings object\n\t\t *  @param {object} data The state object that is to be loaded\n\t\t *\n\t\t *  @dtopt Callbacks\n\t\t *  @name DataTable.defaults.stateLoadParams\n\t\t *\n\t\t *  @example\n\t\t *    // Remove a saved filter, so filtering is never loaded\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"stateSave\": true,\n\t\t *        \"stateLoadParams\": function (settings, data) {\n\t\t *          data.oSearch.sSearch = \"\";\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Disallow state loading by returning false\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"stateSave\": true,\n\t\t *        \"stateLoadParams\": function (settings, data) {\n\t\t *          return false;\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"fnStateLoadParams\": null,\n\t\n\t\n\t\t/**\n\t\t * Callback that is called when the state has been loaded from the state saving method\n\t\t * and the DataTables settings object has been modified as a result of the loaded state.\n\t\t *  @type function\n\t\t *  @param {object} settings DataTables settings object\n\t\t *  @param {object} data The state object that was loaded\n\t\t *\n\t\t *  @dtopt Callbacks\n\t\t *  @name DataTable.defaults.stateLoaded\n\t\t *\n\t\t *  @example\n\t\t *    // Show an alert with the filtering value that was saved\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"stateSave\": true,\n\t\t *        \"stateLoaded\": function (settings, data) {\n\t\t *          alert( 'Saved filter was: '+data.oSearch.sSearch );\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"fnStateLoaded\": null,\n\t\n\t\n\t\t/**\n\t\t * Save the table state. This function allows you to define where and how the state\n\t\t * information for the table is stored By default DataTables will use `localStorage`\n\t\t * but you might wish to use a server-side database or cookies.\n\t\t *  @type function\n\t\t *  @member\n\t\t *  @param {object} settings DataTables settings object\n\t\t *  @param {object} data The state object to be saved\n\t\t *\n\t\t *  @dtopt Callbacks\n\t\t *  @name DataTable.defaults.stateSaveCallback\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"stateSave\": true,\n\t\t *        \"stateSaveCallback\": function (settings, data) {\n\t\t *          // Send an Ajax request to the server with the state object\n\t\t *          $.ajax( {\n\t\t *            \"url\": \"/state_save\",\n\t\t *            \"data\": data,\n\t\t *            \"dataType\": \"json\",\n\t\t *            \"method\": \"POST\"\n\t\t *            \"success\": function () {}\n\t\t *          } );\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"fnStateSaveCallback\": function ( settings, data ) {\n\t\t\ttry {\n\t\t\t\t(settings.iStateDuration === -1 ? sessionStorage : localStorage).setItem(\n\t\t\t\t\t'DataTables_'+settings.sInstance+'_'+location.pathname,\n\t\t\t\t\tJSON.stringify( data )\n\t\t\t\t);\n\t\t\t} catch (e) {}\n\t\t},\n\t\n\t\n\t\t/**\n\t\t * Callback which allows modification of the state to be saved. Called when the table\n\t\t * has changed state a new state save is required. This method allows modification of\n\t\t * the state saving object prior to actually doing the save, including addition or\n\t\t * other state properties or modification. Note that for plug-in authors, you should\n\t\t * use the `stateSaveParams` event to save parameters for a plug-in.\n\t\t *  @type function\n\t\t *  @param {object} settings DataTables settings object\n\t\t *  @param {object} data The state object to be saved\n\t\t *\n\t\t *  @dtopt Callbacks\n\t\t *  @name DataTable.defaults.stateSaveParams\n\t\t *\n\t\t *  @example\n\t\t *    // Remove a saved filter, so filtering is never saved\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"stateSave\": true,\n\t\t *        \"stateSaveParams\": function (settings, data) {\n\t\t *          data.oSearch.sSearch = \"\";\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"fnStateSaveParams\": null,\n\t\n\t\n\t\t/**\n\t\t * Duration for which the saved state information is considered valid. After this period\n\t\t * has elapsed the state will be returned to the default.\n\t\t * Value is given in seconds.\n\t\t *  @type int\n\t\t *  @default 7200 <i>(2 hours)</i>\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @name DataTable.defaults.stateDuration\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"stateDuration\": 60*60*24; // 1 day\n\t\t *      } );\n\t\t *    } )\n\t\t */\n\t\t\"iStateDuration\": 7200,\n\t\n\t\n\t\t/**\n\t\t * When enabled DataTables will not make a request to the server for the first\n\t\t * page draw - rather it will use the data already on the page (no sorting etc\n\t\t * will be applied to it), thus saving on an XHR at load time. `deferLoading`\n\t\t * is used to indicate that deferred loading is required, but it is also used\n\t\t * to tell DataTables how many records there are in the full table (allowing\n\t\t * the information element and pagination to be displayed correctly). In the case\n\t\t * where a filtering is applied to the table on initial load, this can be\n\t\t * indicated by giving the parameter as an array, where the first element is\n\t\t * the number of records available after filtering and the second element is the\n\t\t * number of records without filtering (allowing the table information element\n\t\t * to be shown correctly).\n\t\t *  @type int | array\n\t\t *  @default null\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @name DataTable.defaults.deferLoading\n\t\t *\n\t\t *  @example\n\t\t *    // 57 records available in the table, no filtering applied\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"serverSide\": true,\n\t\t *        \"ajax\": \"scripts/server_processing.php\",\n\t\t *        \"deferLoading\": 57\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // 57 records after filtering, 100 without filtering (an initial filter applied)\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"serverSide\": true,\n\t\t *        \"ajax\": \"scripts/server_processing.php\",\n\t\t *        \"deferLoading\": [ 57, 100 ],\n\t\t *        \"search\": {\n\t\t *          \"search\": \"my_filter\"\n\t\t *        }\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"iDeferLoading\": null,\n\t\n\t\n\t\t/**\n\t\t * Number of rows to display on a single page when using pagination. If\n\t\t * feature enabled (`lengthChange`) then the end user will be able to override\n\t\t * this to a custom setting using a pop-up menu.\n\t\t *  @type int\n\t\t *  @default 10\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @name DataTable.defaults.pageLength\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"pageLength\": 50\n\t\t *      } );\n\t\t *    } )\n\t\t */\n\t\t\"iDisplayLength\": 10,\n\t\n\t\n\t\t/**\n\t\t * Define the starting point for data display when using DataTables with\n\t\t * pagination. Note that this parameter is the number of records, rather than\n\t\t * the page number, so if you have 10 records per page and want to start on\n\t\t * the third page, it should be \"20\".\n\t\t *  @type int\n\t\t *  @default 0\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @name DataTable.defaults.displayStart\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"displayStart\": 20\n\t\t *      } );\n\t\t *    } )\n\t\t */\n\t\t\"iDisplayStart\": 0,\n\t\n\t\n\t\t/**\n\t\t * By default DataTables allows keyboard navigation of the table (sorting, paging,\n\t\t * and filtering) by adding a `tabindex` attribute to the required elements. This\n\t\t * allows you to tab through the controls and press the enter key to activate them.\n\t\t * The tabindex is default 0, meaning that the tab follows the flow of the document.\n\t\t * You can overrule this using this parameter if you wish. Use a value of -1 to\n\t\t * disable built-in keyboard navigation.\n\t\t *  @type int\n\t\t *  @default 0\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @name DataTable.defaults.tabIndex\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"tabIndex\": 1\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"iTabIndex\": 0,\n\t\n\t\n\t\t/**\n\t\t * Classes that DataTables assigns to the various components and features\n\t\t * that it adds to the HTML table. This allows classes to be configured\n\t\t * during initialisation in addition to through the static\n\t\t * {@link DataTable.ext.oStdClasses} object).\n\t\t *  @namespace\n\t\t *  @name DataTable.defaults.classes\n\t\t */\n\t\t\"oClasses\": {},\n\t\n\t\n\t\t/**\n\t\t * All strings that DataTables uses in the user interface that it creates\n\t\t * are defined in this object, allowing you to modified them individually or\n\t\t * completely replace them all as required.\n\t\t *  @namespace\n\t\t *  @name DataTable.defaults.language\n\t\t */\n\t\t\"oLanguage\": {\n\t\t\t/**\n\t\t\t * Strings that are used for WAI-ARIA labels and controls only (these are not\n\t\t\t * actually visible on the page, but will be read by screenreaders, and thus\n\t\t\t * must be internationalised as well).\n\t\t\t *  @namespace\n\t\t\t *  @name DataTable.defaults.language.aria\n\t\t\t */\n\t\t\t\"oAria\": {\n\t\t\t\t/**\n\t\t\t\t * ARIA label that is added to the table headers when the column may be\n\t\t\t\t * sorted ascending by activing the column (click or return when focused).\n\t\t\t\t * Note that the column header is prefixed to this string.\n\t\t\t\t *  @type string\n\t\t\t\t *  @default : activate to sort column ascending\n\t\t\t\t *\n\t\t\t\t *  @dtopt Language\n\t\t\t\t *  @name DataTable.defaults.language.aria.sortAscending\n\t\t\t\t *\n\t\t\t\t *  @example\n\t\t\t\t *    $(document).ready( function() {\n\t\t\t\t *      $('#example').dataTable( {\n\t\t\t\t *        \"language\": {\n\t\t\t\t *          \"aria\": {\n\t\t\t\t *            \"sortAscending\": \" - click/return to sort ascending\"\n\t\t\t\t *          }\n\t\t\t\t *        }\n\t\t\t\t *      } );\n\t\t\t\t *    } );\n\t\t\t\t */\n\t\t\t\t\"sSortAscending\": \": activate to sort column ascending\",\n\t\n\t\t\t\t/**\n\t\t\t\t * ARIA label that is added to the table headers when the column may be\n\t\t\t\t * sorted descending by activing the column (click or return when focused).\n\t\t\t\t * Note that the column header is prefixed to this string.\n\t\t\t\t *  @type string\n\t\t\t\t *  @default : activate to sort column ascending\n\t\t\t\t *\n\t\t\t\t *  @dtopt Language\n\t\t\t\t *  @name DataTable.defaults.language.aria.sortDescending\n\t\t\t\t *\n\t\t\t\t *  @example\n\t\t\t\t *    $(document).ready( function() {\n\t\t\t\t *      $('#example').dataTable( {\n\t\t\t\t *        \"language\": {\n\t\t\t\t *          \"aria\": {\n\t\t\t\t *            \"sortDescending\": \" - click/return to sort descending\"\n\t\t\t\t *          }\n\t\t\t\t *        }\n\t\t\t\t *      } );\n\t\t\t\t *    } );\n\t\t\t\t */\n\t\t\t\t\"sSortDescending\": \": activate to sort column descending\"\n\t\t\t},\n\t\n\t\t\t/**\n\t\t\t * Pagination string used by DataTables for the built-in pagination\n\t\t\t * control types.\n\t\t\t *  @namespace\n\t\t\t *  @name DataTable.defaults.language.paginate\n\t\t\t */\n\t\t\t\"oPaginate\": {\n\t\t\t\t/**\n\t\t\t\t * Text to use when using the 'full_numbers' type of pagination for the\n\t\t\t\t * button to take the user to the first page.\n\t\t\t\t *  @type string\n\t\t\t\t *  @default First\n\t\t\t\t *\n\t\t\t\t *  @dtopt Language\n\t\t\t\t *  @name DataTable.defaults.language.paginate.first\n\t\t\t\t *\n\t\t\t\t *  @example\n\t\t\t\t *    $(document).ready( function() {\n\t\t\t\t *      $('#example').dataTable( {\n\t\t\t\t *        \"language\": {\n\t\t\t\t *          \"paginate\": {\n\t\t\t\t *            \"first\": \"First page\"\n\t\t\t\t *          }\n\t\t\t\t *        }\n\t\t\t\t *      } );\n\t\t\t\t *    } );\n\t\t\t\t */\n\t\t\t\t\"sFirst\": \"First\",\n\t\n\t\n\t\t\t\t/**\n\t\t\t\t * Text to use when using the 'full_numbers' type of pagination for the\n\t\t\t\t * button to take the user to the last page.\n\t\t\t\t *  @type string\n\t\t\t\t *  @default Last\n\t\t\t\t *\n\t\t\t\t *  @dtopt Language\n\t\t\t\t *  @name DataTable.defaults.language.paginate.last\n\t\t\t\t *\n\t\t\t\t *  @example\n\t\t\t\t *    $(document).ready( function() {\n\t\t\t\t *      $('#example').dataTable( {\n\t\t\t\t *        \"language\": {\n\t\t\t\t *          \"paginate\": {\n\t\t\t\t *            \"last\": \"Last page\"\n\t\t\t\t *          }\n\t\t\t\t *        }\n\t\t\t\t *      } );\n\t\t\t\t *    } );\n\t\t\t\t */\n\t\t\t\t\"sLast\": \"Last\",\n\t\n\t\n\t\t\t\t/**\n\t\t\t\t * Text to use for the 'next' pagination button (to take the user to the\n\t\t\t\t * next page).\n\t\t\t\t *  @type string\n\t\t\t\t *  @default Next\n\t\t\t\t *\n\t\t\t\t *  @dtopt Language\n\t\t\t\t *  @name DataTable.defaults.language.paginate.next\n\t\t\t\t *\n\t\t\t\t *  @example\n\t\t\t\t *    $(document).ready( function() {\n\t\t\t\t *      $('#example').dataTable( {\n\t\t\t\t *        \"language\": {\n\t\t\t\t *          \"paginate\": {\n\t\t\t\t *            \"next\": \"Next page\"\n\t\t\t\t *          }\n\t\t\t\t *        }\n\t\t\t\t *      } );\n\t\t\t\t *    } );\n\t\t\t\t */\n\t\t\t\t\"sNext\": \"Next\",\n\t\n\t\n\t\t\t\t/**\n\t\t\t\t * Text to use for the 'previous' pagination button (to take the user to\n\t\t\t\t * the previous page).\n\t\t\t\t *  @type string\n\t\t\t\t *  @default Previous\n\t\t\t\t *\n\t\t\t\t *  @dtopt Language\n\t\t\t\t *  @name DataTable.defaults.language.paginate.previous\n\t\t\t\t *\n\t\t\t\t *  @example\n\t\t\t\t *    $(document).ready( function() {\n\t\t\t\t *      $('#example').dataTable( {\n\t\t\t\t *        \"language\": {\n\t\t\t\t *          \"paginate\": {\n\t\t\t\t *            \"previous\": \"Previous page\"\n\t\t\t\t *          }\n\t\t\t\t *        }\n\t\t\t\t *      } );\n\t\t\t\t *    } );\n\t\t\t\t */\n\t\t\t\t\"sPrevious\": \"Previous\"\n\t\t\t},\n\t\n\t\t\t/**\n\t\t\t * This string is shown in preference to `zeroRecords` when the table is\n\t\t\t * empty of data (regardless of filtering). Note that this is an optional\n\t\t\t * parameter - if it is not given, the value of `zeroRecords` will be used\n\t\t\t * instead (either the default or given value).\n\t\t\t *  @type string\n\t\t\t *  @default No data available in table\n\t\t\t *\n\t\t\t *  @dtopt Language\n\t\t\t *  @name DataTable.defaults.language.emptyTable\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"emptyTable\": \"No data available in table\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n\t\t\t */\n\t\t\t\"sEmptyTable\": \"No data available in table\",\n\t\n\t\n\t\t\t/**\n\t\t\t * This string gives information to the end user about the information\n\t\t\t * that is current on display on the page. The following tokens can be\n\t\t\t * used in the string and will be dynamically replaced as the table\n\t\t\t * display updates. This tokens can be placed anywhere in the string, or\n\t\t\t * removed as needed by the language requires:\n\t\t\t *\n\t\t\t * * `\\_START\\_` - Display index of the first record on the current page\n\t\t\t * * `\\_END\\_` - Display index of the last record on the current page\n\t\t\t * * `\\_TOTAL\\_` - Number of records in the table after filtering\n\t\t\t * * `\\_MAX\\_` - Number of records in the table without filtering\n\t\t\t * * `\\_PAGE\\_` - Current page number\n\t\t\t * * `\\_PAGES\\_` - Total number of pages of data in the table\n\t\t\t *\n\t\t\t *  @type string\n\t\t\t *  @default Showing _START_ to _END_ of _TOTAL_ entries\n\t\t\t *\n\t\t\t *  @dtopt Language\n\t\t\t *  @name DataTable.defaults.language.info\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"info\": \"Showing page _PAGE_ of _PAGES_\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n\t\t\t */\n\t\t\t\"sInfo\": \"Showing _START_ to _END_ of _TOTAL_ entries\",\n\t\n\t\n\t\t\t/**\n\t\t\t * Display information string for when the table is empty. Typically the\n\t\t\t * format of this string should match `info`.\n\t\t\t *  @type string\n\t\t\t *  @default Showing 0 to 0 of 0 entries\n\t\t\t *\n\t\t\t *  @dtopt Language\n\t\t\t *  @name DataTable.defaults.language.infoEmpty\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"infoEmpty\": \"No entries to show\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n\t\t\t */\n\t\t\t\"sInfoEmpty\": \"Showing 0 to 0 of 0 entries\",\n\t\n\t\n\t\t\t/**\n\t\t\t * When a user filters the information in a table, this string is appended\n\t\t\t * to the information (`info`) to give an idea of how strong the filtering\n\t\t\t * is. The variable _MAX_ is dynamically updated.\n\t\t\t *  @type string\n\t\t\t *  @default (filtered from _MAX_ total entries)\n\t\t\t *\n\t\t\t *  @dtopt Language\n\t\t\t *  @name DataTable.defaults.language.infoFiltered\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"infoFiltered\": \" - filtering from _MAX_ records\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n\t\t\t */\n\t\t\t\"sInfoFiltered\": \"(filtered from _MAX_ total entries)\",\n\t\n\t\n\t\t\t/**\n\t\t\t * If can be useful to append extra information to the info string at times,\n\t\t\t * and this variable does exactly that. This information will be appended to\n\t\t\t * the `info` (`infoEmpty` and `infoFiltered` in whatever combination they are\n\t\t\t * being used) at all times.\n\t\t\t *  @type string\n\t\t\t *  @default <i>Empty string</i>\n\t\t\t *\n\t\t\t *  @dtopt Language\n\t\t\t *  @name DataTable.defaults.language.infoPostFix\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"infoPostFix\": \"All records shown are derived from real information.\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n\t\t\t */\n\t\t\t\"sInfoPostFix\": \"\",\n\t\n\t\n\t\t\t/**\n\t\t\t * This decimal place operator is a little different from the other\n\t\t\t * language options since DataTables doesn't output floating point\n\t\t\t * numbers, so it won't ever use this for display of a number. Rather,\n\t\t\t * what this parameter does is modify the sort methods of the table so\n\t\t\t * that numbers which are in a format which has a character other than\n\t\t\t * a period (`.`) as a decimal place will be sorted numerically.\n\t\t\t *\n\t\t\t * Note that numbers with different decimal places cannot be shown in\n\t\t\t * the same table and still be sortable, the table must be consistent.\n\t\t\t * However, multiple different tables on the page can use different\n\t\t\t * decimal place characters.\n\t\t\t *  @type string\n\t\t\t *  @default \n\t\t\t *\n\t\t\t *  @dtopt Language\n\t\t\t *  @name DataTable.defaults.language.decimal\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"decimal\": \",\"\n\t\t\t *          \"thousands\": \".\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n\t\t\t */\n\t\t\t\"sDecimal\": \"\",\n\t\n\t\n\t\t\t/**\n\t\t\t * DataTables has a build in number formatter (`formatNumber`) which is\n\t\t\t * used to format large numbers that are used in the table information.\n\t\t\t * By default a comma is used, but this can be trivially changed to any\n\t\t\t * character you wish with this parameter.\n\t\t\t *  @type string\n\t\t\t *  @default ,\n\t\t\t *\n\t\t\t *  @dtopt Language\n\t\t\t *  @name DataTable.defaults.language.thousands\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"thousands\": \"'\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n\t\t\t */\n\t\t\t\"sThousands\": \",\",\n\t\n\t\n\t\t\t/**\n\t\t\t * Detail the action that will be taken when the drop down menu for the\n\t\t\t * pagination length option is changed. The '_MENU_' variable is replaced\n\t\t\t * with a default select list of 10, 25, 50 and 100, and can be replaced\n\t\t\t * with a custom select box if required.\n\t\t\t *  @type string\n\t\t\t *  @default Show _MENU_ entries\n\t\t\t *\n\t\t\t *  @dtopt Language\n\t\t\t *  @name DataTable.defaults.language.lengthMenu\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    // Language change only\n\t\t\t *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"lengthMenu\": \"Display _MENU_ records\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    // Language and options change\n\t\t\t *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"lengthMenu\": 'Display <select>'+\n\t\t\t *            '<option value=\"10\">10</option>'+\n\t\t\t *            '<option value=\"20\">20</option>'+\n\t\t\t *            '<option value=\"30\">30</option>'+\n\t\t\t *            '<option value=\"40\">40</option>'+\n\t\t\t *            '<option value=\"50\">50</option>'+\n\t\t\t *            '<option value=\"-1\">All</option>'+\n\t\t\t *            '</select> records'\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n\t\t\t */\n\t\t\t\"sLengthMenu\": \"Show _MENU_ entries\",\n\t\n\t\n\t\t\t/**\n\t\t\t * When using Ajax sourced data and during the first draw when DataTables is\n\t\t\t * gathering the data, this message is shown in an empty row in the table to\n\t\t\t * indicate to the end user the the data is being loaded. Note that this\n\t\t\t * parameter is not used when loading data by server-side processing, just\n\t\t\t * Ajax sourced data with client-side processing.\n\t\t\t *  @type string\n\t\t\t *  @default Loading...\n\t\t\t *\n\t\t\t *  @dtopt Language\n\t\t\t *  @name DataTable.defaults.language.loadingRecords\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"loadingRecords\": \"Please wait - loading...\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n\t\t\t */\n\t\t\t\"sLoadingRecords\": \"Loading...\",\n\t\n\t\n\t\t\t/**\n\t\t\t * Text which is displayed when the table is processing a user action\n\t\t\t * (usually a sort command or similar).\n\t\t\t *  @type string\n\t\t\t *  @default Processing...\n\t\t\t *\n\t\t\t *  @dtopt Language\n\t\t\t *  @name DataTable.defaults.language.processing\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"processing\": \"DataTables is currently busy\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n\t\t\t */\n\t\t\t\"sProcessing\": \"Processing...\",\n\t\n\t\n\t\t\t/**\n\t\t\t * Details the actions that will be taken when the user types into the\n\t\t\t * filtering input text box. The variable \"_INPUT_\", if used in the string,\n\t\t\t * is replaced with the HTML text box for the filtering input allowing\n\t\t\t * control over where it appears in the string. If \"_INPUT_\" is not given\n\t\t\t * then the input box is appended to the string automatically.\n\t\t\t *  @type string\n\t\t\t *  @default Search:\n\t\t\t *\n\t\t\t *  @dtopt Language\n\t\t\t *  @name DataTable.defaults.language.search\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    // Input text box will be appended at the end automatically\n\t\t\t *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"search\": \"Filter records:\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    // Specify where the filter should appear\n\t\t\t *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"search\": \"Apply filter _INPUT_ to table\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n\t\t\t */\n\t\t\t\"sSearch\": \"Search:\",\n\t\n\t\n\t\t\t/**\n\t\t\t * Assign a `placeholder` attribute to the search `input` element\n\t\t\t *  @type string\n\t\t\t *  @default \n\t\t\t *\n\t\t\t *  @dtopt Language\n\t\t\t *  @name DataTable.defaults.language.searchPlaceholder\n\t\t\t */\n\t\t\t\"sSearchPlaceholder\": \"\",\n\t\n\t\n\t\t\t/**\n\t\t\t * All of the language information can be stored in a file on the\n\t\t\t * server-side, which DataTables will look up if this parameter is passed.\n\t\t\t * It must store the URL of the language file, which is in a JSON format,\n\t\t\t * and the object has the same properties as the oLanguage object in the\n\t\t\t * initialiser object (i.e. the above parameters). Please refer to one of\n\t\t\t * the example language files to see how this works in action.\n\t\t\t *  @type string\n\t\t\t *  @default <i>Empty string - i.e. disabled</i>\n\t\t\t *\n\t\t\t *  @dtopt Language\n\t\t\t *  @name DataTable.defaults.language.url\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"url\": \"http://www.sprymedia.co.uk/dataTables/lang.txt\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n\t\t\t */\n\t\t\t\"sUrl\": \"\",\n\t\n\t\n\t\t\t/**\n\t\t\t * Text shown inside the table records when the is no information to be\n\t\t\t * displayed after filtering. `emptyTable` is shown when there is simply no\n\t\t\t * information in the table at all (regardless of filtering).\n\t\t\t *  @type string\n\t\t\t *  @default No matching records found\n\t\t\t *\n\t\t\t *  @dtopt Language\n\t\t\t *  @name DataTable.defaults.language.zeroRecords\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    $(document).ready( function() {\n\t\t\t *      $('#example').dataTable( {\n\t\t\t *        \"language\": {\n\t\t\t *          \"zeroRecords\": \"No records to display\"\n\t\t\t *        }\n\t\t\t *      } );\n\t\t\t *    } );\n\t\t\t */\n\t\t\t\"sZeroRecords\": \"No matching records found\"\n\t\t},\n\t\n\t\n\t\t/**\n\t\t * This parameter allows you to have define the global filtering state at\n\t\t * initialisation time. As an object the `search` parameter must be\n\t\t * defined, but all other parameters are optional. When `regex` is true,\n\t\t * the search string will be treated as a regular expression, when false\n\t\t * (default) it will be treated as a straight string. When `smart`\n\t\t * DataTables will use it's smart filtering methods (to word match at\n\t\t * any point in the data), when false this will not be done.\n\t\t *  @namespace\n\t\t *  @extends DataTable.models.oSearch\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @name DataTable.defaults.search\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"search\": {\"search\": \"Initial search\"}\n\t\t *      } );\n\t\t *    } )\n\t\t */\n\t\t\"oSearch\": $.extend( {}, DataTable.models.oSearch ),\n\t\n\t\n\t\t/**\n\t\t * __Deprecated__ The functionality provided by this parameter has now been\n\t\t * superseded by that provided through `ajax`, which should be used instead.\n\t\t *\n\t\t * By default DataTables will look for the property `data` (or `aaData` for\n\t\t * compatibility with DataTables 1.9-) when obtaining data from an Ajax\n\t\t * source or for server-side processing - this parameter allows that\n\t\t * property to be changed. You can use Javascript dotted object notation to\n\t\t * get a data source for multiple levels of nesting.\n\t\t *  @type string\n\t\t *  @default data\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @dtopt Server-side\n\t\t *  @name DataTable.defaults.ajaxDataProp\n\t\t *\n\t\t *  @deprecated 1.10. Please use `ajax` for this functionality now.\n\t\t */\n\t\t\"sAjaxDataProp\": \"data\",\n\t\n\t\n\t\t/**\n\t\t * __Deprecated__ The functionality provided by this parameter has now been\n\t\t * superseded by that provided through `ajax`, which should be used instead.\n\t\t *\n\t\t * You can instruct DataTables to load data from an external\n\t\t * source using this parameter (use aData if you want to pass data in you\n\t\t * already have). Simply provide a url a JSON object can be obtained from.\n\t\t *  @type string\n\t\t *  @default null\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @dtopt Server-side\n\t\t *  @name DataTable.defaults.ajaxSource\n\t\t *\n\t\t *  @deprecated 1.10. Please use `ajax` for this functionality now.\n\t\t */\n\t\t\"sAjaxSource\": null,\n\t\n\t\n\t\t/**\n\t\t * This initialisation variable allows you to specify exactly where in the\n\t\t * DOM you want DataTables to inject the various controls it adds to the page\n\t\t * (for example you might want the pagination controls at the top of the\n\t\t * table). DIV elements (with or without a custom class) can also be added to\n\t\t * aid styling. The follow syntax is used:\n\t\t *   <ul>\n\t\t *     <li>The following options are allowed:\n\t\t *       <ul>\n\t\t *         <li>'l' - Length changing</li>\n\t\t *         <li>'f' - Filtering input</li>\n\t\t *         <li>'t' - The table!</li>\n\t\t *         <li>'i' - Information</li>\n\t\t *         <li>'p' - Pagination</li>\n\t\t *         <li>'r' - pRocessing</li>\n\t\t *       </ul>\n\t\t *     </li>\n\t\t *     <li>The following constants are allowed:\n\t\t *       <ul>\n\t\t *         <li>'H' - jQueryUI theme \"header\" classes ('fg-toolbar ui-widget-header ui-corner-tl ui-corner-tr ui-helper-clearfix')</li>\n\t\t *         <li>'F' - jQueryUI theme \"footer\" classes ('fg-toolbar ui-widget-header ui-corner-bl ui-corner-br ui-helper-clearfix')</li>\n\t\t *       </ul>\n\t\t *     </li>\n\t\t *     <li>The following syntax is expected:\n\t\t *       <ul>\n\t\t *         <li>'&lt;' and '&gt;' - div elements</li>\n\t\t *         <li>'&lt;\"class\" and '&gt;' - div with a class</li>\n\t\t *         <li>'&lt;\"#id\" and '&gt;' - div with an ID</li>\n\t\t *       </ul>\n\t\t *     </li>\n\t\t *     <li>Examples:\n\t\t *       <ul>\n\t\t *         <li>'&lt;\"wrapper\"flipt&gt;'</li>\n\t\t *         <li>'&lt;lf&lt;t&gt;ip&gt;'</li>\n\t\t *       </ul>\n\t\t *     </li>\n\t\t *   </ul>\n\t\t *  @type string\n\t\t *  @default lfrtip <i>(when `jQueryUI` is false)</i> <b>or</b>\n\t\t *    <\"H\"lfr>t<\"F\"ip> <i>(when `jQueryUI` is true)</i>\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @name DataTable.defaults.dom\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"dom\": '&lt;\"top\"i&gt;rt&lt;\"bottom\"flp&gt;&lt;\"clear\"&gt;'\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"sDom\": \"lfrtip\",\n\t\n\t\n\t\t/**\n\t\t * Search delay option. This will throttle full table searches that use the\n\t\t * DataTables provided search input element (it does not effect calls to\n\t\t * `dt-api search()`, providing a delay before the search is made.\n\t\t *  @type integer\n\t\t *  @default 0\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @name DataTable.defaults.searchDelay\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"searchDelay\": 200\n\t\t *      } );\n\t\t *    } )\n\t\t */\n\t\t\"searchDelay\": null,\n\t\n\t\n\t\t/**\n\t\t * DataTables features six different built-in options for the buttons to\n\t\t * display for pagination control:\n\t\t *\n\t\t * * `numbers` - Page number buttons only\n\t\t * * `simple` - 'Previous' and 'Next' buttons only\n\t\t * * 'simple_numbers` - 'Previous' and 'Next' buttons, plus page numbers\n\t\t * * `full` - 'First', 'Previous', 'Next' and 'Last' buttons\n\t\t * * `full_numbers` - 'First', 'Previous', 'Next' and 'Last' buttons, plus page numbers\n\t\t * * `first_last_numbers` - 'First' and 'Last' buttons, plus page numbers\n\t\t *  \n\t\t * Further methods can be added using {@link DataTable.ext.oPagination}.\n\t\t *  @type string\n\t\t *  @default simple_numbers\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @name DataTable.defaults.pagingType\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"pagingType\": \"full_numbers\"\n\t\t *      } );\n\t\t *    } )\n\t\t */\n\t\t\"sPaginationType\": \"simple_numbers\",\n\t\n\t\n\t\t/**\n\t\t * Enable horizontal scrolling. When a table is too wide to fit into a\n\t\t * certain layout, or you have a large number of columns in the table, you\n\t\t * can enable x-scrolling to show the table in a viewport, which can be\n\t\t * scrolled. This property can be `true` which will allow the table to\n\t\t * scroll horizontally when needed, or any CSS unit, or a number (in which\n\t\t * case it will be treated as a pixel measurement). Setting as simply `true`\n\t\t * is recommended.\n\t\t *  @type boolean|string\n\t\t *  @default <i>blank string - i.e. disabled</i>\n\t\t *\n\t\t *  @dtopt Features\n\t\t *  @name DataTable.defaults.scrollX\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"scrollX\": true,\n\t\t *        \"scrollCollapse\": true\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"sScrollX\": \"\",\n\t\n\t\n\t\t/**\n\t\t * This property can be used to force a DataTable to use more width than it\n\t\t * might otherwise do when x-scrolling is enabled. For example if you have a\n\t\t * table which requires to be well spaced, this parameter is useful for\n\t\t * \"over-sizing\" the table, and thus forcing scrolling. This property can by\n\t\t * any CSS unit, or a number (in which case it will be treated as a pixel\n\t\t * measurement).\n\t\t *  @type string\n\t\t *  @default <i>blank string - i.e. disabled</i>\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @name DataTable.defaults.scrollXInner\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"scrollX\": \"100%\",\n\t\t *        \"scrollXInner\": \"110%\"\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"sScrollXInner\": \"\",\n\t\n\t\n\t\t/**\n\t\t * Enable vertical scrolling. Vertical scrolling will constrain the DataTable\n\t\t * to the given height, and enable scrolling for any data which overflows the\n\t\t * current viewport. This can be used as an alternative to paging to display\n\t\t * a lot of data in a small area (although paging and scrolling can both be\n\t\t * enabled at the same time). This property can be any CSS unit, or a number\n\t\t * (in which case it will be treated as a pixel measurement).\n\t\t *  @type string\n\t\t *  @default <i>blank string - i.e. disabled</i>\n\t\t *\n\t\t *  @dtopt Features\n\t\t *  @name DataTable.defaults.scrollY\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"scrollY\": \"200px\",\n\t\t *        \"paginate\": false\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"sScrollY\": \"\",\n\t\n\t\n\t\t/**\n\t\t * __Deprecated__ The functionality provided by this parameter has now been\n\t\t * superseded by that provided through `ajax`, which should be used instead.\n\t\t *\n\t\t * Set the HTTP method that is used to make the Ajax call for server-side\n\t\t * processing or Ajax sourced data.\n\t\t *  @type string\n\t\t *  @default GET\n\t\t *\n\t\t *  @dtopt Options\n\t\t *  @dtopt Server-side\n\t\t *  @name DataTable.defaults.serverMethod\n\t\t *\n\t\t *  @deprecated 1.10. Please use `ajax` for this functionality now.\n\t\t */\n\t\t\"sServerMethod\": \"GET\",\n\t\n\t\n\t\t/**\n\t\t * DataTables makes use of renderers when displaying HTML elements for\n\t\t * a table. These renderers can be added or modified by plug-ins to\n\t\t * generate suitable mark-up for a site. For example the Bootstrap\n\t\t * integration plug-in for DataTables uses a paging button renderer to\n\t\t * display pagination buttons in the mark-up required by Bootstrap.\n\t\t *\n\t\t * For further information about the renderers available see\n\t\t * DataTable.ext.renderer\n\t\t *  @type string|object\n\t\t *  @default null\n\t\t *\n\t\t *  @name DataTable.defaults.renderer\n\t\t *\n\t\t */\n\t\t\"renderer\": null,\n\t\n\t\n\t\t/**\n\t\t * Set the data property name that DataTables should use to get a row's id\n\t\t * to set as the `id` property in the node.\n\t\t *  @type string\n\t\t *  @default DT_RowId\n\t\t *\n\t\t *  @name DataTable.defaults.rowId\n\t\t */\n\t\t\"rowId\": \"DT_RowId\"\n\t};\n\t\n\t_fnHungarianMap( DataTable.defaults );\n\t\n\t\n\t\n\t/*\n\t * Developer note - See note in model.defaults.js about the use of Hungarian\n\t * notation and camel case.\n\t */\n\t\n\t/**\n\t * Column options that can be given to DataTables at initialisation time.\n\t *  @namespace\n\t */\n\tDataTable.defaults.column = {\n\t\t/**\n\t\t * Define which column(s) an order will occur on for this column. This\n\t\t * allows a column's ordering to take multiple columns into account when\n\t\t * doing a sort or use the data from a different column. For example first\n\t\t * name / last name columns make sense to do a multi-column sort over the\n\t\t * two columns.\n\t\t *  @type array|int\n\t\t *  @default null <i>Takes the value of the column index automatically</i>\n\t\t *\n\t\t *  @name DataTable.defaults.column.orderData\n\t\t *  @dtopt Columns\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columnDefs`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [\n\t\t *          { \"orderData\": [ 0, 1 ], \"targets\": [ 0 ] },\n\t\t *          { \"orderData\": [ 1, 0 ], \"targets\": [ 1 ] },\n\t\t *          { \"orderData\": 2, \"targets\": [ 2 ] }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columns`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columns\": [\n\t\t *          { \"orderData\": [ 0, 1 ] },\n\t\t *          { \"orderData\": [ 1, 0 ] },\n\t\t *          { \"orderData\": 2 },\n\t\t *          null,\n\t\t *          null\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"aDataSort\": null,\n\t\t\"iDataSort\": -1,\n\t\n\t\n\t\t/**\n\t\t * You can control the default ordering direction, and even alter the\n\t\t * behaviour of the sort handler (i.e. only allow ascending ordering etc)\n\t\t * using this parameter.\n\t\t *  @type array\n\t\t *  @default [ 'asc', 'desc' ]\n\t\t *\n\t\t *  @name DataTable.defaults.column.orderSequence\n\t\t *  @dtopt Columns\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columnDefs`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [\n\t\t *          { \"orderSequence\": [ \"asc\" ], \"targets\": [ 1 ] },\n\t\t *          { \"orderSequence\": [ \"desc\", \"asc\", \"asc\" ], \"targets\": [ 2 ] },\n\t\t *          { \"orderSequence\": [ \"desc\" ], \"targets\": [ 3 ] }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columns`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columns\": [\n\t\t *          null,\n\t\t *          { \"orderSequence\": [ \"asc\" ] },\n\t\t *          { \"orderSequence\": [ \"desc\", \"asc\", \"asc\" ] },\n\t\t *          { \"orderSequence\": [ \"desc\" ] },\n\t\t *          null\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"asSorting\": [ 'asc', 'desc' ],\n\t\n\t\n\t\t/**\n\t\t * Enable or disable filtering on the data in this column.\n\t\t *  @type boolean\n\t\t *  @default true\n\t\t *\n\t\t *  @name DataTable.defaults.column.searchable\n\t\t *  @dtopt Columns\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columnDefs`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [\n\t\t *          { \"searchable\": false, \"targets\": [ 0 ] }\n\t\t *        ] } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columns`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columns\": [\n\t\t *          { \"searchable\": false },\n\t\t *          null,\n\t\t *          null,\n\t\t *          null,\n\t\t *          null\n\t\t *        ] } );\n\t\t *    } );\n\t\t */\n\t\t\"bSearchable\": true,\n\t\n\t\n\t\t/**\n\t\t * Enable or disable ordering on this column.\n\t\t *  @type boolean\n\t\t *  @default true\n\t\t *\n\t\t *  @name DataTable.defaults.column.orderable\n\t\t *  @dtopt Columns\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columnDefs`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [\n\t\t *          { \"orderable\": false, \"targets\": [ 0 ] }\n\t\t *        ] } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columns`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columns\": [\n\t\t *          { \"orderable\": false },\n\t\t *          null,\n\t\t *          null,\n\t\t *          null,\n\t\t *          null\n\t\t *        ] } );\n\t\t *    } );\n\t\t */\n\t\t\"bSortable\": true,\n\t\n\t\n\t\t/**\n\t\t * Enable or disable the display of this column.\n\t\t *  @type boolean\n\t\t *  @default true\n\t\t *\n\t\t *  @name DataTable.defaults.column.visible\n\t\t *  @dtopt Columns\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columnDefs`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [\n\t\t *          { \"visible\": false, \"targets\": [ 0 ] }\n\t\t *        ] } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columns`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columns\": [\n\t\t *          { \"visible\": false },\n\t\t *          null,\n\t\t *          null,\n\t\t *          null,\n\t\t *          null\n\t\t *        ] } );\n\t\t *    } );\n\t\t */\n\t\t\"bVisible\": true,\n\t\n\t\n\t\t/**\n\t\t * Developer definable function that is called whenever a cell is created (Ajax source,\n\t\t * etc) or processed for input (DOM source). This can be used as a compliment to mRender\n\t\t * allowing you to modify the DOM element (add background colour for example) when the\n\t\t * element is available.\n\t\t *  @type function\n\t\t *  @param {element} td The TD node that has been created\n\t\t *  @param {*} cellData The Data for the cell\n\t\t *  @param {array|object} rowData The data for the whole row\n\t\t *  @param {int} row The row index for the aoData data store\n\t\t *  @param {int} col The column index for aoColumns\n\t\t *\n\t\t *  @name DataTable.defaults.column.createdCell\n\t\t *  @dtopt Columns\n\t\t *\n\t\t *  @example\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [ {\n\t\t *          \"targets\": [3],\n\t\t *          \"createdCell\": function (td, cellData, rowData, row, col) {\n\t\t *            if ( cellData == \"1.7\" ) {\n\t\t *              $(td).css('color', 'blue')\n\t\t *            }\n\t\t *          }\n\t\t *        } ]\n\t\t *      });\n\t\t *    } );\n\t\t */\n\t\t\"fnCreatedCell\": null,\n\t\n\t\n\t\t/**\n\t\t * This parameter has been replaced by `data` in DataTables to ensure naming\n\t\t * consistency. `dataProp` can still be used, as there is backwards\n\t\t * compatibility in DataTables for this option, but it is strongly\n\t\t * recommended that you use `data` in preference to `dataProp`.\n\t\t *  @name DataTable.defaults.column.dataProp\n\t\t */\n\t\n\t\n\t\t/**\n\t\t * This property can be used to read data from any data source property,\n\t\t * including deeply nested objects / properties. `data` can be given in a\n\t\t * number of different ways which effect its behaviour:\n\t\t *\n\t\t * * `integer` - treated as an array index for the data source. This is the\n\t\t *   default that DataTables uses (incrementally increased for each column).\n\t\t * * `string` - read an object property from the data source. There are\n\t\t *   three 'special' options that can be used in the string to alter how\n\t\t *   DataTables reads the data from the source object:\n\t\t *    * `.` - Dotted Javascript notation. Just as you use a `.` in\n\t\t *      Javascript to read from nested objects, so to can the options\n\t\t *      specified in `data`. For example: `browser.version` or\n\t\t *      `browser.name`. If your object parameter name contains a period, use\n\t\t *      `\\\\` to escape it - i.e. `first\\\\.name`.\n\t\t *    * `[]` - Array notation. DataTables can automatically combine data\n\t\t *      from and array source, joining the data with the characters provided\n\t\t *      between the two brackets. For example: `name[, ]` would provide a\n\t\t *      comma-space separated list from the source array. If no characters\n\t\t *      are provided between the brackets, the original array source is\n\t\t *      returned.\n\t\t *    * `()` - Function notation. Adding `()` to the end of a parameter will\n\t\t *      execute a function of the name given. For example: `browser()` for a\n\t\t *      simple function on the data source, `browser.version()` for a\n\t\t *      function in a nested property or even `browser().version` to get an\n\t\t *      object property if the function called returns an object. Note that\n\t\t *      function notation is recommended for use in `render` rather than\n\t\t *      `data` as it is much simpler to use as a renderer.\n\t\t * * `null` - use the original data source for the row rather than plucking\n\t\t *   data directly from it. This action has effects on two other\n\t\t *   initialisation options:\n\t\t *    * `defaultContent` - When null is given as the `data` option and\n\t\t *      `defaultContent` is specified for the column, the value defined by\n\t\t *      `defaultContent` will be used for the cell.\n\t\t *    * `render` - When null is used for the `data` option and the `render`\n\t\t *      option is specified for the column, the whole data source for the\n\t\t *      row is used for the renderer.\n\t\t * * `function` - the function given will be executed whenever DataTables\n\t\t *   needs to set or get the data for a cell in the column. The function\n\t\t *   takes three parameters:\n\t\t *    * Parameters:\n\t\t *      * `{array|object}` The data source for the row\n\t\t *      * `{string}` The type call data requested - this will be 'set' when\n\t\t *        setting data or 'filter', 'display', 'type', 'sort' or undefined\n\t\t *        when gathering data. Note that when `undefined` is given for the\n\t\t *        type DataTables expects to get the raw data for the object back<\n\t\t *      * `{*}` Data to set when the second parameter is 'set'.\n\t\t *    * Return:\n\t\t *      * The return value from the function is not required when 'set' is\n\t\t *        the type of call, but otherwise the return is what will be used\n\t\t *        for the data requested.\n\t\t *\n\t\t * Note that `data` is a getter and setter option. If you just require\n\t\t * formatting of data for output, you will likely want to use `render` which\n\t\t * is simply a getter and thus simpler to use.\n\t\t *\n\t\t * Note that prior to DataTables 1.9.2 `data` was called `mDataProp`. The\n\t\t * name change reflects the flexibility of this property and is consistent\n\t\t * with the naming of mRender. If 'mDataProp' is given, then it will still\n\t\t * be used by DataTables, as it automatically maps the old name to the new\n\t\t * if required.\n\t\t *\n\t\t *  @type string|int|function|null\n\t\t *  @default null <i>Use automatically calculated column index</i>\n\t\t *\n\t\t *  @name DataTable.defaults.column.data\n\t\t *  @dtopt Columns\n\t\t *\n\t\t *  @example\n\t\t *    // Read table data from objects\n\t\t *    // JSON structure for each row:\n\t\t *    //   {\n\t\t *    //      \"engine\": {value},\n\t\t *    //      \"browser\": {value},\n\t\t *    //      \"platform\": {value},\n\t\t *    //      \"version\": {value},\n\t\t *    //      \"grade\": {value}\n\t\t *    //   }\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"ajaxSource\": \"sources/objects.txt\",\n\t\t *        \"columns\": [\n\t\t *          { \"data\": \"engine\" },\n\t\t *          { \"data\": \"browser\" },\n\t\t *          { \"data\": \"platform\" },\n\t\t *          { \"data\": \"version\" },\n\t\t *          { \"data\": \"grade\" }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Read information from deeply nested objects\n\t\t *    // JSON structure for each row:\n\t\t *    //   {\n\t\t *    //      \"engine\": {value},\n\t\t *    //      \"browser\": {value},\n\t\t *    //      \"platform\": {\n\t\t *    //         \"inner\": {value}\n\t\t *    //      },\n\t\t *    //      \"details\": [\n\t\t *    //         {value}, {value}\n\t\t *    //      ]\n\t\t *    //   }\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"ajaxSource\": \"sources/deep.txt\",\n\t\t *        \"columns\": [\n\t\t *          { \"data\": \"engine\" },\n\t\t *          { \"data\": \"browser\" },\n\t\t *          { \"data\": \"platform.inner\" },\n\t\t *          { \"data\": \"details.0\" },\n\t\t *          { \"data\": \"details.1\" }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Using `data` as a function to provide different information for\n\t\t *    // sorting, filtering and display. In this case, currency (price)\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [ {\n\t\t *          \"targets\": [ 0 ],\n\t\t *          \"data\": function ( source, type, val ) {\n\t\t *            if (type === 'set') {\n\t\t *              source.price = val;\n\t\t *              // Store the computed dislay and filter values for efficiency\n\t\t *              source.price_display = val==\"\" ? \"\" : \"$\"+numberFormat(val);\n\t\t *              source.price_filter  = val==\"\" ? \"\" : \"$\"+numberFormat(val)+\" \"+val;\n\t\t *              return;\n\t\t *            }\n\t\t *            else if (type === 'display') {\n\t\t *              return source.price_display;\n\t\t *            }\n\t\t *            else if (type === 'filter') {\n\t\t *              return source.price_filter;\n\t\t *            }\n\t\t *            // 'sort', 'type' and undefined all just use the integer\n\t\t *            return source.price;\n\t\t *          }\n\t\t *        } ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Using default content\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [ {\n\t\t *          \"targets\": [ 0 ],\n\t\t *          \"data\": null,\n\t\t *          \"defaultContent\": \"Click to edit\"\n\t\t *        } ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Using array notation - outputting a list from an array\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [ {\n\t\t *          \"targets\": [ 0 ],\n\t\t *          \"data\": \"name[, ]\"\n\t\t *        } ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t */\n\t\t\"mData\": null,\n\t\n\t\n\t\t/**\n\t\t * This property is the rendering partner to `data` and it is suggested that\n\t\t * when you want to manipulate data for display (including filtering,\n\t\t * sorting etc) without altering the underlying data for the table, use this\n\t\t * property. `render` can be considered to be the the read only companion to\n\t\t * `data` which is read / write (then as such more complex). Like `data`\n\t\t * this option can be given in a number of different ways to effect its\n\t\t * behaviour:\n\t\t *\n\t\t * * `integer` - treated as an array index for the data source. This is the\n\t\t *   default that DataTables uses (incrementally increased for each column).\n\t\t * * `string` - read an object property from the data source. There are\n\t\t *   three 'special' options that can be used in the string to alter how\n\t\t *   DataTables reads the data from the source object:\n\t\t *    * `.` - Dotted Javascript notation. Just as you use a `.` in\n\t\t *      Javascript to read from nested objects, so to can the options\n\t\t *      specified in `data`. For example: `browser.version` or\n\t\t *      `browser.name`. If your object parameter name contains a period, use\n\t\t *      `\\\\` to escape it - i.e. `first\\\\.name`.\n\t\t *    * `[]` - Array notation. DataTables can automatically combine data\n\t\t *      from and array source, joining the data with the characters provided\n\t\t *      between the two brackets. For example: `name[, ]` would provide a\n\t\t *      comma-space separated list from the source array. If no characters\n\t\t *      are provided between the brackets, the original array source is\n\t\t *      returned.\n\t\t *    * `()` - Function notation. Adding `()` to the end of a parameter will\n\t\t *      execute a function of the name given. For example: `browser()` for a\n\t\t *      simple function on the data source, `browser.version()` for a\n\t\t *      function in a nested property or even `browser().version` to get an\n\t\t *      object property if the function called returns an object.\n\t\t * * `object` - use different data for the different data types requested by\n\t\t *   DataTables ('filter', 'display', 'type' or 'sort'). The property names\n\t\t *   of the object is the data type the property refers to and the value can\n\t\t *   defined using an integer, string or function using the same rules as\n\t\t *   `render` normally does. Note that an `_` option _must_ be specified.\n\t\t *   This is the default value to use if you haven't specified a value for\n\t\t *   the data type requested by DataTables.\n\t\t * * `function` - the function given will be executed whenever DataTables\n\t\t *   needs to set or get the data for a cell in the column. The function\n\t\t *   takes three parameters:\n\t\t *    * Parameters:\n\t\t *      * {array|object} The data source for the row (based on `data`)\n\t\t *      * {string} The type call data requested - this will be 'filter',\n\t\t *        'display', 'type' or 'sort'.\n\t\t *      * {array|object} The full data source for the row (not based on\n\t\t *        `data`)\n\t\t *    * Return:\n\t\t *      * The return value from the function is what will be used for the\n\t\t *        data requested.\n\t\t *\n\t\t *  @type string|int|function|object|null\n\t\t *  @default null Use the data source value.\n\t\t *\n\t\t *  @name DataTable.defaults.column.render\n\t\t *  @dtopt Columns\n\t\t *\n\t\t *  @example\n\t\t *    // Create a comma separated list from an array of objects\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"ajaxSource\": \"sources/deep.txt\",\n\t\t *        \"columns\": [\n\t\t *          { \"data\": \"engine\" },\n\t\t *          { \"data\": \"browser\" },\n\t\t *          {\n\t\t *            \"data\": \"platform\",\n\t\t *            \"render\": \"[, ].name\"\n\t\t *          }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Execute a function to obtain data\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [ {\n\t\t *          \"targets\": [ 0 ],\n\t\t *          \"data\": null, // Use the full data source object for the renderer's source\n\t\t *          \"render\": \"browserName()\"\n\t\t *        } ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // As an object, extracting different data for the different types\n\t\t *    // This would be used with a data source such as:\n\t\t *    //   { \"phone\": 5552368, \"phone_filter\": \"5552368 555-2368\", \"phone_display\": \"555-2368\" }\n\t\t *    // Here the `phone` integer is used for sorting and type detection, while `phone_filter`\n\t\t *    // (which has both forms) is used for filtering for if a user inputs either format, while\n\t\t *    // the formatted phone number is the one that is shown in the table.\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [ {\n\t\t *          \"targets\": [ 0 ],\n\t\t *          \"data\": null, // Use the full data source object for the renderer's source\n\t\t *          \"render\": {\n\t\t *            \"_\": \"phone\",\n\t\t *            \"filter\": \"phone_filter\",\n\t\t *            \"display\": \"phone_display\"\n\t\t *          }\n\t\t *        } ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Use as a function to create a link from the data source\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [ {\n\t\t *          \"targets\": [ 0 ],\n\t\t *          \"data\": \"download_link\",\n\t\t *          \"render\": function ( data, type, full ) {\n\t\t *            return '<a href=\"'+data+'\">Download</a>';\n\t\t *          }\n\t\t *        } ]\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"mRender\": null,\n\t\n\t\n\t\t/**\n\t\t * Change the cell type created for the column - either TD cells or TH cells. This\n\t\t * can be useful as TH cells have semantic meaning in the table body, allowing them\n\t\t * to act as a header for a row (you may wish to add scope='row' to the TH elements).\n\t\t *  @type string\n\t\t *  @default td\n\t\t *\n\t\t *  @name DataTable.defaults.column.cellType\n\t\t *  @dtopt Columns\n\t\t *\n\t\t *  @example\n\t\t *    // Make the first column use TH cells\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [ {\n\t\t *          \"targets\": [ 0 ],\n\t\t *          \"cellType\": \"th\"\n\t\t *        } ]\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"sCellType\": \"td\",\n\t\n\t\n\t\t/**\n\t\t * Class to give to each cell in this column.\n\t\t *  @type string\n\t\t *  @default <i>Empty string</i>\n\t\t *\n\t\t *  @name DataTable.defaults.column.class\n\t\t *  @dtopt Columns\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columnDefs`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [\n\t\t *          { \"class\": \"my_class\", \"targets\": [ 0 ] }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columns`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columns\": [\n\t\t *          { \"class\": \"my_class\" },\n\t\t *          null,\n\t\t *          null,\n\t\t *          null,\n\t\t *          null\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"sClass\": \"\",\n\t\n\t\t/**\n\t\t * When DataTables calculates the column widths to assign to each column,\n\t\t * it finds the longest string in each column and then constructs a\n\t\t * temporary table and reads the widths from that. The problem with this\n\t\t * is that \"mmm\" is much wider then \"iiii\", but the latter is a longer\n\t\t * string - thus the calculation can go wrong (doing it properly and putting\n\t\t * it into an DOM object and measuring that is horribly(!) slow). Thus as\n\t\t * a \"work around\" we provide this option. It will append its value to the\n\t\t * text that is found to be the longest string for the column - i.e. padding.\n\t\t * Generally you shouldn't need this!\n\t\t *  @type string\n\t\t *  @default <i>Empty string<i>\n\t\t *\n\t\t *  @name DataTable.defaults.column.contentPadding\n\t\t *  @dtopt Columns\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columns`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columns\": [\n\t\t *          null,\n\t\t *          null,\n\t\t *          null,\n\t\t *          {\n\t\t *            \"contentPadding\": \"mmm\"\n\t\t *          }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"sContentPadding\": \"\",\n\t\n\t\n\t\t/**\n\t\t * Allows a default value to be given for a column's data, and will be used\n\t\t * whenever a null data source is encountered (this can be because `data`\n\t\t * is set to null, or because the data source itself is null).\n\t\t *  @type string\n\t\t *  @default null\n\t\t *\n\t\t *  @name DataTable.defaults.column.defaultContent\n\t\t *  @dtopt Columns\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columnDefs`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [\n\t\t *          {\n\t\t *            \"data\": null,\n\t\t *            \"defaultContent\": \"Edit\",\n\t\t *            \"targets\": [ -1 ]\n\t\t *          }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columns`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columns\": [\n\t\t *          null,\n\t\t *          null,\n\t\t *          null,\n\t\t *          {\n\t\t *            \"data\": null,\n\t\t *            \"defaultContent\": \"Edit\"\n\t\t *          }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"sDefaultContent\": null,\n\t\n\t\n\t\t/**\n\t\t * This parameter is only used in DataTables' server-side processing. It can\n\t\t * be exceptionally useful to know what columns are being displayed on the\n\t\t * client side, and to map these to database fields. When defined, the names\n\t\t * also allow DataTables to reorder information from the server if it comes\n\t\t * back in an unexpected order (i.e. if you switch your columns around on the\n\t\t * client-side, your server-side code does not also need updating).\n\t\t *  @type string\n\t\t *  @default <i>Empty string</i>\n\t\t *\n\t\t *  @name DataTable.defaults.column.name\n\t\t *  @dtopt Columns\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columnDefs`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [\n\t\t *          { \"name\": \"engine\", \"targets\": [ 0 ] },\n\t\t *          { \"name\": \"browser\", \"targets\": [ 1 ] },\n\t\t *          { \"name\": \"platform\", \"targets\": [ 2 ] },\n\t\t *          { \"name\": \"version\", \"targets\": [ 3 ] },\n\t\t *          { \"name\": \"grade\", \"targets\": [ 4 ] }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columns`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columns\": [\n\t\t *          { \"name\": \"engine\" },\n\t\t *          { \"name\": \"browser\" },\n\t\t *          { \"name\": \"platform\" },\n\t\t *          { \"name\": \"version\" },\n\t\t *          { \"name\": \"grade\" }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"sName\": \"\",\n\t\n\t\n\t\t/**\n\t\t * Defines a data source type for the ordering which can be used to read\n\t\t * real-time information from the table (updating the internally cached\n\t\t * version) prior to ordering. This allows ordering to occur on user\n\t\t * editable elements such as form inputs.\n\t\t *  @type string\n\t\t *  @default std\n\t\t *\n\t\t *  @name DataTable.defaults.column.orderDataType\n\t\t *  @dtopt Columns\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columnDefs`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [\n\t\t *          { \"orderDataType\": \"dom-text\", \"targets\": [ 2, 3 ] },\n\t\t *          { \"type\": \"numeric\", \"targets\": [ 3 ] },\n\t\t *          { \"orderDataType\": \"dom-select\", \"targets\": [ 4 ] },\n\t\t *          { \"orderDataType\": \"dom-checkbox\", \"targets\": [ 5 ] }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columns`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columns\": [\n\t\t *          null,\n\t\t *          null,\n\t\t *          { \"orderDataType\": \"dom-text\" },\n\t\t *          { \"orderDataType\": \"dom-text\", \"type\": \"numeric\" },\n\t\t *          { \"orderDataType\": \"dom-select\" },\n\t\t *          { \"orderDataType\": \"dom-checkbox\" }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"sSortDataType\": \"std\",\n\t\n\t\n\t\t/**\n\t\t * The title of this column.\n\t\t *  @type string\n\t\t *  @default null <i>Derived from the 'TH' value for this column in the\n\t\t *    original HTML table.</i>\n\t\t *\n\t\t *  @name DataTable.defaults.column.title\n\t\t *  @dtopt Columns\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columnDefs`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [\n\t\t *          { \"title\": \"My column title\", \"targets\": [ 0 ] }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columns`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columns\": [\n\t\t *          { \"title\": \"My column title\" },\n\t\t *          null,\n\t\t *          null,\n\t\t *          null,\n\t\t *          null\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"sTitle\": null,\n\t\n\t\n\t\t/**\n\t\t * The type allows you to specify how the data for this column will be\n\t\t * ordered. Four types (string, numeric, date and html (which will strip\n\t\t * HTML tags before ordering)) are currently available. Note that only date\n\t\t * formats understood by Javascript's Date() object will be accepted as type\n\t\t * date. For example: \"Mar 26, 2008 5:03 PM\". May take the values: 'string',\n\t\t * 'numeric', 'date' or 'html' (by default). Further types can be adding\n\t\t * through plug-ins.\n\t\t *  @type string\n\t\t *  @default null <i>Auto-detected from raw data</i>\n\t\t *\n\t\t *  @name DataTable.defaults.column.type\n\t\t *  @dtopt Columns\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columnDefs`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [\n\t\t *          { \"type\": \"html\", \"targets\": [ 0 ] }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columns`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columns\": [\n\t\t *          { \"type\": \"html\" },\n\t\t *          null,\n\t\t *          null,\n\t\t *          null,\n\t\t *          null\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"sType\": null,\n\t\n\t\n\t\t/**\n\t\t * Defining the width of the column, this parameter may take any CSS value\n\t\t * (3em, 20px etc). DataTables applies 'smart' widths to columns which have not\n\t\t * been given a specific width through this interface ensuring that the table\n\t\t * remains readable.\n\t\t *  @type string\n\t\t *  @default null <i>Automatic</i>\n\t\t *\n\t\t *  @name DataTable.defaults.column.width\n\t\t *  @dtopt Columns\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columnDefs`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columnDefs\": [\n\t\t *          { \"width\": \"20%\", \"targets\": [ 0 ] }\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t *\n\t\t *  @example\n\t\t *    // Using `columns`\n\t\t *    $(document).ready( function() {\n\t\t *      $('#example').dataTable( {\n\t\t *        \"columns\": [\n\t\t *          { \"width\": \"20%\" },\n\t\t *          null,\n\t\t *          null,\n\t\t *          null,\n\t\t *          null\n\t\t *        ]\n\t\t *      } );\n\t\t *    } );\n\t\t */\n\t\t\"sWidth\": null\n\t};\n\t\n\t_fnHungarianMap( DataTable.defaults.column );\n\t\n\t\n\t\n\t/**\n\t * DataTables settings object - this holds all the information needed for a\n\t * given table, including configuration, data and current application of the\n\t * table options. DataTables does not have a single instance for each DataTable\n\t * with the settings attached to that instance, but rather instances of the\n\t * DataTable \"class\" are created on-the-fly as needed (typically by a\n\t * $().dataTable() call) and the settings object is then applied to that\n\t * instance.\n\t *\n\t * Note that this object is related to {@link DataTable.defaults} but this\n\t * one is the internal data store for DataTables's cache of columns. It should\n\t * NOT be manipulated outside of DataTables. Any configuration should be done\n\t * through the initialisation options.\n\t *  @namespace\n\t *  @todo Really should attach the settings object to individual instances so we\n\t *    don't need to create new instances on each $().dataTable() call (if the\n\t *    table already exists). It would also save passing oSettings around and\n\t *    into every single function. However, this is a very significant\n\t *    architecture change for DataTables and will almost certainly break\n\t *    backwards compatibility with older installations. This is something that\n\t *    will be done in 2.0.\n\t */\n\tDataTable.models.oSettings = {\n\t\t/**\n\t\t * Primary features of DataTables and their enablement state.\n\t\t *  @namespace\n\t\t */\n\t\t\"oFeatures\": {\n\t\n\t\t\t/**\n\t\t\t * Flag to say if DataTables should automatically try to calculate the\n\t\t\t * optimum table and columns widths (true) or not (false).\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t\t * set a default use {@link DataTable.defaults}.\n\t\t\t *  @type boolean\n\t\t\t */\n\t\t\t\"bAutoWidth\": null,\n\t\n\t\t\t/**\n\t\t\t * Delay the creation of TR and TD elements until they are actually\n\t\t\t * needed by a driven page draw. This can give a significant speed\n\t\t\t * increase for Ajax source and Javascript source data, but makes no\n\t\t\t * difference at all fro DOM and server-side processing tables.\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t\t * set a default use {@link DataTable.defaults}.\n\t\t\t *  @type boolean\n\t\t\t */\n\t\t\t\"bDeferRender\": null,\n\t\n\t\t\t/**\n\t\t\t * Enable filtering on the table or not. Note that if this is disabled\n\t\t\t * then there is no filtering at all on the table, including fnFilter.\n\t\t\t * To just remove the filtering input use sDom and remove the 'f' option.\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t\t * set a default use {@link DataTable.defaults}.\n\t\t\t *  @type boolean\n\t\t\t */\n\t\t\t\"bFilter\": null,\n\t\n\t\t\t/**\n\t\t\t * Table information element (the 'Showing x of y records' div) enable\n\t\t\t * flag.\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t\t * set a default use {@link DataTable.defaults}.\n\t\t\t *  @type boolean\n\t\t\t */\n\t\t\t\"bInfo\": null,\n\t\n\t\t\t/**\n\t\t\t * Present a user control allowing the end user to change the page size\n\t\t\t * when pagination is enabled.\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t\t * set a default use {@link DataTable.defaults}.\n\t\t\t *  @type boolean\n\t\t\t */\n\t\t\t\"bLengthChange\": null,\n\t\n\t\t\t/**\n\t\t\t * Pagination enabled or not. Note that if this is disabled then length\n\t\t\t * changing must also be disabled.\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t\t * set a default use {@link DataTable.defaults}.\n\t\t\t *  @type boolean\n\t\t\t */\n\t\t\t\"bPaginate\": null,\n\t\n\t\t\t/**\n\t\t\t * Processing indicator enable flag whenever DataTables is enacting a\n\t\t\t * user request - typically an Ajax request for server-side processing.\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t\t * set a default use {@link DataTable.defaults}.\n\t\t\t *  @type boolean\n\t\t\t */\n\t\t\t\"bProcessing\": null,\n\t\n\t\t\t/**\n\t\t\t * Server-side processing enabled flag - when enabled DataTables will\n\t\t\t * get all data from the server for every draw - there is no filtering,\n\t\t\t * sorting or paging done on the client-side.\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t\t * set a default use {@link DataTable.defaults}.\n\t\t\t *  @type boolean\n\t\t\t */\n\t\t\t\"bServerSide\": null,\n\t\n\t\t\t/**\n\t\t\t * Sorting enablement flag.\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t\t * set a default use {@link DataTable.defaults}.\n\t\t\t *  @type boolean\n\t\t\t */\n\t\t\t\"bSort\": null,\n\t\n\t\t\t/**\n\t\t\t * Multi-column sorting\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t\t * set a default use {@link DataTable.defaults}.\n\t\t\t *  @type boolean\n\t\t\t */\n\t\t\t\"bSortMulti\": null,\n\t\n\t\t\t/**\n\t\t\t * Apply a class to the columns which are being sorted to provide a\n\t\t\t * visual highlight or not. This can slow things down when enabled since\n\t\t\t * there is a lot of DOM interaction.\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t\t * set a default use {@link DataTable.defaults}.\n\t\t\t *  @type boolean\n\t\t\t */\n\t\t\t\"bSortClasses\": null,\n\t\n\t\t\t/**\n\t\t\t * State saving enablement flag.\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t\t * set a default use {@link DataTable.defaults}.\n\t\t\t *  @type boolean\n\t\t\t */\n\t\t\t\"bStateSave\": null\n\t\t},\n\t\n\t\n\t\t/**\n\t\t * Scrolling settings for a table.\n\t\t *  @namespace\n\t\t */\n\t\t\"oScroll\": {\n\t\t\t/**\n\t\t\t * When the table is shorter in height than sScrollY, collapse the\n\t\t\t * table container down to the height of the table (when true).\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t\t * set a default use {@link DataTable.defaults}.\n\t\t\t *  @type boolean\n\t\t\t */\n\t\t\t\"bCollapse\": null,\n\t\n\t\t\t/**\n\t\t\t * Width of the scrollbar for the web-browser's platform. Calculated\n\t\t\t * during table initialisation.\n\t\t\t *  @type int\n\t\t\t *  @default 0\n\t\t\t */\n\t\t\t\"iBarWidth\": 0,\n\t\n\t\t\t/**\n\t\t\t * Viewport width for horizontal scrolling. Horizontal scrolling is\n\t\t\t * disabled if an empty string.\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t\t * set a default use {@link DataTable.defaults}.\n\t\t\t *  @type string\n\t\t\t */\n\t\t\t\"sX\": null,\n\t\n\t\t\t/**\n\t\t\t * Width to expand the table to when using x-scrolling. Typically you\n\t\t\t * should not need to use this.\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t\t * set a default use {@link DataTable.defaults}.\n\t\t\t *  @type string\n\t\t\t *  @deprecated\n\t\t\t */\n\t\t\t\"sXInner\": null,\n\t\n\t\t\t/**\n\t\t\t * Viewport height for vertical scrolling. Vertical scrolling is disabled\n\t\t\t * if an empty string.\n\t\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t\t * set a default use {@link DataTable.defaults}.\n\t\t\t *  @type string\n\t\t\t */\n\t\t\t\"sY\": null\n\t\t},\n\t\n\t\t/**\n\t\t * Language information for the table.\n\t\t *  @namespace\n\t\t *  @extends DataTable.defaults.oLanguage\n\t\t */\n\t\t\"oLanguage\": {\n\t\t\t/**\n\t\t\t * Information callback function. See\n\t\t\t * {@link DataTable.defaults.fnInfoCallback}\n\t\t\t *  @type function\n\t\t\t *  @default null\n\t\t\t */\n\t\t\t\"fnInfoCallback\": null\n\t\t},\n\t\n\t\t/**\n\t\t * Browser support parameters\n\t\t *  @namespace\n\t\t */\n\t\t\"oBrowser\": {\n\t\t\t/**\n\t\t\t * Indicate if the browser incorrectly calculates width:100% inside a\n\t\t\t * scrolling element (IE6/7)\n\t\t\t *  @type boolean\n\t\t\t *  @default false\n\t\t\t */\n\t\t\t\"bScrollOversize\": false,\n\t\n\t\t\t/**\n\t\t\t * Determine if the vertical scrollbar is on the right or left of the\n\t\t\t * scrolling container - needed for rtl language layout, although not\n\t\t\t * all browsers move the scrollbar (Safari).\n\t\t\t *  @type boolean\n\t\t\t *  @default false\n\t\t\t */\n\t\t\t\"bScrollbarLeft\": false,\n\t\n\t\t\t/**\n\t\t\t * Flag for if `getBoundingClientRect` is fully supported or not\n\t\t\t *  @type boolean\n\t\t\t *  @default false\n\t\t\t */\n\t\t\t\"bBounding\": false,\n\t\n\t\t\t/**\n\t\t\t * Browser scrollbar width\n\t\t\t *  @type integer\n\t\t\t *  @default 0\n\t\t\t */\n\t\t\t\"barWidth\": 0\n\t\t},\n\t\n\t\n\t\t\"ajax\": null,\n\t\n\t\n\t\t/**\n\t\t * Array referencing the nodes which are used for the features. The\n\t\t * parameters of this object match what is allowed by sDom - i.e.\n\t\t *   <ul>\n\t\t *     <li>'l' - Length changing</li>\n\t\t *     <li>'f' - Filtering input</li>\n\t\t *     <li>'t' - The table!</li>\n\t\t *     <li>'i' - Information</li>\n\t\t *     <li>'p' - Pagination</li>\n\t\t *     <li>'r' - pRocessing</li>\n\t\t *   </ul>\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aanFeatures\": [],\n\t\n\t\t/**\n\t\t * Store data information - see {@link DataTable.models.oRow} for detailed\n\t\t * information.\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoData\": [],\n\t\n\t\t/**\n\t\t * Array of indexes which are in the current display (after filtering etc)\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aiDisplay\": [],\n\t\n\t\t/**\n\t\t * Array of indexes for display - no filtering\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aiDisplayMaster\": [],\n\t\n\t\t/**\n\t\t * Map of row ids to data indexes\n\t\t *  @type object\n\t\t *  @default {}\n\t\t */\n\t\t\"aIds\": {},\n\t\n\t\t/**\n\t\t * Store information about each column that is in use\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoColumns\": [],\n\t\n\t\t/**\n\t\t * Store information about the table's header\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoHeader\": [],\n\t\n\t\t/**\n\t\t * Store information about the table's footer\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoFooter\": [],\n\t\n\t\t/**\n\t\t * Store the applied global search information in case we want to force a\n\t\t * research or compare the old search to a new one.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @namespace\n\t\t *  @extends DataTable.models.oSearch\n\t\t */\n\t\t\"oPreviousSearch\": {},\n\t\n\t\t/**\n\t\t * Store the applied search for each column - see\n\t\t * {@link DataTable.models.oSearch} for the format that is used for the\n\t\t * filtering information for each column.\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoPreSearchCols\": [],\n\t\n\t\t/**\n\t\t * Sorting that is applied to the table. Note that the inner arrays are\n\t\t * used in the following manner:\n\t\t * <ul>\n\t\t *   <li>Index 0 - column number</li>\n\t\t *   <li>Index 1 - current sorting direction</li>\n\t\t * </ul>\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type array\n\t\t *  @todo These inner arrays should really be objects\n\t\t */\n\t\t\"aaSorting\": null,\n\t\n\t\t/**\n\t\t * Sorting that is always applied to the table (i.e. prefixed in front of\n\t\t * aaSorting).\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aaSortingFixed\": [],\n\t\n\t\t/**\n\t\t * Classes to use for the striping of a table.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"asStripeClasses\": null,\n\t\n\t\t/**\n\t\t * If restoring a table - we should restore its striping classes as well\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"asDestroyStripes\": [],\n\t\n\t\t/**\n\t\t * If restoring a table - we should restore its width\n\t\t *  @type int\n\t\t *  @default 0\n\t\t */\n\t\t\"sDestroyWidth\": 0,\n\t\n\t\t/**\n\t\t * Callback functions array for every time a row is inserted (i.e. on a draw).\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoRowCallback\": [],\n\t\n\t\t/**\n\t\t * Callback functions for the header on each draw.\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoHeaderCallback\": [],\n\t\n\t\t/**\n\t\t * Callback function for the footer on each draw.\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoFooterCallback\": [],\n\t\n\t\t/**\n\t\t * Array of callback functions for draw callback functions\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoDrawCallback\": [],\n\t\n\t\t/**\n\t\t * Array of callback functions for row created function\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoRowCreatedCallback\": [],\n\t\n\t\t/**\n\t\t * Callback functions for just before the table is redrawn. A return of\n\t\t * false will be used to cancel the draw.\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoPreDrawCallback\": [],\n\t\n\t\t/**\n\t\t * Callback functions for when the table has been initialised.\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoInitComplete\": [],\n\t\n\t\n\t\t/**\n\t\t * Callbacks for modifying the settings to be stored for state saving, prior to\n\t\t * saving state.\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoStateSaveParams\": [],\n\t\n\t\t/**\n\t\t * Callbacks for modifying the settings that have been stored for state saving\n\t\t * prior to using the stored values to restore the state.\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoStateLoadParams\": [],\n\t\n\t\t/**\n\t\t * Callbacks for operating on the settings object once the saved state has been\n\t\t * loaded\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoStateLoaded\": [],\n\t\n\t\t/**\n\t\t * Cache the table ID for quick access\n\t\t *  @type string\n\t\t *  @default <i>Empty string</i>\n\t\t */\n\t\t\"sTableId\": \"\",\n\t\n\t\t/**\n\t\t * The TABLE node for the main table\n\t\t *  @type node\n\t\t *  @default null\n\t\t */\n\t\t\"nTable\": null,\n\t\n\t\t/**\n\t\t * Permanent ref to the thead element\n\t\t *  @type node\n\t\t *  @default null\n\t\t */\n\t\t\"nTHead\": null,\n\t\n\t\t/**\n\t\t * Permanent ref to the tfoot element - if it exists\n\t\t *  @type node\n\t\t *  @default null\n\t\t */\n\t\t\"nTFoot\": null,\n\t\n\t\t/**\n\t\t * Permanent ref to the tbody element\n\t\t *  @type node\n\t\t *  @default null\n\t\t */\n\t\t\"nTBody\": null,\n\t\n\t\t/**\n\t\t * Cache the wrapper node (contains all DataTables controlled elements)\n\t\t *  @type node\n\t\t *  @default null\n\t\t */\n\t\t\"nTableWrapper\": null,\n\t\n\t\t/**\n\t\t * Indicate if when using server-side processing the loading of data\n\t\t * should be deferred until the second draw.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type boolean\n\t\t *  @default false\n\t\t */\n\t\t\"bDeferLoading\": false,\n\t\n\t\t/**\n\t\t * Indicate if all required information has been read in\n\t\t *  @type boolean\n\t\t *  @default false\n\t\t */\n\t\t\"bInitialised\": false,\n\t\n\t\t/**\n\t\t * Information about open rows. Each object in the array has the parameters\n\t\t * 'nTr' and 'nParent'\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoOpenRows\": [],\n\t\n\t\t/**\n\t\t * Dictate the positioning of DataTables' control elements - see\n\t\t * {@link DataTable.model.oInit.sDom}.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type string\n\t\t *  @default null\n\t\t */\n\t\t\"sDom\": null,\n\t\n\t\t/**\n\t\t * Search delay (in mS)\n\t\t *  @type integer\n\t\t *  @default null\n\t\t */\n\t\t\"searchDelay\": null,\n\t\n\t\t/**\n\t\t * Which type of pagination should be used.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type string\n\t\t *  @default two_button\n\t\t */\n\t\t\"sPaginationType\": \"two_button\",\n\t\n\t\t/**\n\t\t * The state duration (for `stateSave`) in seconds.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type int\n\t\t *  @default 0\n\t\t */\n\t\t\"iStateDuration\": 0,\n\t\n\t\t/**\n\t\t * Array of callback functions for state saving. Each array element is an\n\t\t * object with the following parameters:\n\t\t *   <ul>\n\t\t *     <li>function:fn - function to call. Takes two parameters, oSettings\n\t\t *       and the JSON string to save that has been thus far created. Returns\n\t\t *       a JSON string to be inserted into a json object\n\t\t *       (i.e. '\"param\": [ 0, 1, 2]')</li>\n\t\t *     <li>string:sName - name of callback</li>\n\t\t *   </ul>\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoStateSave\": [],\n\t\n\t\t/**\n\t\t * Array of callback functions for state loading. Each array element is an\n\t\t * object with the following parameters:\n\t\t *   <ul>\n\t\t *     <li>function:fn - function to call. Takes two parameters, oSettings\n\t\t *       and the object stored. May return false to cancel state loading</li>\n\t\t *     <li>string:sName - name of callback</li>\n\t\t *   </ul>\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoStateLoad\": [],\n\t\n\t\t/**\n\t\t * State that was saved. Useful for back reference\n\t\t *  @type object\n\t\t *  @default null\n\t\t */\n\t\t\"oSavedState\": null,\n\t\n\t\t/**\n\t\t * State that was loaded. Useful for back reference\n\t\t *  @type object\n\t\t *  @default null\n\t\t */\n\t\t\"oLoadedState\": null,\n\t\n\t\t/**\n\t\t * Source url for AJAX data for the table.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type string\n\t\t *  @default null\n\t\t */\n\t\t\"sAjaxSource\": null,\n\t\n\t\t/**\n\t\t * Property from a given object from which to read the table data from. This\n\t\t * can be an empty string (when not server-side processing), in which case\n\t\t * it is  assumed an an array is given directly.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type string\n\t\t */\n\t\t\"sAjaxDataProp\": null,\n\t\n\t\t/**\n\t\t * Note if draw should be blocked while getting data\n\t\t *  @type boolean\n\t\t *  @default true\n\t\t */\n\t\t\"bAjaxDataGet\": true,\n\t\n\t\t/**\n\t\t * The last jQuery XHR object that was used for server-side data gathering.\n\t\t * This can be used for working with the XHR information in one of the\n\t\t * callbacks\n\t\t *  @type object\n\t\t *  @default null\n\t\t */\n\t\t\"jqXHR\": null,\n\t\n\t\t/**\n\t\t * JSON returned from the server in the last Ajax request\n\t\t *  @type object\n\t\t *  @default undefined\n\t\t */\n\t\t\"json\": undefined,\n\t\n\t\t/**\n\t\t * Data submitted as part of the last Ajax request\n\t\t *  @type object\n\t\t *  @default undefined\n\t\t */\n\t\t\"oAjaxData\": undefined,\n\t\n\t\t/**\n\t\t * Function to get the server-side data.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type function\n\t\t */\n\t\t\"fnServerData\": null,\n\t\n\t\t/**\n\t\t * Functions which are called prior to sending an Ajax request so extra\n\t\t * parameters can easily be sent to the server\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoServerParams\": [],\n\t\n\t\t/**\n\t\t * Send the XHR HTTP method - GET or POST (could be PUT or DELETE if\n\t\t * required).\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type string\n\t\t */\n\t\t\"sServerMethod\": null,\n\t\n\t\t/**\n\t\t * Format numbers for display.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type function\n\t\t */\n\t\t\"fnFormatNumber\": null,\n\t\n\t\t/**\n\t\t * List of options that can be used for the user selectable length menu.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aLengthMenu\": null,\n\t\n\t\t/**\n\t\t * Counter for the draws that the table does. Also used as a tracker for\n\t\t * server-side processing\n\t\t *  @type int\n\t\t *  @default 0\n\t\t */\n\t\t\"iDraw\": 0,\n\t\n\t\t/**\n\t\t * Indicate if a redraw is being done - useful for Ajax\n\t\t *  @type boolean\n\t\t *  @default false\n\t\t */\n\t\t\"bDrawing\": false,\n\t\n\t\t/**\n\t\t * Draw index (iDraw) of the last error when parsing the returned data\n\t\t *  @type int\n\t\t *  @default -1\n\t\t */\n\t\t\"iDrawError\": -1,\n\t\n\t\t/**\n\t\t * Paging display length\n\t\t *  @type int\n\t\t *  @default 10\n\t\t */\n\t\t\"_iDisplayLength\": 10,\n\t\n\t\t/**\n\t\t * Paging start point - aiDisplay index\n\t\t *  @type int\n\t\t *  @default 0\n\t\t */\n\t\t\"_iDisplayStart\": 0,\n\t\n\t\t/**\n\t\t * Server-side processing - number of records in the result set\n\t\t * (i.e. before filtering), Use fnRecordsTotal rather than\n\t\t * this property to get the value of the number of records, regardless of\n\t\t * the server-side processing setting.\n\t\t *  @type int\n\t\t *  @default 0\n\t\t *  @private\n\t\t */\n\t\t\"_iRecordsTotal\": 0,\n\t\n\t\t/**\n\t\t * Server-side processing - number of records in the current display set\n\t\t * (i.e. after filtering). Use fnRecordsDisplay rather than\n\t\t * this property to get the value of the number of records, regardless of\n\t\t * the server-side processing setting.\n\t\t *  @type boolean\n\t\t *  @default 0\n\t\t *  @private\n\t\t */\n\t\t\"_iRecordsDisplay\": 0,\n\t\n\t\t/**\n\t\t * The classes to use for the table\n\t\t *  @type object\n\t\t *  @default {}\n\t\t */\n\t\t\"oClasses\": {},\n\t\n\t\t/**\n\t\t * Flag attached to the settings object so you can check in the draw\n\t\t * callback if filtering has been done in the draw. Deprecated in favour of\n\t\t * events.\n\t\t *  @type boolean\n\t\t *  @default false\n\t\t *  @deprecated\n\t\t */\n\t\t\"bFiltered\": false,\n\t\n\t\t/**\n\t\t * Flag attached to the settings object so you can check in the draw\n\t\t * callback if sorting has been done in the draw. Deprecated in favour of\n\t\t * events.\n\t\t *  @type boolean\n\t\t *  @default false\n\t\t *  @deprecated\n\t\t */\n\t\t\"bSorted\": false,\n\t\n\t\t/**\n\t\t * Indicate that if multiple rows are in the header and there is more than\n\t\t * one unique cell per column, if the top one (true) or bottom one (false)\n\t\t * should be used for sorting / title by DataTables.\n\t\t * Note that this parameter will be set by the initialisation routine. To\n\t\t * set a default use {@link DataTable.defaults}.\n\t\t *  @type boolean\n\t\t */\n\t\t\"bSortCellsTop\": null,\n\t\n\t\t/**\n\t\t * Initialisation object that is used for the table\n\t\t *  @type object\n\t\t *  @default null\n\t\t */\n\t\t\"oInit\": null,\n\t\n\t\t/**\n\t\t * Destroy callback functions - for plug-ins to attach themselves to the\n\t\t * destroy so they can clean up markup and events.\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aoDestroyCallback\": [],\n\t\n\t\n\t\t/**\n\t\t * Get the number of records in the current record set, before filtering\n\t\t *  @type function\n\t\t */\n\t\t\"fnRecordsTotal\": function ()\n\t\t{\n\t\t\treturn _fnDataSource( this ) == 'ssp' ?\n\t\t\t\tthis._iRecordsTotal * 1 :\n\t\t\t\tthis.aiDisplayMaster.length;\n\t\t},\n\t\n\t\t/**\n\t\t * Get the number of records in the current record set, after filtering\n\t\t *  @type function\n\t\t */\n\t\t\"fnRecordsDisplay\": function ()\n\t\t{\n\t\t\treturn _fnDataSource( this ) == 'ssp' ?\n\t\t\t\tthis._iRecordsDisplay * 1 :\n\t\t\t\tthis.aiDisplay.length;\n\t\t},\n\t\n\t\t/**\n\t\t * Get the display end point - aiDisplay index\n\t\t *  @type function\n\t\t */\n\t\t\"fnDisplayEnd\": function ()\n\t\t{\n\t\t\tvar\n\t\t\t\tlen      = this._iDisplayLength,\n\t\t\t\tstart    = this._iDisplayStart,\n\t\t\t\tcalc     = start + len,\n\t\t\t\trecords  = this.aiDisplay.length,\n\t\t\t\tfeatures = this.oFeatures,\n\t\t\t\tpaginate = features.bPaginate;\n\t\n\t\t\tif ( features.bServerSide ) {\n\t\t\t\treturn paginate === false || len === -1 ?\n\t\t\t\t\tstart + records :\n\t\t\t\t\tMath.min( start+len, this._iRecordsDisplay );\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn ! paginate || calc>records || len===-1 ?\n\t\t\t\t\trecords :\n\t\t\t\t\tcalc;\n\t\t\t}\n\t\t},\n\t\n\t\t/**\n\t\t * The DataTables object for this table\n\t\t *  @type object\n\t\t *  @default null\n\t\t */\n\t\t\"oInstance\": null,\n\t\n\t\t/**\n\t\t * Unique identifier for each instance of the DataTables object. If there\n\t\t * is an ID on the table node, then it takes that value, otherwise an\n\t\t * incrementing internal counter is used.\n\t\t *  @type string\n\t\t *  @default null\n\t\t */\n\t\t\"sInstance\": null,\n\t\n\t\t/**\n\t\t * tabindex attribute value that is added to DataTables control elements, allowing\n\t\t * keyboard navigation of the table and its controls.\n\t\t */\n\t\t\"iTabIndex\": 0,\n\t\n\t\t/**\n\t\t * DIV container for the footer scrolling table if scrolling\n\t\t */\n\t\t\"nScrollHead\": null,\n\t\n\t\t/**\n\t\t * DIV container for the footer scrolling table if scrolling\n\t\t */\n\t\t\"nScrollFoot\": null,\n\t\n\t\t/**\n\t\t * Last applied sort\n\t\t *  @type array\n\t\t *  @default []\n\t\t */\n\t\t\"aLastSort\": [],\n\t\n\t\t/**\n\t\t * Stored plug-in instances\n\t\t *  @type object\n\t\t *  @default {}\n\t\t */\n\t\t\"oPlugins\": {},\n\t\n\t\t/**\n\t\t * Function used to get a row's id from the row's data\n\t\t *  @type function\n\t\t *  @default null\n\t\t */\n\t\t\"rowIdFn\": null,\n\t\n\t\t/**\n\t\t * Data location where to store a row's id\n\t\t *  @type string\n\t\t *  @default null\n\t\t */\n\t\t\"rowId\": null\n\t};\n\n\t/**\n\t * Extension object for DataTables that is used to provide all extension\n\t * options.\n\t *\n\t * Note that the `DataTable.ext` object is available through\n\t * `jQuery.fn.dataTable.ext` where it may be accessed and manipulated. It is\n\t * also aliased to `jQuery.fn.dataTableExt` for historic reasons.\n\t *  @namespace\n\t *  @extends DataTable.models.ext\n\t */\n\t\n\t\n\t/**\n\t * DataTables extensions\n\t * \n\t * This namespace acts as a collection area for plug-ins that can be used to\n\t * extend DataTables capabilities. Indeed many of the build in methods\n\t * use this method to provide their own capabilities (sorting methods for\n\t * example).\n\t *\n\t * Note that this namespace is aliased to `jQuery.fn.dataTableExt` for legacy\n\t * reasons\n\t *\n\t *  @namespace\n\t */\n\tDataTable.ext = _ext = {\n\t\t/**\n\t\t * Buttons. For use with the Buttons extension for DataTables. This is\n\t\t * defined here so other extensions can define buttons regardless of load\n\t\t * order. It is _not_ used by DataTables core.\n\t\t *\n\t\t *  @type object\n\t\t *  @default {}\n\t\t */\n\t\tbuttons: {},\n\t\n\t\n\t\t/**\n\t\t * Element class names\n\t\t *\n\t\t *  @type object\n\t\t *  @default {}\n\t\t */\n\t\tclasses: {},\n\t\n\t\n\t\t/**\n\t\t * DataTables build type (expanded by the download builder)\n\t\t *\n\t\t *  @type string\n\t\t */\n\t\tbuilder: \"-source-\",\n\t\n\t\n\t\t/**\n\t\t * Error reporting.\n\t\t * \n\t\t * How should DataTables report an error. Can take the value 'alert',\n\t\t * 'throw', 'none' or a function.\n\t\t *\n\t\t *  @type string|function\n\t\t *  @default alert\n\t\t */\n\t\terrMode: \"alert\",\n\t\n\t\n\t\t/**\n\t\t * Feature plug-ins.\n\t\t * \n\t\t * This is an array of objects which describe the feature plug-ins that are\n\t\t * available to DataTables. These feature plug-ins are then available for\n\t\t * use through the `dom` initialisation option.\n\t\t * \n\t\t * Each feature plug-in is described by an object which must have the\n\t\t * following properties:\n\t\t * \n\t\t * * `fnInit` - function that is used to initialise the plug-in,\n\t\t * * `cFeature` - a character so the feature can be enabled by the `dom`\n\t\t *   instillation option. This is case sensitive.\n\t\t *\n\t\t * The `fnInit` function has the following input parameters:\n\t\t *\n\t\t * 1. `{object}` DataTables settings object: see\n\t\t *    {@link DataTable.models.oSettings}\n\t\t *\n\t\t * And the following return is expected:\n\t\t * \n\t\t * * {node|null} The element which contains your feature. Note that the\n\t\t *   return may also be void if your plug-in does not require to inject any\n\t\t *   DOM elements into DataTables control (`dom`) - for example this might\n\t\t *   be useful when developing a plug-in which allows table control via\n\t\t *   keyboard entry\n\t\t *\n\t\t *  @type array\n\t\t *\n\t\t *  @example\n\t\t *    $.fn.dataTable.ext.features.push( {\n\t\t *      \"fnInit\": function( oSettings ) {\n\t\t *        return new TableTools( { \"oDTSettings\": oSettings } );\n\t\t *      },\n\t\t *      \"cFeature\": \"T\"\n\t\t *    } );\n\t\t */\n\t\tfeature: [],\n\t\n\t\n\t\t/**\n\t\t * Row searching.\n\t\t * \n\t\t * This method of searching is complimentary to the default type based\n\t\t * searching, and a lot more comprehensive as it allows you complete control\n\t\t * over the searching logic. Each element in this array is a function\n\t\t * (parameters described below) that is called for every row in the table,\n\t\t * and your logic decides if it should be included in the searching data set\n\t\t * or not.\n\t\t *\n\t\t * Searching functions have the following input parameters:\n\t\t *\n\t\t * 1. `{object}` DataTables settings object: see\n\t\t *    {@link DataTable.models.oSettings}\n\t\t * 2. `{array|object}` Data for the row to be processed (same as the\n\t\t *    original format that was passed in as the data source, or an array\n\t\t *    from a DOM data source\n\t\t * 3. `{int}` Row index ({@link DataTable.models.oSettings.aoData}), which\n\t\t *    can be useful to retrieve the `TR` element if you need DOM interaction.\n\t\t *\n\t\t * And the following return is expected:\n\t\t *\n\t\t * * {boolean} Include the row in the searched result set (true) or not\n\t\t *   (false)\n\t\t *\n\t\t * Note that as with the main search ability in DataTables, technically this\n\t\t * is \"filtering\", since it is subtractive. However, for consistency in\n\t\t * naming we call it searching here.\n\t\t *\n\t\t *  @type array\n\t\t *  @default []\n\t\t *\n\t\t *  @example\n\t\t *    // The following example shows custom search being applied to the\n\t\t *    // fourth column (i.e. the data[3] index) based on two input values\n\t\t *    // from the end-user, matching the data in a certain range.\n\t\t *    $.fn.dataTable.ext.search.push(\n\t\t *      function( settings, data, dataIndex ) {\n\t\t *        var min = document.getElementById('min').value * 1;\n\t\t *        var max = document.getElementById('max').value * 1;\n\t\t *        var version = data[3] == \"-\" ? 0 : data[3]*1;\n\t\t *\n\t\t *        if ( min == \"\" && max == \"\" ) {\n\t\t *          return true;\n\t\t *        }\n\t\t *        else if ( min == \"\" && version < max ) {\n\t\t *          return true;\n\t\t *        }\n\t\t *        else if ( min < version && \"\" == max ) {\n\t\t *          return true;\n\t\t *        }\n\t\t *        else if ( min < version && version < max ) {\n\t\t *          return true;\n\t\t *        }\n\t\t *        return false;\n\t\t *      }\n\t\t *    );\n\t\t */\n\t\tsearch: [],\n\t\n\t\n\t\t/**\n\t\t * Selector extensions\n\t\t *\n\t\t * The `selector` option can be used to extend the options available for the\n\t\t * selector modifier options (`selector-modifier` object data type) that\n\t\t * each of the three built in selector types offer (row, column and cell +\n\t\t * their plural counterparts). For example the Select extension uses this\n\t\t * mechanism to provide an option to select only rows, columns and cells\n\t\t * that have been marked as selected by the end user (`{selected: true}`),\n\t\t * which can be used in conjunction with the existing built in selector\n\t\t * options.\n\t\t *\n\t\t * Each property is an array to which functions can be pushed. The functions\n\t\t * take three attributes:\n\t\t *\n\t\t * * Settings object for the host table\n\t\t * * Options object (`selector-modifier` object type)\n\t\t * * Array of selected item indexes\n\t\t *\n\t\t * The return is an array of the resulting item indexes after the custom\n\t\t * selector has been applied.\n\t\t *\n\t\t *  @type object\n\t\t */\n\t\tselector: {\n\t\t\tcell: [],\n\t\t\tcolumn: [],\n\t\t\trow: []\n\t\t},\n\t\n\t\n\t\t/**\n\t\t * Internal functions, exposed for used in plug-ins.\n\t\t * \n\t\t * Please note that you should not need to use the internal methods for\n\t\t * anything other than a plug-in (and even then, try to avoid if possible).\n\t\t * The internal function may change between releases.\n\t\t *\n\t\t *  @type object\n\t\t *  @default {}\n\t\t */\n\t\tinternal: {},\n\t\n\t\n\t\t/**\n\t\t * Legacy configuration options. Enable and disable legacy options that\n\t\t * are available in DataTables.\n\t\t *\n\t\t *  @type object\n\t\t */\n\t\tlegacy: {\n\t\t\t/**\n\t\t\t * Enable / disable DataTables 1.9 compatible server-side processing\n\t\t\t * requests\n\t\t\t *\n\t\t\t *  @type boolean\n\t\t\t *  @default null\n\t\t\t */\n\t\t\tajax: null\n\t\t},\n\t\n\t\n\t\t/**\n\t\t * Pagination plug-in methods.\n\t\t * \n\t\t * Each entry in this object is a function and defines which buttons should\n\t\t * be shown by the pagination rendering method that is used for the table:\n\t\t * {@link DataTable.ext.renderer.pageButton}. The renderer addresses how the\n\t\t * buttons are displayed in the document, while the functions here tell it\n\t\t * what buttons to display. This is done by returning an array of button\n\t\t * descriptions (what each button will do).\n\t\t *\n\t\t * Pagination types (the four built in options and any additional plug-in\n\t\t * options defined here) can be used through the `paginationType`\n\t\t * initialisation parameter.\n\t\t *\n\t\t * The functions defined take two parameters:\n\t\t *\n\t\t * 1. `{int} page` The current page index\n\t\t * 2. `{int} pages` The number of pages in the table\n\t\t *\n\t\t * Each function is expected to return an array where each element of the\n\t\t * array can be one of:\n\t\t *\n\t\t * * `first` - Jump to first page when activated\n\t\t * * `last` - Jump to last page when activated\n\t\t * * `previous` - Show previous page when activated\n\t\t * * `next` - Show next page when activated\n\t\t * * `{int}` - Show page of the index given\n\t\t * * `{array}` - A nested array containing the above elements to add a\n\t\t *   containing 'DIV' element (might be useful for styling).\n\t\t *\n\t\t * Note that DataTables v1.9- used this object slightly differently whereby\n\t\t * an object with two functions would be defined for each plug-in. That\n\t\t * ability is still supported by DataTables 1.10+ to provide backwards\n\t\t * compatibility, but this option of use is now decremented and no longer\n\t\t * documented in DataTables 1.10+.\n\t\t *\n\t\t *  @type object\n\t\t *  @default {}\n\t\t *\n\t\t *  @example\n\t\t *    // Show previous, next and current page buttons only\n\t\t *    $.fn.dataTableExt.oPagination.current = function ( page, pages ) {\n\t\t *      return [ 'previous', page, 'next' ];\n\t\t *    };\n\t\t */\n\t\tpager: {},\n\t\n\t\n\t\trenderer: {\n\t\t\tpageButton: {},\n\t\t\theader: {}\n\t\t},\n\t\n\t\n\t\t/**\n\t\t * Ordering plug-ins - custom data source\n\t\t * \n\t\t * The extension options for ordering of data available here is complimentary\n\t\t * to the default type based ordering that DataTables typically uses. It\n\t\t * allows much greater control over the the data that is being used to\n\t\t * order a column, but is necessarily therefore more complex.\n\t\t * \n\t\t * This type of ordering is useful if you want to do ordering based on data\n\t\t * live from the DOM (for example the contents of an 'input' element) rather\n\t\t * than just the static string that DataTables knows of.\n\t\t * \n\t\t * The way these plug-ins work is that you create an array of the values you\n\t\t * wish to be ordering for the column in question and then return that\n\t\t * array. The data in the array much be in the index order of the rows in\n\t\t * the table (not the currently ordering order!). Which order data gathering\n\t\t * function is run here depends on the `dt-init columns.orderDataType`\n\t\t * parameter that is used for the column (if any).\n\t\t *\n\t\t * The functions defined take two parameters:\n\t\t *\n\t\t * 1. `{object}` DataTables settings object: see\n\t\t *    {@link DataTable.models.oSettings}\n\t\t * 2. `{int}` Target column index\n\t\t *\n\t\t * Each function is expected to return an array:\n\t\t *\n\t\t * * `{array}` Data for the column to be ordering upon\n\t\t *\n\t\t *  @type array\n\t\t *\n\t\t *  @example\n\t\t *    // Ordering using `input` node values\n\t\t *    $.fn.dataTable.ext.order['dom-text'] = function  ( settings, col )\n\t\t *    {\n\t\t *      return this.api().column( col, {order:'index'} ).nodes().map( function ( td, i ) {\n\t\t *        return $('input', td).val();\n\t\t *      } );\n\t\t *    }\n\t\t */\n\t\torder: {},\n\t\n\t\n\t\t/**\n\t\t * Type based plug-ins.\n\t\t *\n\t\t * Each column in DataTables has a type assigned to it, either by automatic\n\t\t * detection or by direct assignment using the `type` option for the column.\n\t\t * The type of a column will effect how it is ordering and search (plug-ins\n\t\t * can also make use of the column type if required).\n\t\t *\n\t\t * @namespace\n\t\t */\n\t\ttype: {\n\t\t\t/**\n\t\t\t * Type detection functions.\n\t\t\t *\n\t\t\t * The functions defined in this object are used to automatically detect\n\t\t\t * a column's type, making initialisation of DataTables super easy, even\n\t\t\t * when complex data is in the table.\n\t\t\t *\n\t\t\t * The functions defined take two parameters:\n\t\t\t *\n\t\t     *  1. `{*}` Data from the column cell to be analysed\n\t\t     *  2. `{settings}` DataTables settings object. This can be used to\n\t\t     *     perform context specific type detection - for example detection\n\t\t     *     based on language settings such as using a comma for a decimal\n\t\t     *     place. Generally speaking the options from the settings will not\n\t\t     *     be required\n\t\t\t *\n\t\t\t * Each function is expected to return:\n\t\t\t *\n\t\t\t * * `{string|null}` Data type detected, or null if unknown (and thus\n\t\t\t *   pass it on to the other type detection functions.\n\t\t\t *\n\t\t\t *  @type array\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    // Currency type detection plug-in:\n\t\t\t *    $.fn.dataTable.ext.type.detect.push(\n\t\t\t *      function ( data, settings ) {\n\t\t\t *        // Check the numeric part\n\t\t\t *        if ( ! data.substring(1).match(/[0-9]/) ) {\n\t\t\t *          return null;\n\t\t\t *        }\n\t\t\t *\n\t\t\t *        // Check prefixed by currency\n\t\t\t *        if ( data.charAt(0) == '$' || data.charAt(0) == '&pound;' ) {\n\t\t\t *          return 'currency';\n\t\t\t *        }\n\t\t\t *        return null;\n\t\t\t *      }\n\t\t\t *    );\n\t\t\t */\n\t\t\tdetect: [],\n\t\n\t\n\t\t\t/**\n\t\t\t * Type based search formatting.\n\t\t\t *\n\t\t\t * The type based searching functions can be used to pre-format the\n\t\t\t * data to be search on. For example, it can be used to strip HTML\n\t\t\t * tags or to de-format telephone numbers for numeric only searching.\n\t\t\t *\n\t\t\t * Note that is a search is not defined for a column of a given type,\n\t\t\t * no search formatting will be performed.\n\t\t\t * \n\t\t\t * Pre-processing of searching data plug-ins - When you assign the sType\n\t\t\t * for a column (or have it automatically detected for you by DataTables\n\t\t\t * or a type detection plug-in), you will typically be using this for\n\t\t\t * custom sorting, but it can also be used to provide custom searching\n\t\t\t * by allowing you to pre-processing the data and returning the data in\n\t\t\t * the format that should be searched upon. This is done by adding\n\t\t\t * functions this object with a parameter name which matches the sType\n\t\t\t * for that target column. This is the corollary of <i>afnSortData</i>\n\t\t\t * for searching data.\n\t\t\t *\n\t\t\t * The functions defined take a single parameter:\n\t\t\t *\n\t\t     *  1. `{*}` Data from the column cell to be prepared for searching\n\t\t\t *\n\t\t\t * Each function is expected to return:\n\t\t\t *\n\t\t\t * * `{string|null}` Formatted string that will be used for the searching.\n\t\t\t *\n\t\t\t *  @type object\n\t\t\t *  @default {}\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    $.fn.dataTable.ext.type.search['title-numeric'] = function ( d ) {\n\t\t\t *      return d.replace(/\\n/g,\" \").replace( /<.*?>/g, \"\" );\n\t\t\t *    }\n\t\t\t */\n\t\t\tsearch: {},\n\t\n\t\n\t\t\t/**\n\t\t\t * Type based ordering.\n\t\t\t *\n\t\t\t * The column type tells DataTables what ordering to apply to the table\n\t\t\t * when a column is sorted upon. The order for each type that is defined,\n\t\t\t * is defined by the functions available in this object.\n\t\t\t *\n\t\t\t * Each ordering option can be described by three properties added to\n\t\t\t * this object:\n\t\t\t *\n\t\t\t * * `{type}-pre` - Pre-formatting function\n\t\t\t * * `{type}-asc` - Ascending order function\n\t\t\t * * `{type}-desc` - Descending order function\n\t\t\t *\n\t\t\t * All three can be used together, only `{type}-pre` or only\n\t\t\t * `{type}-asc` and `{type}-desc` together. It is generally recommended\n\t\t\t * that only `{type}-pre` is used, as this provides the optimal\n\t\t\t * implementation in terms of speed, although the others are provided\n\t\t\t * for compatibility with existing Javascript sort functions.\n\t\t\t *\n\t\t\t * `{type}-pre`: Functions defined take a single parameter:\n\t\t\t *\n\t\t     *  1. `{*}` Data from the column cell to be prepared for ordering\n\t\t\t *\n\t\t\t * And return:\n\t\t\t *\n\t\t\t * * `{*}` Data to be sorted upon\n\t\t\t *\n\t\t\t * `{type}-asc` and `{type}-desc`: Functions are typical Javascript sort\n\t\t\t * functions, taking two parameters:\n\t\t\t *\n\t\t     *  1. `{*}` Data to compare to the second parameter\n\t\t     *  2. `{*}` Data to compare to the first parameter\n\t\t\t *\n\t\t\t * And returning:\n\t\t\t *\n\t\t\t * * `{*}` Ordering match: <0 if first parameter should be sorted lower\n\t\t\t *   than the second parameter, ===0 if the two parameters are equal and\n\t\t\t *   >0 if the first parameter should be sorted height than the second\n\t\t\t *   parameter.\n\t\t\t * \n\t\t\t *  @type object\n\t\t\t *  @default {}\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    // Numeric ordering of formatted numbers with a pre-formatter\n\t\t\t *    $.extend( $.fn.dataTable.ext.type.order, {\n\t\t\t *      \"string-pre\": function(x) {\n\t\t\t *        a = (a === \"-\" || a === \"\") ? 0 : a.replace( /[^\\d\\-\\.]/g, \"\" );\n\t\t\t *        return parseFloat( a );\n\t\t\t *      }\n\t\t\t *    } );\n\t\t\t *\n\t\t\t *  @example\n\t\t\t *    // Case-sensitive string ordering, with no pre-formatting method\n\t\t\t *    $.extend( $.fn.dataTable.ext.order, {\n\t\t\t *      \"string-case-asc\": function(x,y) {\n\t\t\t *        return ((x < y) ? -1 : ((x > y) ? 1 : 0));\n\t\t\t *      },\n\t\t\t *      \"string-case-desc\": function(x,y) {\n\t\t\t *        return ((x < y) ? 1 : ((x > y) ? -1 : 0));\n\t\t\t *      }\n\t\t\t *    } );\n\t\t\t */\n\t\t\torder: {}\n\t\t},\n\t\n\t\t/**\n\t\t * Unique DataTables instance counter\n\t\t *\n\t\t * @type int\n\t\t * @private\n\t\t */\n\t\t_unique: 0,\n\t\n\t\n\t\t//\n\t\t// Depreciated\n\t\t// The following properties are retained for backwards compatiblity only.\n\t\t// The should not be used in new projects and will be removed in a future\n\t\t// version\n\t\t//\n\t\n\t\t/**\n\t\t * Version check function.\n\t\t *  @type function\n\t\t *  @depreciated Since 1.10\n\t\t */\n\t\tfnVersionCheck: DataTable.fnVersionCheck,\n\t\n\t\n\t\t/**\n\t\t * Index for what 'this' index API functions should use\n\t\t *  @type int\n\t\t *  @deprecated Since v1.10\n\t\t */\n\t\tiApiIndex: 0,\n\t\n\t\n\t\t/**\n\t\t * jQuery UI class container\n\t\t *  @type object\n\t\t *  @deprecated Since v1.10\n\t\t */\n\t\toJUIClasses: {},\n\t\n\t\n\t\t/**\n\t\t * Software version\n\t\t *  @type string\n\t\t *  @deprecated Since v1.10\n\t\t */\n\t\tsVersion: DataTable.version\n\t};\n\t\n\t\n\t//\n\t// Backwards compatibility. Alias to pre 1.10 Hungarian notation counter parts\n\t//\n\t$.extend( _ext, {\n\t\tafnFiltering: _ext.search,\n\t\taTypes:       _ext.type.detect,\n\t\tofnSearch:    _ext.type.search,\n\t\toSort:        _ext.type.order,\n\t\tafnSortData:  _ext.order,\n\t\taoFeatures:   _ext.feature,\n\t\toApi:         _ext.internal,\n\t\toStdClasses:  _ext.classes,\n\t\toPagination:  _ext.pager\n\t} );\n\t\n\t\n\t$.extend( DataTable.ext.classes, {\n\t\t\"sTable\": \"dataTable\",\n\t\t\"sNoFooter\": \"no-footer\",\n\t\n\t\t/* Paging buttons */\n\t\t\"sPageButton\": \"paginate_button\",\n\t\t\"sPageButtonActive\": \"current\",\n\t\t\"sPageButtonDisabled\": \"disabled\",\n\t\n\t\t/* Striping classes */\n\t\t\"sStripeOdd\": \"odd\",\n\t\t\"sStripeEven\": \"even\",\n\t\n\t\t/* Empty row */\n\t\t\"sRowEmpty\": \"dataTables_empty\",\n\t\n\t\t/* Features */\n\t\t\"sWrapper\": \"dataTables_wrapper\",\n\t\t\"sFilter\": \"dataTables_filter\",\n\t\t\"sInfo\": \"dataTables_info\",\n\t\t\"sPaging\": \"dataTables_paginate paging_\", /* Note that the type is postfixed */\n\t\t\"sLength\": \"dataTables_length\",\n\t\t\"sProcessing\": \"dataTables_processing\",\n\t\n\t\t/* Sorting */\n\t\t\"sSortAsc\": \"sorting_asc\",\n\t\t\"sSortDesc\": \"sorting_desc\",\n\t\t\"sSortable\": \"sorting\", /* Sortable in both directions */\n\t\t\"sSortableAsc\": \"sorting_asc_disabled\",\n\t\t\"sSortableDesc\": \"sorting_desc_disabled\",\n\t\t\"sSortableNone\": \"sorting_disabled\",\n\t\t\"sSortColumn\": \"sorting_\", /* Note that an int is postfixed for the sorting order */\n\t\n\t\t/* Filtering */\n\t\t\"sFilterInput\": \"\",\n\t\n\t\t/* Page length */\n\t\t\"sLengthSelect\": \"\",\n\t\n\t\t/* Scrolling */\n\t\t\"sScrollWrapper\": \"dataTables_scroll\",\n\t\t\"sScrollHead\": \"dataTables_scrollHead\",\n\t\t\"sScrollHeadInner\": \"dataTables_scrollHeadInner\",\n\t\t\"sScrollBody\": \"dataTables_scrollBody\",\n\t\t\"sScrollFoot\": \"dataTables_scrollFoot\",\n\t\t\"sScrollFootInner\": \"dataTables_scrollFootInner\",\n\t\n\t\t/* Misc */\n\t\t\"sHeaderTH\": \"\",\n\t\t\"sFooterTH\": \"\",\n\t\n\t\t// Deprecated\n\t\t\"sSortJUIAsc\": \"\",\n\t\t\"sSortJUIDesc\": \"\",\n\t\t\"sSortJUI\": \"\",\n\t\t\"sSortJUIAscAllowed\": \"\",\n\t\t\"sSortJUIDescAllowed\": \"\",\n\t\t\"sSortJUIWrapper\": \"\",\n\t\t\"sSortIcon\": \"\",\n\t\t\"sJUIHeader\": \"\",\n\t\t\"sJUIFooter\": \"\"\n\t} );\n\t\n\t\n\tvar extPagination = DataTable.ext.pager;\n\t\n\tfunction _numbers ( page, pages ) {\n\t\tvar\n\t\t\tnumbers = [],\n\t\t\tbuttons = extPagination.numbers_length,\n\t\t\thalf = Math.floor( buttons / 2 ),\n\t\t\ti = 1;\n\t\n\t\tif ( pages <= buttons ) {\n\t\t\tnumbers = _range( 0, pages );\n\t\t}\n\t\telse if ( page <= half ) {\n\t\t\tnumbers = _range( 0, buttons-2 );\n\t\t\tnumbers.push( 'ellipsis' );\n\t\t\tnumbers.push( pages-1 );\n\t\t}\n\t\telse if ( page >= pages - 1 - half ) {\n\t\t\tnumbers = _range( pages-(buttons-2), pages );\n\t\t\tnumbers.splice( 0, 0, 'ellipsis' ); // no unshift in ie6\n\t\t\tnumbers.splice( 0, 0, 0 );\n\t\t}\n\t\telse {\n\t\t\tnumbers = _range( page-half+2, page+half-1 );\n\t\t\tnumbers.push( 'ellipsis' );\n\t\t\tnumbers.push( pages-1 );\n\t\t\tnumbers.splice( 0, 0, 'ellipsis' );\n\t\t\tnumbers.splice( 0, 0, 0 );\n\t\t}\n\t\n\t\tnumbers.DT_el = 'span';\n\t\treturn numbers;\n\t}\n\t\n\t\n\t$.extend( extPagination, {\n\t\tsimple: function ( page, pages ) {\n\t\t\treturn [ 'previous', 'next' ];\n\t\t},\n\t\n\t\tfull: function ( page, pages ) {\n\t\t\treturn [  'first', 'previous', 'next', 'last' ];\n\t\t},\n\t\n\t\tnumbers: function ( page, pages ) {\n\t\t\treturn [ _numbers(page, pages) ];\n\t\t},\n\t\n\t\tsimple_numbers: function ( page, pages ) {\n\t\t\treturn [ 'previous', _numbers(page, pages), 'next' ];\n\t\t},\n\t\n\t\tfull_numbers: function ( page, pages ) {\n\t\t\treturn [ 'first', 'previous', _numbers(page, pages), 'next', 'last' ];\n\t\t},\n\t\t\n\t\tfirst_last_numbers: function (page, pages) {\n\t \t\treturn ['first', _numbers(page, pages), 'last'];\n\t \t},\n\t\n\t\t// For testing and plug-ins to use\n\t\t_numbers: _numbers,\n\t\n\t\t// Number of number buttons (including ellipsis) to show. _Must be odd!_\n\t\tnumbers_length: 7\n\t} );\n\t\n\t\n\t$.extend( true, DataTable.ext.renderer, {\n\t\tpageButton: {\n\t\t\t_: function ( settings, host, idx, buttons, page, pages ) {\n\t\t\t\tvar classes = settings.oClasses;\n\t\t\t\tvar lang = settings.oLanguage.oPaginate;\n\t\t\t\tvar aria = settings.oLanguage.oAria.paginate || {};\n\t\t\t\tvar btnDisplay, btnClass, counter=0;\n\t\n\t\t\t\tvar attach = function( container, buttons ) {\n\t\t\t\t\tvar i, ien, node, button, tabIndex;\n\t\t\t\t\tvar disabledClass = classes.sPageButtonDisabled;\n\t\t\t\t\tvar clickHandler = function ( e ) {\n\t\t\t\t\t\t_fnPageChange( settings, e.data.action, true );\n\t\t\t\t\t};\n\t\n\t\t\t\t\tfor ( i=0, ien=buttons.length ; i<ien ; i++ ) {\n\t\t\t\t\t\tbutton = buttons[i];\n\t\n\t\t\t\t\t\tif ( $.isArray( button ) ) {\n\t\t\t\t\t\t\tvar inner = $( '<'+(button.DT_el || 'div')+'/>' )\n\t\t\t\t\t\t\t\t.appendTo( container );\n\t\t\t\t\t\t\tattach( inner, button );\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tbtnDisplay = null;\n\t\t\t\t\t\t\tbtnClass = button;\n\t\t\t\t\t\t\ttabIndex = settings.iTabIndex;\n\t\n\t\t\t\t\t\t\tswitch ( button ) {\n\t\t\t\t\t\t\t\tcase 'ellipsis':\n\t\t\t\t\t\t\t\t\tcontainer.append('<span class=\"ellipsis\">&#x2026;</span>');\n\t\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\t\tcase 'first':\n\t\t\t\t\t\t\t\t\tbtnDisplay = lang.sFirst;\n\t\n\t\t\t\t\t\t\t\t\tif ( page === 0 ) {\n\t\t\t\t\t\t\t\t\t\ttabIndex = -1;\n\t\t\t\t\t\t\t\t\t\tbtnClass += ' ' + disabledClass;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\t\tcase 'previous':\n\t\t\t\t\t\t\t\t\tbtnDisplay = lang.sPrevious;\n\t\n\t\t\t\t\t\t\t\t\tif ( page === 0 ) {\n\t\t\t\t\t\t\t\t\t\ttabIndex = -1;\n\t\t\t\t\t\t\t\t\t\tbtnClass += ' ' + disabledClass;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\t\tcase 'next':\n\t\t\t\t\t\t\t\t\tbtnDisplay = lang.sNext;\n\t\n\t\t\t\t\t\t\t\t\tif ( pages === 0 || page === pages-1 ) {\n\t\t\t\t\t\t\t\t\t\ttabIndex = -1;\n\t\t\t\t\t\t\t\t\t\tbtnClass += ' ' + disabledClass;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\t\tcase 'last':\n\t\t\t\t\t\t\t\t\tbtnDisplay = lang.sLast;\n\t\n\t\t\t\t\t\t\t\t\tif ( page === pages-1 ) {\n\t\t\t\t\t\t\t\t\t\ttabIndex = -1;\n\t\t\t\t\t\t\t\t\t\tbtnClass += ' ' + disabledClass;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tbtnDisplay = button + 1;\n\t\t\t\t\t\t\t\t\tbtnClass = page === button ?\n\t\t\t\t\t\t\t\t\t\tclasses.sPageButtonActive : '';\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\tif ( btnDisplay !== null ) {\n\t\t\t\t\t\t\t\tnode = $('<a>', {\n\t\t\t\t\t\t\t\t\t\t'class': classes.sPageButton+' '+btnClass,\n\t\t\t\t\t\t\t\t\t\t'aria-controls': settings.sTableId,\n\t\t\t\t\t\t\t\t\t\t'aria-label': aria[ button ],\n\t\t\t\t\t\t\t\t\t\t'data-dt-idx': counter,\n\t\t\t\t\t\t\t\t\t\t'tabindex': tabIndex,\n\t\t\t\t\t\t\t\t\t\t'id': idx === 0 && typeof button === 'string' ?\n\t\t\t\t\t\t\t\t\t\t\tsettings.sTableId +'_'+ button :\n\t\t\t\t\t\t\t\t\t\t\tnull\n\t\t\t\t\t\t\t\t\t} )\n\t\t\t\t\t\t\t\t\t.html( btnDisplay )\n\t\t\t\t\t\t\t\t\t.appendTo( container );\n\t\n\t\t\t\t\t\t\t\t_fnBindAction(\n\t\t\t\t\t\t\t\t\tnode, {action: button}, clickHandler\n\t\t\t\t\t\t\t\t);\n\t\n\t\t\t\t\t\t\t\tcounter++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\n\t\t\t\t// IE9 throws an 'unknown error' if document.activeElement is used\n\t\t\t\t// inside an iframe or frame. Try / catch the error. Not good for\n\t\t\t\t// accessibility, but neither are frames.\n\t\t\t\tvar activeEl;\n\t\n\t\t\t\ttry {\n\t\t\t\t\t// Because this approach is destroying and recreating the paging\n\t\t\t\t\t// elements, focus is lost on the select button which is bad for\n\t\t\t\t\t// accessibility. So we want to restore focus once the draw has\n\t\t\t\t\t// completed\n\t\t\t\t\tactiveEl = $(host).find(document.activeElement).data('dt-idx');\n\t\t\t\t}\n\t\t\t\tcatch (e) {}\n\t\n\t\t\t\tattach( $(host).empty(), buttons );\n\t\n\t\t\t\tif ( activeEl !== undefined ) {\n\t\t\t\t\t$(host).find( '[data-dt-idx='+activeEl+']' ).trigger('focus');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} );\n\t\n\t\n\t\n\t// Built in type detection. See model.ext.aTypes for information about\n\t// what is required from this methods.\n\t$.extend( DataTable.ext.type.detect, [\n\t\t// Plain numbers - first since V8 detects some plain numbers as dates\n\t\t// e.g. Date.parse('55') (but not all, e.g. Date.parse('22')...).\n\t\tfunction ( d, settings )\n\t\t{\n\t\t\tvar decimal = settings.oLanguage.sDecimal;\n\t\t\treturn _isNumber( d, decimal ) ? 'num'+decimal : null;\n\t\t},\n\t\n\t\t// Dates (only those recognised by the browser's Date.parse)\n\t\tfunction ( d, settings )\n\t\t{\n\t\t\t// V8 tries _very_ hard to make a string passed into `Date.parse()`\n\t\t\t// valid, so we need to use a regex to restrict date formats. Use a\n\t\t\t// plug-in for anything other than ISO8601 style strings\n\t\t\tif ( d && !(d instanceof Date) && ! _re_date.test(d) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tvar parsed = Date.parse(d);\n\t\t\treturn (parsed !== null && !isNaN(parsed)) || _empty(d) ? 'date' : null;\n\t\t},\n\t\n\t\t// Formatted numbers\n\t\tfunction ( d, settings )\n\t\t{\n\t\t\tvar decimal = settings.oLanguage.sDecimal;\n\t\t\treturn _isNumber( d, decimal, true ) ? 'num-fmt'+decimal : null;\n\t\t},\n\t\n\t\t// HTML numeric\n\t\tfunction ( d, settings )\n\t\t{\n\t\t\tvar decimal = settings.oLanguage.sDecimal;\n\t\t\treturn _htmlNumeric( d, decimal ) ? 'html-num'+decimal : null;\n\t\t},\n\t\n\t\t// HTML numeric, formatted\n\t\tfunction ( d, settings )\n\t\t{\n\t\t\tvar decimal = settings.oLanguage.sDecimal;\n\t\t\treturn _htmlNumeric( d, decimal, true ) ? 'html-num-fmt'+decimal : null;\n\t\t},\n\t\n\t\t// HTML (this is strict checking - there must be html)\n\t\tfunction ( d, settings )\n\t\t{\n\t\t\treturn _empty( d ) || (typeof d === 'string' && d.indexOf('<') !== -1) ?\n\t\t\t\t'html' : null;\n\t\t}\n\t] );\n\t\n\t\n\t\n\t// Filter formatting functions. See model.ext.ofnSearch for information about\n\t// what is required from these methods.\n\t// \n\t// Note that additional search methods are added for the html numbers and\n\t// html formatted numbers by `_addNumericSort()` when we know what the decimal\n\t// place is\n\t\n\t\n\t$.extend( DataTable.ext.type.search, {\n\t\thtml: function ( data ) {\n\t\t\treturn _empty(data) ?\n\t\t\t\tdata :\n\t\t\t\ttypeof data === 'string' ?\n\t\t\t\t\tdata\n\t\t\t\t\t\t.replace( _re_new_lines, \" \" )\n\t\t\t\t\t\t.replace( _re_html, \"\" ) :\n\t\t\t\t\t'';\n\t\t},\n\t\n\t\tstring: function ( data ) {\n\t\t\treturn _empty(data) ?\n\t\t\t\tdata :\n\t\t\t\ttypeof data === 'string' ?\n\t\t\t\t\tdata.replace( _re_new_lines, \" \" ) :\n\t\t\t\t\tdata;\n\t\t}\n\t} );\n\t\n\t\n\t\n\tvar __numericReplace = function ( d, decimalPlace, re1, re2 ) {\n\t\tif ( d !== 0 && (!d || d === '-') ) {\n\t\t\treturn -Infinity;\n\t\t}\n\t\n\t\t// If a decimal place other than `.` is used, it needs to be given to the\n\t\t// function so we can detect it and replace with a `.` which is the only\n\t\t// decimal place Javascript recognises - it is not locale aware.\n\t\tif ( decimalPlace ) {\n\t\t\td = _numToDecimal( d, decimalPlace );\n\t\t}\n\t\n\t\tif ( d.replace ) {\n\t\t\tif ( re1 ) {\n\t\t\t\td = d.replace( re1, '' );\n\t\t\t}\n\t\n\t\t\tif ( re2 ) {\n\t\t\t\td = d.replace( re2, '' );\n\t\t\t}\n\t\t}\n\t\n\t\treturn d * 1;\n\t};\n\t\n\t\n\t// Add the numeric 'deformatting' functions for sorting and search. This is done\n\t// in a function to provide an easy ability for the language options to add\n\t// additional methods if a non-period decimal place is used.\n\tfunction _addNumericSort ( decimalPlace ) {\n\t\t$.each(\n\t\t\t{\n\t\t\t\t// Plain numbers\n\t\t\t\t\"num\": function ( d ) {\n\t\t\t\t\treturn __numericReplace( d, decimalPlace );\n\t\t\t\t},\n\t\n\t\t\t\t// Formatted numbers\n\t\t\t\t\"num-fmt\": function ( d ) {\n\t\t\t\t\treturn __numericReplace( d, decimalPlace, _re_formatted_numeric );\n\t\t\t\t},\n\t\n\t\t\t\t// HTML numeric\n\t\t\t\t\"html-num\": function ( d ) {\n\t\t\t\t\treturn __numericReplace( d, decimalPlace, _re_html );\n\t\t\t\t},\n\t\n\t\t\t\t// HTML numeric, formatted\n\t\t\t\t\"html-num-fmt\": function ( d ) {\n\t\t\t\t\treturn __numericReplace( d, decimalPlace, _re_html, _re_formatted_numeric );\n\t\t\t\t}\n\t\t\t},\n\t\t\tfunction ( key, fn ) {\n\t\t\t\t// Add the ordering method\n\t\t\t\t_ext.type.order[ key+decimalPlace+'-pre' ] = fn;\n\t\n\t\t\t\t// For HTML types add a search formatter that will strip the HTML\n\t\t\t\tif ( key.match(/^html\\-/) ) {\n\t\t\t\t\t_ext.type.search[ key+decimalPlace ] = _ext.type.search.html;\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t}\n\t\n\t\n\t// Default sort methods\n\t$.extend( _ext.type.order, {\n\t\t// Dates\n\t\t\"date-pre\": function ( d ) {\n\t\t\tvar ts = Date.parse( d );\n\t\t\treturn isNaN(ts) ? -Infinity : ts;\n\t\t},\n\t\n\t\t// html\n\t\t\"html-pre\": function ( a ) {\n\t\t\treturn _empty(a) ?\n\t\t\t\t'' :\n\t\t\t\ta.replace ?\n\t\t\t\t\ta.replace( /<.*?>/g, \"\" ).toLowerCase() :\n\t\t\t\t\ta+'';\n\t\t},\n\t\n\t\t// string\n\t\t\"string-pre\": function ( a ) {\n\t\t\t// This is a little complex, but faster than always calling toString,\n\t\t\t// http://jsperf.com/tostring-v-check\n\t\t\treturn _empty(a) ?\n\t\t\t\t'' :\n\t\t\t\ttypeof a === 'string' ?\n\t\t\t\t\ta.toLowerCase() :\n\t\t\t\t\t! a.toString ?\n\t\t\t\t\t\t'' :\n\t\t\t\t\t\ta.toString();\n\t\t},\n\t\n\t\t// string-asc and -desc are retained only for compatibility with the old\n\t\t// sort methods\n\t\t\"string-asc\": function ( x, y ) {\n\t\t\treturn ((x < y) ? -1 : ((x > y) ? 1 : 0));\n\t\t},\n\t\n\t\t\"string-desc\": function ( x, y ) {\n\t\t\treturn ((x < y) ? 1 : ((x > y) ? -1 : 0));\n\t\t}\n\t} );\n\t\n\t\n\t// Numeric sorting types - order doesn't matter here\n\t_addNumericSort( '' );\n\t\n\t\n\t$.extend( true, DataTable.ext.renderer, {\n\t\theader: {\n\t\t\t_: function ( settings, cell, column, classes ) {\n\t\t\t\t// No additional mark-up required\n\t\t\t\t// Attach a sort listener to update on sort - note that using the\n\t\t\t\t// `DT` namespace will allow the event to be removed automatically\n\t\t\t\t// on destroy, while the `dt` namespaced event is the one we are\n\t\t\t\t// listening for\n\t\t\t\t$(settings.nTable).on( 'order.dt.DT', function ( e, ctx, sorting, columns ) {\n\t\t\t\t\tif ( settings !== ctx ) { // need to check this this is the host\n\t\t\t\t\t\treturn;               // table, not a nested one\n\t\t\t\t\t}\n\t\n\t\t\t\t\tvar colIdx = column.idx;\n\t\n\t\t\t\t\tcell\n\t\t\t\t\t\t.removeClass(\n\t\t\t\t\t\t\tcolumn.sSortingClass +' '+\n\t\t\t\t\t\t\tclasses.sSortAsc +' '+\n\t\t\t\t\t\t\tclasses.sSortDesc\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.addClass( columns[ colIdx ] == 'asc' ?\n\t\t\t\t\t\t\tclasses.sSortAsc : columns[ colIdx ] == 'desc' ?\n\t\t\t\t\t\t\t\tclasses.sSortDesc :\n\t\t\t\t\t\t\t\tcolumn.sSortingClass\n\t\t\t\t\t\t);\n\t\t\t\t} );\n\t\t\t},\n\t\n\t\t\tjqueryui: function ( settings, cell, column, classes ) {\n\t\t\t\t$('<div/>')\n\t\t\t\t\t.addClass( classes.sSortJUIWrapper )\n\t\t\t\t\t.append( cell.contents() )\n\t\t\t\t\t.append( $('<span/>')\n\t\t\t\t\t\t.addClass( classes.sSortIcon+' '+column.sSortingClassJUI )\n\t\t\t\t\t)\n\t\t\t\t\t.appendTo( cell );\n\t\n\t\t\t\t// Attach a sort listener to update on sort\n\t\t\t\t$(settings.nTable).on( 'order.dt.DT', function ( e, ctx, sorting, columns ) {\n\t\t\t\t\tif ( settings !== ctx ) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tvar colIdx = column.idx;\n\t\n\t\t\t\t\tcell\n\t\t\t\t\t\t.removeClass( classes.sSortAsc +\" \"+classes.sSortDesc )\n\t\t\t\t\t\t.addClass( columns[ colIdx ] == 'asc' ?\n\t\t\t\t\t\t\tclasses.sSortAsc : columns[ colIdx ] == 'desc' ?\n\t\t\t\t\t\t\t\tclasses.sSortDesc :\n\t\t\t\t\t\t\t\tcolumn.sSortingClass\n\t\t\t\t\t\t);\n\t\n\t\t\t\t\tcell\n\t\t\t\t\t\t.find( 'span.'+classes.sSortIcon )\n\t\t\t\t\t\t.removeClass(\n\t\t\t\t\t\t\tclasses.sSortJUIAsc +\" \"+\n\t\t\t\t\t\t\tclasses.sSortJUIDesc +\" \"+\n\t\t\t\t\t\t\tclasses.sSortJUI +\" \"+\n\t\t\t\t\t\t\tclasses.sSortJUIAscAllowed +\" \"+\n\t\t\t\t\t\t\tclasses.sSortJUIDescAllowed\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.addClass( columns[ colIdx ] == 'asc' ?\n\t\t\t\t\t\t\tclasses.sSortJUIAsc : columns[ colIdx ] == 'desc' ?\n\t\t\t\t\t\t\t\tclasses.sSortJUIDesc :\n\t\t\t\t\t\t\t\tcolumn.sSortingClassJUI\n\t\t\t\t\t\t);\n\t\t\t\t} );\n\t\t\t}\n\t\t}\n\t} );\n\t\n\t/*\n\t * Public helper functions. These aren't used internally by DataTables, or\n\t * called by any of the options passed into DataTables, but they can be used\n\t * externally by developers working with DataTables. They are helper functions\n\t * to make working with DataTables a little bit easier.\n\t */\n\t\n\tvar __htmlEscapeEntities = function ( d ) {\n\t\treturn typeof d === 'string' ?\n\t\t\td\n\t\t\t\t.replace(/&/g, '&amp;')\n\t\t\t\t.replace(/</g, '&lt;')\n\t\t\t\t.replace(/>/g, '&gt;')\n\t\t\t\t.replace(/\"/g, '&quot;') :\n\t\t\td;\n\t};\n\t\n\t/**\n\t * Helpers for `columns.render`.\n\t *\n\t * The options defined here can be used with the `columns.render` initialisation\n\t * option to provide a display renderer. The following functions are defined:\n\t *\n\t * * `number` - Will format numeric data (defined by `columns.data`) for\n\t *   display, retaining the original unformatted data for sorting and filtering.\n\t *   It takes 5 parameters:\n\t *   * `string` - Thousands grouping separator\n\t *   * `string` - Decimal point indicator\n\t *   * `integer` - Number of decimal points to show\n\t *   * `string` (optional) - Prefix.\n\t *   * `string` (optional) - Postfix (/suffix).\n\t * * `text` - Escape HTML to help prevent XSS attacks. It has no optional\n\t *   parameters.\n\t *\n\t * @example\n\t *   // Column definition using the number renderer\n\t *   {\n\t *     data: \"salary\",\n\t *     render: $.fn.dataTable.render.number( '\\'', '.', 0, '$' )\n\t *   }\n\t *\n\t * @namespace\n\t */\n\tDataTable.render = {\n\t\tnumber: function ( thousands, decimal, precision, prefix, postfix ) {\n\t\t\treturn {\n\t\t\t\tdisplay: function ( d ) {\n\t\t\t\t\tif ( typeof d !== 'number' && typeof d !== 'string' ) {\n\t\t\t\t\t\treturn d;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tvar negative = d < 0 ? '-' : '';\n\t\t\t\t\tvar flo = parseFloat( d );\n\t\n\t\t\t\t\t// If NaN then there isn't much formatting that we can do - just\n\t\t\t\t\t// return immediately, escaping any HTML (this was supposed to\n\t\t\t\t\t// be a number after all)\n\t\t\t\t\tif ( isNaN( flo ) ) {\n\t\t\t\t\t\treturn __htmlEscapeEntities( d );\n\t\t\t\t\t}\n\t\n\t\t\t\t\tflo = flo.toFixed( precision );\n\t\t\t\t\td = Math.abs( flo );\n\t\n\t\t\t\t\tvar intPart = parseInt( d, 10 );\n\t\t\t\t\tvar floatPart = precision ?\n\t\t\t\t\t\tdecimal+(d - intPart).toFixed( precision ).substring( 2 ):\n\t\t\t\t\t\t'';\n\t\n\t\t\t\t\treturn negative + (prefix||'') +\n\t\t\t\t\t\tintPart.toString().replace(\n\t\t\t\t\t\t\t/\\B(?=(\\d{3})+(?!\\d))/g, thousands\n\t\t\t\t\t\t) +\n\t\t\t\t\t\tfloatPart +\n\t\t\t\t\t\t(postfix||'');\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\t\n\t\ttext: function () {\n\t\t\treturn {\n\t\t\t\tdisplay: __htmlEscapeEntities,\n\t\t\t\tfilter: __htmlEscapeEntities\n\t\t\t};\n\t\t}\n\t};\n\t\n\t\n\t/*\n\t * This is really a good bit rubbish this method of exposing the internal methods\n\t * publicly... - To be fixed in 2.0 using methods on the prototype\n\t */\n\t\n\t\n\t/**\n\t * Create a wrapper function for exporting an internal functions to an external API.\n\t *  @param {string} fn API function name\n\t *  @returns {function} wrapped function\n\t *  @memberof DataTable#internal\n\t */\n\tfunction _fnExternApiFunc (fn)\n\t{\n\t\treturn function() {\n\t\t\tvar args = [_fnSettingsFromNode( this[DataTable.ext.iApiIndex] )].concat(\n\t\t\t\tArray.prototype.slice.call(arguments)\n\t\t\t);\n\t\t\treturn DataTable.ext.internal[fn].apply( this, args );\n\t\t};\n\t}\n\t\n\t\n\t/**\n\t * Reference to internal functions for use by plug-in developers. Note that\n\t * these methods are references to internal functions and are considered to be\n\t * private. If you use these methods, be aware that they are liable to change\n\t * between versions.\n\t *  @namespace\n\t */\n\t$.extend( DataTable.ext.internal, {\n\t\t_fnExternApiFunc: _fnExternApiFunc,\n\t\t_fnBuildAjax: _fnBuildAjax,\n\t\t_fnAjaxUpdate: _fnAjaxUpdate,\n\t\t_fnAjaxParameters: _fnAjaxParameters,\n\t\t_fnAjaxUpdateDraw: _fnAjaxUpdateDraw,\n\t\t_fnAjaxDataSrc: _fnAjaxDataSrc,\n\t\t_fnAddColumn: _fnAddColumn,\n\t\t_fnColumnOptions: _fnColumnOptions,\n\t\t_fnAdjustColumnSizing: _fnAdjustColumnSizing,\n\t\t_fnVisibleToColumnIndex: _fnVisibleToColumnIndex,\n\t\t_fnColumnIndexToVisible: _fnColumnIndexToVisible,\n\t\t_fnVisbleColumns: _fnVisbleColumns,\n\t\t_fnGetColumns: _fnGetColumns,\n\t\t_fnColumnTypes: _fnColumnTypes,\n\t\t_fnApplyColumnDefs: _fnApplyColumnDefs,\n\t\t_fnHungarianMap: _fnHungarianMap,\n\t\t_fnCamelToHungarian: _fnCamelToHungarian,\n\t\t_fnLanguageCompat: _fnLanguageCompat,\n\t\t_fnBrowserDetect: _fnBrowserDetect,\n\t\t_fnAddData: _fnAddData,\n\t\t_fnAddTr: _fnAddTr,\n\t\t_fnNodeToDataIndex: _fnNodeToDataIndex,\n\t\t_fnNodeToColumnIndex: _fnNodeToColumnIndex,\n\t\t_fnGetCellData: _fnGetCellData,\n\t\t_fnSetCellData: _fnSetCellData,\n\t\t_fnSplitObjNotation: _fnSplitObjNotation,\n\t\t_fnGetObjectDataFn: _fnGetObjectDataFn,\n\t\t_fnSetObjectDataFn: _fnSetObjectDataFn,\n\t\t_fnGetDataMaster: _fnGetDataMaster,\n\t\t_fnClearTable: _fnClearTable,\n\t\t_fnDeleteIndex: _fnDeleteIndex,\n\t\t_fnInvalidate: _fnInvalidate,\n\t\t_fnGetRowElements: _fnGetRowElements,\n\t\t_fnCreateTr: _fnCreateTr,\n\t\t_fnBuildHead: _fnBuildHead,\n\t\t_fnDrawHead: _fnDrawHead,\n\t\t_fnDraw: _fnDraw,\n\t\t_fnReDraw: _fnReDraw,\n\t\t_fnAddOptionsHtml: _fnAddOptionsHtml,\n\t\t_fnDetectHeader: _fnDetectHeader,\n\t\t_fnGetUniqueThs: _fnGetUniqueThs,\n\t\t_fnFeatureHtmlFilter: _fnFeatureHtmlFilter,\n\t\t_fnFilterComplete: _fnFilterComplete,\n\t\t_fnFilterCustom: _fnFilterCustom,\n\t\t_fnFilterColumn: _fnFilterColumn,\n\t\t_fnFilter: _fnFilter,\n\t\t_fnFilterCreateSearch: _fnFilterCreateSearch,\n\t\t_fnEscapeRegex: _fnEscapeRegex,\n\t\t_fnFilterData: _fnFilterData,\n\t\t_fnFeatureHtmlInfo: _fnFeatureHtmlInfo,\n\t\t_fnUpdateInfo: _fnUpdateInfo,\n\t\t_fnInfoMacros: _fnInfoMacros,\n\t\t_fnInitialise: _fnInitialise,\n\t\t_fnInitComplete: _fnInitComplete,\n\t\t_fnLengthChange: _fnLengthChange,\n\t\t_fnFeatureHtmlLength: _fnFeatureHtmlLength,\n\t\t_fnFeatureHtmlPaginate: _fnFeatureHtmlPaginate,\n\t\t_fnPageChange: _fnPageChange,\n\t\t_fnFeatureHtmlProcessing: _fnFeatureHtmlProcessing,\n\t\t_fnProcessingDisplay: _fnProcessingDisplay,\n\t\t_fnFeatureHtmlTable: _fnFeatureHtmlTable,\n\t\t_fnScrollDraw: _fnScrollDraw,\n\t\t_fnApplyToChildren: _fnApplyToChildren,\n\t\t_fnCalculateColumnWidths: _fnCalculateColumnWidths,\n\t\t_fnThrottle: _fnThrottle,\n\t\t_fnConvertToWidth: _fnConvertToWidth,\n\t\t_fnGetWidestNode: _fnGetWidestNode,\n\t\t_fnGetMaxLenString: _fnGetMaxLenString,\n\t\t_fnStringToCss: _fnStringToCss,\n\t\t_fnSortFlatten: _fnSortFlatten,\n\t\t_fnSort: _fnSort,\n\t\t_fnSortAria: _fnSortAria,\n\t\t_fnSortListener: _fnSortListener,\n\t\t_fnSortAttachListener: _fnSortAttachListener,\n\t\t_fnSortingClasses: _fnSortingClasses,\n\t\t_fnSortData: _fnSortData,\n\t\t_fnSaveState: _fnSaveState,\n\t\t_fnLoadState: _fnLoadState,\n\t\t_fnSettingsFromNode: _fnSettingsFromNode,\n\t\t_fnLog: _fnLog,\n\t\t_fnMap: _fnMap,\n\t\t_fnBindAction: _fnBindAction,\n\t\t_fnCallbackReg: _fnCallbackReg,\n\t\t_fnCallbackFire: _fnCallbackFire,\n\t\t_fnLengthOverflow: _fnLengthOverflow,\n\t\t_fnRenderer: _fnRenderer,\n\t\t_fnDataSource: _fnDataSource,\n\t\t_fnRowAttributes: _fnRowAttributes,\n\t\t_fnExtend: _fnExtend,\n\t\t_fnCalculateEnd: function () {} // Used by a lot of plug-ins, but redundant\n\t\t                                // in 1.10, so this dead-end function is\n\t\t                                // added to prevent errors\n\t} );\n\t\n\n\t// jQuery access\n\t$.fn.dataTable = DataTable;\n\n\t// Provide access to the host jQuery object (circular reference)\n\tDataTable.$ = $;\n\n\t// Legacy aliases\n\t$.fn.dataTableSettings = DataTable.settings;\n\t$.fn.dataTableExt = DataTable.ext;\n\n\t// With a capital `D` we return a DataTables API instance rather than a\n\t// jQuery object\n\t$.fn.DataTable = function ( opts ) {\n\t\treturn $(this).dataTable( opts ).api();\n\t};\n\n\t// All properties that are available to $.fn.dataTable should also be\n\t// available on $.fn.DataTable\n\t$.each( DataTable, function ( prop, val ) {\n\t\t$.fn.DataTable[ prop ] = val;\n\t} );\n\n\n\t// Information about events fired by DataTables - for documentation.\n\t/**\n\t * Draw event, fired whenever the table is redrawn on the page, at the same\n\t * point as fnDrawCallback. This may be useful for binding events or\n\t * performing calculations when the table is altered at all.\n\t *  @name DataTable#draw.dt\n\t *  @event\n\t *  @param {event} e jQuery event object\n\t *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n\t */\n\n\t/**\n\t * Search event, fired when the searching applied to the table (using the\n\t * built-in global search, or column filters) is altered.\n\t *  @name DataTable#search.dt\n\t *  @event\n\t *  @param {event} e jQuery event object\n\t *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n\t */\n\n\t/**\n\t * Page change event, fired when the paging of the table is altered.\n\t *  @name DataTable#page.dt\n\t *  @event\n\t *  @param {event} e jQuery event object\n\t *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n\t */\n\n\t/**\n\t * Order event, fired when the ordering applied to the table is altered.\n\t *  @name DataTable#order.dt\n\t *  @event\n\t *  @param {event} e jQuery event object\n\t *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n\t */\n\n\t/**\n\t * DataTables initialisation complete event, fired when the table is fully\n\t * drawn, including Ajax data loaded, if Ajax data is required.\n\t *  @name DataTable#init.dt\n\t *  @event\n\t *  @param {event} e jQuery event object\n\t *  @param {object} oSettings DataTables settings object\n\t *  @param {object} json The JSON object request from the server - only\n\t *    present if client-side Ajax sourced data is used</li></ol>\n\t */\n\n\t/**\n\t * State save event, fired when the table has changed state a new state save\n\t * is required. This event allows modification of the state saving object\n\t * prior to actually doing the save, including addition or other state\n\t * properties (for plug-ins) or modification of a DataTables core property.\n\t *  @name DataTable#stateSaveParams.dt\n\t *  @event\n\t *  @param {event} e jQuery event object\n\t *  @param {object} oSettings DataTables settings object\n\t *  @param {object} json The state information to be saved\n\t */\n\n\t/**\n\t * State load event, fired when the table is loading state from the stored\n\t * data, but prior to the settings object being modified by the saved state\n\t * - allowing modification of the saved state is required or loading of\n\t * state for a plug-in.\n\t *  @name DataTable#stateLoadParams.dt\n\t *  @event\n\t *  @param {event} e jQuery event object\n\t *  @param {object} oSettings DataTables settings object\n\t *  @param {object} json The saved state information\n\t */\n\n\t/**\n\t * State loaded event, fired when state has been loaded from stored data and\n\t * the settings object has been modified by the loaded data.\n\t *  @name DataTable#stateLoaded.dt\n\t *  @event\n\t *  @param {event} e jQuery event object\n\t *  @param {object} oSettings DataTables settings object\n\t *  @param {object} json The saved state information\n\t */\n\n\t/**\n\t * Processing event, fired when DataTables is doing some kind of processing\n\t * (be it, order, search or anything else). It can be used to indicate to\n\t * the end user that there is something happening, or that something has\n\t * finished.\n\t *  @name DataTable#processing.dt\n\t *  @event\n\t *  @param {event} e jQuery event object\n\t *  @param {object} oSettings DataTables settings object\n\t *  @param {boolean} bShow Flag for if DataTables is doing processing or not\n\t */\n\n\t/**\n\t * Ajax (XHR) event, fired whenever an Ajax request is completed from a\n\t * request to made to the server for new data. This event is called before\n\t * DataTables processed the returned data, so it can also be used to pre-\n\t * process the data returned from the server, if needed.\n\t *\n\t * Note that this trigger is called in `fnServerData`, if you override\n\t * `fnServerData` and which to use this event, you need to trigger it in you\n\t * success function.\n\t *  @name DataTable#xhr.dt\n\t *  @event\n\t *  @param {event} e jQuery event object\n\t *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n\t *  @param {object} json JSON returned from the server\n\t *\n\t *  @example\n\t *     // Use a custom property returned from the server in another DOM element\n\t *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {\n\t *       $('#status').html( json.status );\n\t *     } );\n\t *\n\t *  @example\n\t *     // Pre-process the data returned from the server\n\t *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {\n\t *       for ( var i=0, ien=json.aaData.length ; i<ien ; i++ ) {\n\t *         json.aaData[i].sum = json.aaData[i].one + json.aaData[i].two;\n\t *       }\n\t *       // Note no return - manipulate the data directly in the JSON object.\n\t *     } );\n\t */\n\n\t/**\n\t * Destroy event, fired when the DataTable is destroyed by calling fnDestroy\n\t * or passing the bDestroy:true parameter in the initialisation object. This\n\t * can be used to remove bound events, added DOM nodes, etc.\n\t *  @name DataTable#destroy.dt\n\t *  @event\n\t *  @param {event} e jQuery event object\n\t *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n\t */\n\n\t/**\n\t * Page length change event, fired when number of records to show on each\n\t * page (the length) is changed.\n\t *  @name DataTable#length.dt\n\t *  @event\n\t *  @param {event} e jQuery event object\n\t *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n\t *  @param {integer} len New length\n\t */\n\n\t/**\n\t * Column sizing has changed.\n\t *  @name DataTable#column-sizing.dt\n\t *  @event\n\t *  @param {event} e jQuery event object\n\t *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n\t */\n\n\t/**\n\t * Column visibility has changed.\n\t *  @name DataTable#column-visibility.dt\n\t *  @event\n\t *  @param {event} e jQuery event object\n\t *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}\n\t *  @param {int} column Column index\n\t *  @param {bool} vis `false` if column now hidden, or `true` if visible\n\t */\n\n\treturn $.fn.dataTable;\n}));\n"]},"metadata":{},"sourceType":"script"}