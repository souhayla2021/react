'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = _interopDefault(require('react'));
var propTypes = require('prop-types');

var _React$createContext = React.createContext();
var Provider = _React$createContext.Provider;
var Consumer = _React$createContext.Consumer;

var LABEL_POSITION = {
  BEFORE: 'before',
  AFTER: 'after'
};

var noop = function noop() {
  return false;
};

var DEFAULT_SHARED_PROPS = {
  labelPosition: LABEL_POSITION.AFTER,
  disabled: false,
  className: '',
  onChange: noop,
  selected: undefined
};

Provider.displayName = 'RadioGroupProvider';

var RadioGroup = function RadioGroup(_ref) {
  var selected = _ref.selected,
      onChange = _ref.onChange,
      name = _ref.name,
      disabled = _ref.disabled,
      children = _ref.children,
      className = _ref.className,
      labelPosition = _ref.labelPosition;
  return React.createElement(
    Provider,
    {
      value: {
        selected: selected,
        onChange: onChange,
        name: name,
        disabled: disabled,
        className: className,
        labelPosition: labelPosition
      }
    },
    children
  );
};

RadioGroup.propTypes = {
  children: propTypes.node.isRequired,
  name: propTypes.string.isRequired,
  labelPosition: propTypes.oneOf(Object.values(LABEL_POSITION)),
  selected: propTypes.oneOfType([propTypes.string, propTypes.number]),
  onChange: propTypes.func,
  disabled: propTypes.bool,
  className: propTypes.string
};

RadioGroup.defaultProps = DEFAULT_SHARED_PROPS;

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var classnames = createCommonjsModule(function (module) {
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/* global define */

(function () {
	var hasOwn = {}.hasOwnProperty;

	function classNames () {
		var classes = [];

		for (var i = 0; i < arguments.length; i++) {
			var arg = arguments[i];
			if (!arg) continue;

			var argType = typeof arg;

			if (argType === 'string' || argType === 'number') {
				classes.push(arg);
			} else if (Array.isArray(arg) && arg.length) {
				var inner = classNames.apply(null, arg);
				if (inner) {
					classes.push(inner);
				}
			} else if (argType === 'object') {
				for (var key in arg) {
					if (hasOwn.call(arg, key) && arg[key]) {
						classes.push(key);
					}
				}
			}
		}

		return classes.join(' ');
	}

	if ('object' !== 'undefined' && module.exports) {
		classNames.default = classNames;
		module.exports = classNames;
	} else if (typeof undefined === 'function' && typeof undefined.amd === 'object' && undefined.amd) {
		// register as 'classnames', consistent with npm package name
		undefined('classnames', [], function () {
			return classNames;
		});
	} else {
		window.classNames = classNames;
	}
}());
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var RadioButton = function RadioButton(_ref) {
  var id = _ref.id,
      value = _ref.value,
      children = _ref.children,
      buttonDisabled = _ref.disabled,
      buttonClassName = _ref.className,
      buttonLabelPosition = _ref.labelPosition;
  return React.createElement(
    Consumer,
    null,
    function (_ref2) {
      var selected = _ref2.selected,
          onChange = _ref2.onChange,
          name = _ref2.name,
          groupDisabled = _ref2.disabled,
          groupClassName = _ref2.className,
          groupLabelPosition = _ref2.labelPosition;

      var className = classnames(groupClassName, buttonClassName);
      var isBefore = buttonLabelPosition !== DEFAULT_SHARED_PROPS.labelPosition || groupLabelPosition !== DEFAULT_SHARED_PROPS.labelPosition;

      var disabled = buttonDisabled || groupDisabled;

      var radioProps = {
        disabled: disabled,
        id: id,
        value: value || id,
        name: name,
        onChange: onChange
      };
      if (selected) radioProps.checked = selected === id;
      var radio = React.createElement('input', _extends({ type: 'radio' }, radioProps));

      var _ref3 = isBefore ? [children, radio] : [radio, children],
          _ref4 = _slicedToArray(_ref3, 2),
          first = _ref4[0],
          second = _ref4[1];

      return React.createElement(
        'label',
        _extends({}, className && { className: className }, { disabled: disabled }),
        first,
        second
      );
    }
  );
};

RadioButton.propTypes = {
  id: propTypes.oneOfType([propTypes.string, propTypes.number]).isRequired,
  labelPosition: propTypes.oneOf(Object.values(LABEL_POSITION)),
  value: propTypes.oneOfType([propTypes.string, propTypes.number]),
  disabled: propTypes.bool,
  children: propTypes.node,
  className: propTypes.string
};

RadioButton.defaultProps = DEFAULT_SHARED_PROPS;

exports.RadioButton = RadioButton;
exports.RadioGroup = RadioGroup;
